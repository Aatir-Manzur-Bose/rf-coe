#    obj/CodeGenerator/Python/Debug/VoicePrompts.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePrompts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePrompts_Get :
    ID = 32977
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 13), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (13, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePrompts_Get.MSG_OFFSET + Debug_VoicePrompts_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePrompts_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePrompts_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePrompts_Get.MSG_OFFSET + Debug_VoicePrompts_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePrompts_Get.ID)
            self.hdr.SetDataLength(Debug_VoicePrompts_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePrompts.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.VoicePrompts.Get", Debug_VoicePrompts_Get.ID, Debug_VoicePrompts_Get)
#    obj/CodeGenerator/Python/Debug/VoicePrompts.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePrompts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePrompts_Status :
    ID = 32979
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 13), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (13, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePrompts_Status.MSG_OFFSET + Debug_VoicePrompts_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePrompts_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePrompts_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePrompts_Status.MSG_OFFSET + Debug_VoicePrompts_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePrompts_Status.ID)
            self.hdr.SetDataLength(Debug_VoicePrompts_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePrompts.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetType(self):
        """Last played Voice Prompt ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_VoicePrompts_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetIsPlayingNow(self):
        """1 - Prompt is playing now"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_VoicePrompts_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetType(self, value):
        """Last played Voice Prompt ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_VoicePrompts_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetIsPlayingNow(self, value):
        """1 - Prompt is playing now"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_VoicePrompts_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="int",units="",minVal="0",maxVal="255",description="Last played Voice Prompt ID.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="IsPlayingNow",type="int",units="Boolean",minVal="0",maxVal="255",description="1 - Prompt is playing now",get=GetIsPlayingNow,set=SetIsPlayingNow,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.VoicePrompts.Status", Debug_VoicePrompts_Status.ID, Debug_VoicePrompts_Status)
#    obj/CodeGenerator/Python/Debug/VoicePrompts.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePrompts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePrompts_Start :
    ID = 32981
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 13), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (13, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePrompts_Start.MSG_OFFSET + Debug_VoicePrompts_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePrompts_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePrompts_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePrompts_Start.MSG_OFFSET + Debug_VoicePrompts_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePrompts_Start.ID)
            self.hdr.SetDataLength(Debug_VoicePrompts_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePrompts.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetType(self):
        """Voice Prompt ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_VoicePrompts_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetType(self, value):
        """Voice Prompt ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_VoicePrompts_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="int",units="",minVal="0",maxVal="255",description="Voice Prompt ID.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.VoicePrompts.Start", Debug_VoicePrompts_Start.ID, Debug_VoicePrompts_Start)
#    obj/CodeGenerator/Python/Debug/VoicePrompts.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePrompts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePrompts_Result :
    ID = 32982
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 13), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (13, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePrompts_Result.MSG_OFFSET + Debug_VoicePrompts_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePrompts_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePrompts_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePrompts_Result.MSG_OFFSET + Debug_VoicePrompts_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePrompts_Result.ID)
            self.hdr.SetDataLength(Debug_VoicePrompts_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePrompts.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetType(self):
        """Voice Prompt ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_VoicePrompts_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetType(self, value):
        """Voice Prompt ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_VoicePrompts_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="int",units="",minVal="0",maxVal="255",description="Voice Prompt ID.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.VoicePrompts.Result", Debug_VoicePrompts_Result.ID, Debug_VoicePrompts_Result)
