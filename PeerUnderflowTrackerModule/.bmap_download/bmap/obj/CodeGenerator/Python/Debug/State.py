#    obj/CodeGenerator/Python/Debug/State.py
#    Created 27/07/2023 at 10:10:18 from:
#        Messages = messages/Debug/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_State_Get :
    ID = 32881
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_State_Get.MSG_OFFSET + Debug_State_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_State_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_State_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_State_Get.MSG_OFFSET + Debug_State_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_State_Get.ID)
            self.hdr.SetDataLength(Debug_State_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.State.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.State.Get", Debug_State_Get.ID, Debug_State_Get)
#    obj/CodeGenerator/Python/Debug/State.py
#    Created 27/07/2023 at 10:10:18 from:
#        Messages = messages/Debug/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_State_Status :
    ID = 32883
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    InternalState = OrderedDict([("PowerOff", 0), ("Connecting", 1), ("Discoverable", 2), ("Connected", 3), ("A2DP", 4), ("IncomingCall", 5), ("OutgoingCall", 6), ("ActiveCall", 7), ("Aux", 8), ("ANRonly", 9), ("TestMode", 10), ("ThreewayCallWaiting", 11), ("ThreewayCallOnHold", 12), ("ThreewayMulticall", 13), ("IncomingCallOnHold", 14), ("ActiveCallNoSco", 15), ("LowBattery", 16), ("FactoryReset", 17), ("LanguageSelect", 18), ("ManualConnect", 19), ("DeviceUpdate", 20), ("Reman", 21), ("ShipMode", 22), ("USB", 23), ("ConfigMode", 24), ("ActiveScoNoCall", 25), ("PowerOn", 26), ("Disconnected", 27), ("ShelfMode", 28), ("Hibernate", 29), ("Boot", 30), ("VPA", 31), ("Undefined", 127)])
    ReverseInternalState = OrderedDict([(0, "PowerOff"), (1, "Connecting"), (2, "Discoverable"), (3, "Connected"), (4, "A2DP"), (5, "IncomingCall"), (6, "OutgoingCall"), (7, "ActiveCall"), (8, "Aux"), (9, "ANRonly"), (10, "TestMode"), (11, "ThreewayCallWaiting"), (12, "ThreewayCallOnHold"), (13, "ThreewayMulticall"), (14, "IncomingCallOnHold"), (15, "ActiveCallNoSco"), (16, "LowBattery"), (17, "FactoryReset"), (18, "LanguageSelect"), (19, "ManualConnect"), (20, "DeviceUpdate"), (21, "Reman"), (22, "ShipMode"), (23, "USB"), (24, "ConfigMode"), (25, "ActiveScoNoCall"), (26, "PowerOn"), (27, "Disconnected"), (28, "ShelfMode"), (29, "Hibernate"), (30, "Boot"), (31, "VPA"), (127, "Undefined")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_State_Status.MSG_OFFSET + Debug_State_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_State_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_State_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_State_Status.MSG_OFFSET + Debug_State_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_State_Status.ID)
            self.hdr.SetDataLength(Debug_State_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.State.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetState(self, enumAsInt=0):
        """Internal state of the product."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_State_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_State_Status.ReverseInternalState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetState(self, value):
        """Internal state of the product."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_State_Status.InternalState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_State_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="State",type="enumeration",units="",minVal="0",maxVal="255",description="Internal state of the product.",get=GetState,set=SetState,count=1, bitfieldInfo = [], enum = [InternalState, ReverseInternalState])\
    ]

Messaging.Register("Debug.State.Status", Debug_State_Status.ID, Debug_State_Status)
