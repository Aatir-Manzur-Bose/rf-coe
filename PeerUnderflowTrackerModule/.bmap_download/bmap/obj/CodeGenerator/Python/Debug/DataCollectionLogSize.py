#    obj/CodeGenerator/Python/Debug/DataCollectionLogSize.py
#    Created 27/07/2023 at 10:10:10 from:
#        Messages = messages/Debug/DataCollectionLogSize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_DataCollectionLogSize_Get :
    ID = 33585
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 51), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (51, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Get.MSG_OFFSET + Debug_DataCollectionLogSize_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_DataCollectionLogSize_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_DataCollectionLogSize_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Get.MSG_OFFSET + Debug_DataCollectionLogSize_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_DataCollectionLogSize_Get.ID)
            self.hdr.SetDataLength(Debug_DataCollectionLogSize_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.DataCollectionLogSize.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.DataCollectionLogSize.Get", Debug_DataCollectionLogSize_Get.ID, Debug_DataCollectionLogSize_Get)
#    obj/CodeGenerator/Python/Debug/DataCollectionLogSize.py
#    Created 27/07/2023 at 10:10:10 from:
#        Messages = messages/Debug/DataCollectionLogSize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_DataCollectionLogSize_Set :
    ID = 33584
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 51), ("Operator", 0)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (51, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Set.MSG_OFFSET + Debug_DataCollectionLogSize_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_DataCollectionLogSize_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_DataCollectionLogSize_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Set.MSG_OFFSET + Debug_DataCollectionLogSize_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_DataCollectionLogSize_Set.ID)
            self.hdr.SetDataLength(Debug_DataCollectionLogSize_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.DataCollectionLogSize.Set"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(4)
    def GetPayload(self, idx):
        """Specifies the new size settings in Bytes for the data collection log."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_DataCollectionLogSize_Set.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(4)
    def SetPayload(self, value, idx):
        """Specifies the new size settings in Bytes for the data collection log."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_DataCollectionLogSize_Set.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Payload",type="int",units="hex",minVal="0",maxVal="255",description="Specifies the new size settings in Bytes for the data collection log.",get=GetPayload,set=SetPayload,count=4, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.DataCollectionLogSize.Set", Debug_DataCollectionLogSize_Set.ID, Debug_DataCollectionLogSize_Set)
#    obj/CodeGenerator/Python/Debug/DataCollectionLogSize.py
#    Created 27/07/2023 at 10:10:10 from:
#        Messages = messages/Debug/DataCollectionLogSize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_DataCollectionLogSize_Status :
    ID = 33587
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 51), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (51, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Status.MSG_OFFSET + Debug_DataCollectionLogSize_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_DataCollectionLogSize_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_DataCollectionLogSize_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Status.MSG_OFFSET + Debug_DataCollectionLogSize_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_DataCollectionLogSize_Status.ID)
            self.hdr.SetDataLength(Debug_DataCollectionLogSize_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.DataCollectionLogSize.Status"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(4)
    def GetCurrentSize(self, idx):
        """Data collection log current/active size settings in Bytes."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_DataCollectionLogSize_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(4)
    def GetMaxSize(self, idx):
        """Data collection log maximum allowed size in Bytes."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_DataCollectionLogSize_Status.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(4)
    def SetCurrentSize(self, value, idx):
        """Data collection log current/active size settings in Bytes."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_DataCollectionLogSize_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(4)
    def SetMaxSize(self, value, idx):
        """Data collection log maximum allowed size in Bytes."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_DataCollectionLogSize_Status.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentSize",type="int",units="hex",minVal="0",maxVal="255",description="Data collection log current/active size settings in Bytes.",get=GetCurrentSize,set=SetCurrentSize,count=4, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MaxSize",type="int",units="hex",minVal="0",maxVal="255",description="Data collection log maximum allowed size in Bytes.",get=GetMaxSize,set=SetMaxSize,count=4, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.DataCollectionLogSize.Status", Debug_DataCollectionLogSize_Status.ID, Debug_DataCollectionLogSize_Status)
#    obj/CodeGenerator/Python/Debug/DataCollectionLogSize.py
#    Created 27/07/2023 at 10:10:10 from:
#        Messages = messages/Debug/DataCollectionLogSize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_DataCollectionLogSize_Error :
    ID = 33588
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    DataCollectionLogSizeErrors = OrderedDict([("Length", 1), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8)])
    ReverseDataCollectionLogSizeErrors = OrderedDict([(1, "Length"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 51), ("Operator", 4)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (51, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Error.MSG_OFFSET + Debug_DataCollectionLogSize_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_DataCollectionLogSize_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_DataCollectionLogSize_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_DataCollectionLogSize_Error.MSG_OFFSET + Debug_DataCollectionLogSize_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_DataCollectionLogSize_Error.ID)
            self.hdr.SetDataLength(Debug_DataCollectionLogSize_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.DataCollectionLogSize.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCodes(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_DataCollectionLogSize_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_DataCollectionLogSize_Error.ReverseDataCollectionLogSizeErrors.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCodes(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_DataCollectionLogSize_Error.DataCollectionLogSizeErrors.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_DataCollectionLogSize_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCodes",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCodes,set=SetErrorCodes,count=1, bitfieldInfo = [], enum = [DataCollectionLogSizeErrors, ReverseDataCollectionLogSizeErrors])\
    ]

Messaging.Register("Debug.DataCollectionLogSize.Error", Debug_DataCollectionLogSize_Error.ID, Debug_DataCollectionLogSize_Error)
