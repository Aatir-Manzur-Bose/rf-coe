#    obj/CodeGenerator/Python/Debug/TonesExtended.py
#    Created 27/07/2023 at 10:10:20 from:
#        Messages = messages/Debug/TonesExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TonesExtended_Get :
    ID = 33329
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 35), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (35, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TonesExtended_Get.MSG_OFFSET + Debug_TonesExtended_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TonesExtended_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TonesExtended_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TonesExtended_Get.MSG_OFFSET + Debug_TonesExtended_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TonesExtended_Get.ID)
            self.hdr.SetDataLength(Debug_TonesExtended_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TonesExtended.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.TonesExtended.Get", Debug_TonesExtended_Get.ID, Debug_TonesExtended_Get)
#    obj/CodeGenerator/Python/Debug/TonesExtended.py
#    Created 27/07/2023 at 10:10:20 from:
#        Messages = messages/Debug/TonesExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TonesExtended_Status :
    ID = 33331
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 35), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (35, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TonesExtended_Status.MSG_OFFSET + Debug_TonesExtended_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TonesExtended_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TonesExtended_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TonesExtended_Status.MSG_OFFSET + Debug_TonesExtended_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TonesExtended_Status.ID)
            self.hdr.SetDataLength(Debug_TonesExtended_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TonesExtended.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLastPlayedTone(self):
        """Last played Tone ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLastPlayedToneVolume(self):
        """Last played Tone ID volume."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetLastCompletedTone(self):
        """Last completed Tone ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetLastQueuedTone(self):
        """Last queued Tone ID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetLastPlayedToneFlags(self):
        """Bitfield of flags indicating additional details such as now playing"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetIsToneNowPlaying(self):
        """This flag is set if the listed last played tone is currently playing."""
        value = (self.GetLastPlayedToneFlags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetIsToneNowPlayingMuted(self):
        """This flag is set if the currently playing tone is muted. (Don't Care if IsToneNowPlaying = 0)"""
        value = (self.GetLastPlayedToneFlags() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetWasLastPlayedToneMuted(self):
        """This flag is set if the last played tone was muted at completion."""
        value = (self.GetLastPlayedToneFlags() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedQueuedToneFlags(self):
        """Unused"""
        value = (self.GetLastPlayedToneFlags() >> 3) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLastPlayedTone(self, value):
        """Last played Tone ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLastPlayedToneVolume(self, value):
        """Last played Tone ID volume."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetLastCompletedTone(self, value):
        """Last completed Tone ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetLastQueuedTone(self, value):
        """Last queued Tone ID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetLastPlayedToneFlags(self, value):
        """Bitfield of flags indicating additional details such as now playing"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TonesExtended_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetIsToneNowPlaying(self, value):
        """This flag is set if the listed last played tone is currently playing."""
        tmp = min(max(value, 0), 1)
        self.SetLastPlayedToneFlags((self.GetLastPlayedToneFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetIsToneNowPlayingMuted(self, value):
        """This flag is set if the currently playing tone is muted. (Don't Care if IsToneNowPlaying = 0)"""
        tmp = min(max(value, 0), 1)
        self.SetLastPlayedToneFlags((self.GetLastPlayedToneFlags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetWasLastPlayedToneMuted(self, value):
        """This flag is set if the last played tone was muted at completion."""
        tmp = min(max(value, 0), 1)
        self.SetLastPlayedToneFlags((self.GetLastPlayedToneFlags() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedQueuedToneFlags(self, value):
        """Unused"""
        tmp = min(max(value, 0), 31)
        self.SetLastPlayedToneFlags((self.GetLastPlayedToneFlags() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LastPlayedTone",type="int",units="",minVal="0",maxVal="255",description="Last played Tone ID.",get=GetLastPlayedTone,set=SetLastPlayedTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastPlayedToneVolume",type="int",units="",minVal="0",maxVal="255",description="Last played Tone ID volume.",get=GetLastPlayedToneVolume,set=SetLastPlayedToneVolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastCompletedTone",type="int",units="",minVal="0",maxVal="255",description="Last completed Tone ID.",get=GetLastCompletedTone,set=SetLastCompletedTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastQueuedTone",type="int",units="",minVal="0",maxVal="255",description="Last queued Tone ID.",get=GetLastQueuedTone,set=SetLastQueuedTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastPlayedToneFlags",type="int",units="",minVal="0",maxVal="255",description="Bitfield of flags indicating additional details such as now playing",get=GetLastPlayedToneFlags,set=SetLastPlayedToneFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="IsToneNowPlaying",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the listed last played tone is currently playing.",get=GetIsToneNowPlaying,set=SetIsToneNowPlaying, enum = []),\
            BitFieldInfo(name="IsToneNowPlayingMuted",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the currently playing tone is muted. (Don't Care if IsToneNowPlaying = 0)",get=GetIsToneNowPlayingMuted,set=SetIsToneNowPlayingMuted, enum = []),\
            BitFieldInfo(name="WasLastPlayedToneMuted",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the last played tone was muted at completion.",get=GetWasLastPlayedToneMuted,set=SetWasLastPlayedToneMuted, enum = []),\
            BitFieldInfo(name="UnusedQueuedToneFlags",type="int",units="",minVal="0",maxVal="31",description="Unused",get=GetUnusedQueuedToneFlags,set=SetUnusedQueuedToneFlags, enum = [])], enum = [])\
    ]

Messaging.Register("Debug.TonesExtended.Status", Debug_TonesExtended_Status.ID, Debug_TonesExtended_Status)
