#    obj/CodeGenerator/Python/Debug/ScoFwd.py
#    Created 27/07/2023 at 10:10:16 from:
#        Messages = messages/Debug/ScoFwd.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_ScoFwd_Get :
    ID = 33409
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 40), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (40, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_ScoFwd_Get.MSG_OFFSET + Debug_ScoFwd_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_ScoFwd_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_ScoFwd_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_ScoFwd_Get.MSG_OFFSET + Debug_ScoFwd_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_ScoFwd_Get.ID)
            self.hdr.SetDataLength(Debug_ScoFwd_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.ScoFwd.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.ScoFwd.Get", Debug_ScoFwd_Get.ID, Debug_ScoFwd_Get)
#    obj/CodeGenerator/Python/Debug/ScoFwd.py
#    Created 27/07/2023 at 10:10:16 from:
#        Messages = messages/Debug/ScoFwd.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_ScoFwd_Status :
    ID = 33411
    SIZE = 16
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 40), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (40, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_ScoFwd_Status.MSG_OFFSET + Debug_ScoFwd_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_ScoFwd_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_ScoFwd_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_ScoFwd_Status.MSG_OFFSET + Debug_ScoFwd_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_ScoFwd_Status.ID)
            self.hdr.SetDataLength(Debug_ScoFwd_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.ScoFwd.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetScoFwdState(self):
        """Specifies the current state of the Sco Fwd Plugin"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetLocalPSM(self):
        """L2Cap PSM registered local"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetRemotePSM(self):
        """L2Cap PSM registered by peer"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetSourceMapped(self):
        """True if the source has been mapped"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetAudioRouted(self):
        """True if audioUpdateAudioRouting has been called (Audio is Routed)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def GetLostPacketCount(self):
        """Number of incoming forwarded packets lost or late"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('11')
    @msg.size('4')
    @msg.count(1)
    def GetPacketHistory(self):
        """Bit mask showing missed packets in the last 32"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetAudioMissing(self):
        """Consecutive section of audio missing"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 15)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetScoFwdState(self, value):
        """Specifies the current state of the Sco Fwd Plugin"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetLocalPSM(self, value):
        """L2Cap PSM registered local"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetRemotePSM(self, value):
        """L2Cap PSM registered by peer"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetSourceMapped(self, value):
        """True if the source has been mapped"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetAudioRouted(self, value):
        """True if audioUpdateAudioRouting has been called (Audio is Routed)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def SetLostPacketCount(self, value):
        """Number of incoming forwarded packets lost or late"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('11')
    @msg.size('4')
    @msg.count(1)
    def SetPacketHistory(self, value):
        """Bit mask showing missed packets in the last 32"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetAudioMissing(self, value):
        """Consecutive section of audio missing"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_ScoFwd_Status.MSG_OFFSET + 15, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ScoFwdState",type="int",units="",minVal="0",maxVal="255",description="Specifies the current state of the Sco Fwd Plugin",get=GetScoFwdState,set=SetScoFwdState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LocalPSM",type="int",units="",minVal="0",maxVal="65535",description="L2Cap PSM registered local",get=GetLocalPSM,set=SetLocalPSM,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RemotePSM",type="int",units="",minVal="0",maxVal="65535",description="L2Cap PSM registered by peer",get=GetRemotePSM,set=SetRemotePSM,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SourceMapped",type="int",units="Boolean",minVal="0",maxVal="255",description="True if the source has been mapped",get=GetSourceMapped,set=SetSourceMapped,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AudioRouted",type="int",units="Boolean",minVal="0",maxVal="255",description="True if audioUpdateAudioRouting has been called (Audio is Routed)",get=GetAudioRouted,set=SetAudioRouted,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LostPacketCount",type="int",units="",minVal="0",maxVal="4294967295",description="Number of incoming forwarded packets lost or late",get=GetLostPacketCount,set=SetLostPacketCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PacketHistory",type="int",units="",minVal="0",maxVal="4294967295",description="Bit mask showing missed packets in the last 32",get=GetPacketHistory,set=SetPacketHistory,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AudioMissing",type="int",units="Boolean",minVal="0",maxVal="255",description="Consecutive section of audio missing",get=GetAudioMissing,set=SetAudioMissing,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.ScoFwd.Status", Debug_ScoFwd_Status.ID, Debug_ScoFwd_Status)
