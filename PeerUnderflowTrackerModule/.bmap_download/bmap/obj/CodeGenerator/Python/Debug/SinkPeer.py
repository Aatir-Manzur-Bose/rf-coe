#    obj/CodeGenerator/Python/Debug/SinkPeer.py
#    Created 27/07/2023 at 10:10:17 from:
#        Messages = messages/Debug/SinkPeer.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_SinkPeer_Get :
    ID = 33393
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 39), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (39, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_SinkPeer_Get.MSG_OFFSET + Debug_SinkPeer_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_SinkPeer_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_SinkPeer_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_SinkPeer_Get.MSG_OFFSET + Debug_SinkPeer_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_SinkPeer_Get.ID)
            self.hdr.SetDataLength(Debug_SinkPeer_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.SinkPeer.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.SinkPeer.Get", Debug_SinkPeer_Get.ID, Debug_SinkPeer_Get)
#    obj/CodeGenerator/Python/Debug/SinkPeer.py
#    Created 27/07/2023 at 10:10:17 from:
#        Messages = messages/Debug/SinkPeer.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_SinkPeer_Status :
    ID = 33395
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    RelaySource = OrderedDict([("NullSource", 0), ("Analogue", 1), ("USB", 2), ("A2DP", 3)])
    ReverseRelaySource = OrderedDict([(0, "NullSource"), (1, "Analogue"), (2, "USB"), (3, "A2DP")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 39), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (39, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_SinkPeer_Status.MSG_OFFSET + Debug_SinkPeer_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_SinkPeer_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_SinkPeer_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_SinkPeer_Status.MSG_OFFSET + Debug_SinkPeer_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_SinkPeer_Status.ID)
            self.hdr.SetDataLength(Debug_SinkPeer_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.SinkPeer.Status"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPeerUseDeviceId(self):
        """Checks if peer devices will use the Device Id record to filter suitable devices."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetRemotePeerAudioConnectionStatus(self):
        """Bitfield of active peer audio connections"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetNoConnection(self):
        """No audio connections are active"""
        value = (self.GetRemotePeerAudioConnectionStatus() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetA2DP(self):
        """1 if A2DP is active"""
        value = (self.GetRemotePeerAudioConnectionStatus() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUSB(self):
        """1 if USB audio is active"""
        value = (self.GetRemotePeerAudioConnectionStatus() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetAnalog(self):
        """1 if analog audio is active"""
        value = (self.GetRemotePeerAudioConnectionStatus() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetPeerSource(self, enumAsInt=0):
        """Current peer relay source"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_SinkPeer_Status.ReverseRelaySource.get(value, value)
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetPeerRelayIsAvailable(self):
        """1 if peer relay is available"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentState(self):
        """Current peer status"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSource(self, enumAsInt=0):
        """Current relay source"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 5)[0]
        if not enumAsInt:
            value = Debug_SinkPeer_Status.ReverseRelaySource.get(value, value)
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetTargetState(self):
        """Target peer status"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetTargetSource(self, enumAsInt=0):
        """Target relay source"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 7)[0]
        if not enumAsInt:
            value = Debug_SinkPeer_Status.ReverseRelaySource.get(value, value)
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetRequiredState(self):
        """Required peer status"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetRequiredSource(self, enumAsInt=0):
        """Current relay source"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = Debug_SinkPeer_Status.ReverseRelaySource.get(value, value)
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPeerUseDeviceId(self, value):
        """Checks if peer devices will use the Device Id record to filter suitable devices."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetRemotePeerAudioConnectionStatus(self, value):
        """Bitfield of active peer audio connections"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetNoConnection(self, value):
        """No audio connections are active"""
        tmp = min(max(value, 0), 1)
        self.SetRemotePeerAudioConnectionStatus((self.GetRemotePeerAudioConnectionStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetA2DP(self, value):
        """1 if A2DP is active"""
        tmp = min(max(value, 0), 1)
        self.SetRemotePeerAudioConnectionStatus((self.GetRemotePeerAudioConnectionStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUSB(self, value):
        """1 if USB audio is active"""
        tmp = min(max(value, 0), 1)
        self.SetRemotePeerAudioConnectionStatus((self.GetRemotePeerAudioConnectionStatus() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetAnalog(self, value):
        """1 if analog audio is active"""
        tmp = min(max(value, 0), 1)
        self.SetRemotePeerAudioConnectionStatus((self.GetRemotePeerAudioConnectionStatus() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetPeerSource(self, value):
        """Current peer relay source"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SinkPeer_Status.RelaySource.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetPeerRelayIsAvailable(self, value):
        """1 if peer relay is available"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentState(self, value):
        """Current peer status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSource(self, value):
        """Current relay source"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SinkPeer_Status.RelaySource.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetTargetState(self, value):
        """Target peer status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetTargetSource(self, value):
        """Target relay source"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SinkPeer_Status.RelaySource.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetRequiredState(self, value):
        """Required peer status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetRequiredSource(self, value):
        """Current relay source"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SinkPeer_Status.RelaySource.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SinkPeer_Status.MSG_OFFSET + 9, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PeerUseDeviceId",type="int",units="Boolean",minVal="0",maxVal="255",description="Checks if peer devices will use the Device Id record to filter suitable devices.",get=GetPeerUseDeviceId,set=SetPeerUseDeviceId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RemotePeerAudioConnectionStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of active peer audio connections",get=GetRemotePeerAudioConnectionStatus,set=SetRemotePeerAudioConnectionStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="NoConnection",type="int",units="Boolean",minVal="0",maxVal="1",description="No audio connections are active",get=GetNoConnection,set=SetNoConnection, enum = []),\
            BitFieldInfo(name="A2DP",type="int",units="Boolean",minVal="0",maxVal="1",description="1 if A2DP is active",get=GetA2DP,set=SetA2DP, enum = []),\
            BitFieldInfo(name="USB",type="int",units="Boolean",minVal="0",maxVal="1",description="1 if USB audio is active",get=GetUSB,set=SetUSB, enum = []),\
            BitFieldInfo(name="Analog",type="int",units="Boolean",minVal="0",maxVal="1",description="1 if analog audio is active",get=GetAnalog,set=SetAnalog, enum = [])], enum = []),\
        FieldInfo(name="PeerSource",type="enumeration",units="",minVal="0",maxVal="255",description="Current peer relay source",get=GetPeerSource,set=SetPeerSource,count=1, bitfieldInfo = [], enum = [RelaySource, ReverseRelaySource]),\
        FieldInfo(name="PeerRelayIsAvailable",type="int",units="Boolean",minVal="0",maxVal="255",description="1 if peer relay is available",get=GetPeerRelayIsAvailable,set=SetPeerRelayIsAvailable,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentState",type="int",units="Bitfield",minVal="0",maxVal="255",description="Current peer status",get=GetCurrentState,set=SetCurrentState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentSource",type="enumeration",units="",minVal="0",maxVal="255",description="Current relay source",get=GetCurrentSource,set=SetCurrentSource,count=1, bitfieldInfo = [], enum = [RelaySource, ReverseRelaySource]),\
        FieldInfo(name="TargetState",type="int",units="Bitfield",minVal="0",maxVal="255",description="Target peer status",get=GetTargetState,set=SetTargetState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetSource",type="enumeration",units="",minVal="0",maxVal="255",description="Target relay source",get=GetTargetSource,set=SetTargetSource,count=1, bitfieldInfo = [], enum = [RelaySource, ReverseRelaySource]),\
        FieldInfo(name="RequiredState",type="int",units="Bitfield",minVal="0",maxVal="255",description="Required peer status",get=GetRequiredState,set=SetRequiredState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RequiredSource",type="enumeration",units="",minVal="0",maxVal="255",description="Current relay source",get=GetRequiredSource,set=SetRequiredSource,count=1, bitfieldInfo = [], enum = [RelaySource, ReverseRelaySource])\
    ]

Messaging.Register("Debug.SinkPeer.Status", Debug_SinkPeer_Status.ID, Debug_SinkPeer_Status)
