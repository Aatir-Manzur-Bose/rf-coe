#    obj/CodeGenerator/Python/Debug/RadioTestMulti.py
#    Created 27/07/2023 at 10:10:14 from:
#        Messages = messages/Debug/RadioTestMulti.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_RadioTestMulti_Start :
    ID = 33045
    SIZE = 26
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    RadioTestType = OrderedDict([("TestStopMode", 0), ("TxContinuousTestMode", 1), ("DutMode", 2), ("TxData1Mode", 3), ("TxData2Mode", 4), ("TxPacketTypeMode", 5), ("RxDataMode", 6), ("SetTxPower", 7)])
    ReverseRadioTestType = OrderedDict([(0, "TestStopMode"), (1, "TxContinuousTestMode"), (2, "DutMode"), (3, "TxData1Mode"), (4, "TxData2Mode"), (5, "TxPacketTypeMode"), (6, "RxDataMode"), (7, "SetTxPower")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 17), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (17, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_RadioTestMulti_Start.MSG_OFFSET + Debug_RadioTestMulti_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_RadioTestMulti_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_RadioTestMulti_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_RadioTestMulti_Start.MSG_OFFSET + Debug_RadioTestMulti_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_RadioTestMulti_Start.ID)
            self.hdr.SetDataLength(Debug_RadioTestMulti_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.RadioTestMulti.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRadioTestMode(self, enumAsInt=0):
        """Radio Test Mode"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_RadioTestMulti_Start.ReverseRadioTestType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetParam1(self):
        """Power Level from 0 to 4095 (Continuous Transmit Mode, Tx Data 1 Test, Tx Data 2 Test, Set Tx Power); or Highside modulation 0 or 1 (Rx Data Test); or Packet Size (TX Packet Types Test)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetParam2(self):
        """Frequency Modulation from -32678 to 32767 in 1/4096 MHz steps, 4096 means 1MHz (Continuous Transmit Mode); or Attenuation (Rx Data Test)"""
        value = struct.unpack_from('>h', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetParam3(self):
        """Number of valid Frequency-Time combinations followed by this (1 to 5)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetFrequency1(self):
        """First frequency value (2402 to 2480) to test"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetTimeForFreq1(self):
        """Time To Test Frequency1."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetFrequency2(self):
        """Second frequency value (2402 to 2480) to test"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetTimeForFreq2(self):
        """Time To Test Frequency2."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetFrequency3(self):
        """Third frequency value (2402 to 2480) to test"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetTimeForFreq3(self):
        """Time To Test Frequency3."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetFrequency4(self):
        """Fourth frequency value (2402 to 2480) to test"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def GetTimeForFreq4(self):
        """Time To Test Frequency4."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('22')
    @msg.size('2')
    @msg.count(1)
    def GetFrequency5(self):
        """Fifth frequency value (2402 to 2480) to test"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def GetTimeForFreq5(self):
        """Time To Test Frequency5."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRadioTestMode(self, value):
        """Radio Test Mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_RadioTestMulti_Start.RadioTestType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetParam1(self, value):
        """Power Level from 0 to 4095 (Continuous Transmit Mode, Tx Data 1 Test, Tx Data 2 Test, Set Tx Power); or Highside modulation 0 or 1 (Rx Data Test); or Packet Size (TX Packet Types Test)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetParam2(self, value):
        """Frequency Modulation from -32678 to 32767 in 1/4096 MHz steps, 4096 means 1MHz (Continuous Transmit Mode); or Attenuation (Rx Data Test)"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetParam3(self, value):
        """Number of valid Frequency-Time combinations followed by this (1 to 5)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 5, tmp)
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetFrequency1(self, value):
        """First frequency value (2402 to 2480) to test"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 6, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetTimeForFreq1(self, value):
        """Time To Test Frequency1."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 8, tmp)
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetFrequency2(self, value):
        """Second frequency value (2402 to 2480) to test"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 10, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetTimeForFreq2(self, value):
        """Time To Test Frequency2."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 12, tmp)
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetFrequency3(self, value):
        """Third frequency value (2402 to 2480) to test"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 14, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetTimeForFreq3(self, value):
        """Time To Test Frequency3."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 16, tmp)
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetFrequency4(self, value):
        """Fourth frequency value (2402 to 2480) to test"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 18, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def SetTimeForFreq4(self, value):
        """Time To Test Frequency4."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 20, tmp)
    
    @msg.units('MHz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('22')
    @msg.size('2')
    @msg.count(1)
    def SetFrequency5(self, value):
        """Fifth frequency value (2402 to 2480) to test"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 22, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def SetTimeForFreq5(self, value):
        """Time To Test Frequency5."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_RadioTestMulti_Start.MSG_OFFSET + 24, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="RadioTestMode",type="enumeration",units="",minVal="0",maxVal="255",description="Radio Test Mode",get=GetRadioTestMode,set=SetRadioTestMode,count=1, bitfieldInfo = [], enum = [RadioTestType, ReverseRadioTestType]),\
        FieldInfo(name="Param1",type="int",units="",minVal="0",maxVal="65535",description="Power Level from 0 to 4095 (Continuous Transmit Mode, Tx Data 1 Test, Tx Data 2 Test, Set Tx Power); or Highside modulation 0 or 1 (Rx Data Test); or Packet Size (TX Packet Types Test)",get=GetParam1,set=SetParam1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param2",type="int",units="",minVal="-32768",maxVal="32767",description="Frequency Modulation from -32678 to 32767 in 1/4096 MHz steps, 4096 means 1MHz (Continuous Transmit Mode); or Attenuation (Rx Data Test)",get=GetParam2,set=SetParam2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param3",type="int",units="",minVal="0",maxVal="255",description="Number of valid Frequency-Time combinations followed by this (1 to 5)",get=GetParam3,set=SetParam3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Frequency1",type="int",units="MHz",minVal="0",maxVal="65535",description="First frequency value (2402 to 2480) to test",get=GetFrequency1,set=SetFrequency1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeForFreq1",type="int",units="seconds",minVal="0",maxVal="65535",description="Time To Test Frequency1.",get=GetTimeForFreq1,set=SetTimeForFreq1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Frequency2",type="int",units="MHz",minVal="0",maxVal="65535",description="Second frequency value (2402 to 2480) to test",get=GetFrequency2,set=SetFrequency2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeForFreq2",type="int",units="seconds",minVal="0",maxVal="65535",description="Time To Test Frequency2.",get=GetTimeForFreq2,set=SetTimeForFreq2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Frequency3",type="int",units="MHz",minVal="0",maxVal="65535",description="Third frequency value (2402 to 2480) to test",get=GetFrequency3,set=SetFrequency3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeForFreq3",type="int",units="seconds",minVal="0",maxVal="65535",description="Time To Test Frequency3.",get=GetTimeForFreq3,set=SetTimeForFreq3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Frequency4",type="int",units="MHz",minVal="0",maxVal="65535",description="Fourth frequency value (2402 to 2480) to test",get=GetFrequency4,set=SetFrequency4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeForFreq4",type="int",units="seconds",minVal="0",maxVal="65535",description="Time To Test Frequency4.",get=GetTimeForFreq4,set=SetTimeForFreq4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Frequency5",type="int",units="MHz",minVal="0",maxVal="65535",description="Fifth frequency value (2402 to 2480) to test",get=GetFrequency5,set=SetFrequency5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeForFreq5",type="int",units="seconds",minVal="0",maxVal="65535",description="Time To Test Frequency5.",get=GetTimeForFreq5,set=SetTimeForFreq5,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.RadioTestMulti.Start", Debug_RadioTestMulti_Start.ID, Debug_RadioTestMulti_Start)
#    obj/CodeGenerator/Python/Debug/RadioTestMulti.py
#    Created 27/07/2023 at 10:10:14 from:
#        Messages = messages/Debug/RadioTestMulti.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_RadioTestMulti_Result :
    ID = 33046
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 17), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (17, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_RadioTestMulti_Result.MSG_OFFSET + Debug_RadioTestMulti_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_RadioTestMulti_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_RadioTestMulti_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_RadioTestMulti_Result.MSG_OFFSET + Debug_RadioTestMulti_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_RadioTestMulti_Result.ID)
            self.hdr.SetDataLength(Debug_RadioTestMulti_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.RadioTestMulti.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.RadioTestMulti.Result", Debug_RadioTestMulti_Result.ID, Debug_RadioTestMulti_Result)
