#    obj/CodeGenerator/Python/Debug/GPIO.py
#    Created 27/07/2023 at 10:10:12 from:
#        Messages = messages/Debug/GPIO.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_GPIO_Get :
    ID = 33505
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 46), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (46, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_GPIO_Get.MSG_OFFSET + Debug_GPIO_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_GPIO_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_GPIO_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_GPIO_Get.MSG_OFFSET + Debug_GPIO_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_GPIO_Get.ID)
            self.hdr.SetDataLength(Debug_GPIO_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.GPIO.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetGPIONum(self):
        """Number of the GPIO to read."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetGPIONum(self, value):
        """Number of the GPIO to read."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="GPIONum",type="int",units="",minVal="0",maxVal="255",description="Number of the GPIO to read.",get=GetGPIONum,set=SetGPIONum,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.GPIO.Get", Debug_GPIO_Get.ID, Debug_GPIO_Get)
#    obj/CodeGenerator/Python/Debug/GPIO.py
#    Created 27/07/2023 at 10:10:12 from:
#        Messages = messages/Debug/GPIO.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_GPIO_SetGet :
    ID = 33506
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    GPIOLevel = OrderedDict([("Low", 0), ("High", 1), ("DontChange", 2)])
    ReverseGPIOLevel = OrderedDict([(0, "Low"), (1, "High"), (2, "DontChange")])
    GPIODirection = OrderedDict([("Input", 0), ("Output", 1), ("DontChange", 2)])
    ReverseGPIODirection = OrderedDict([(0, "Input"), (1, "Output"), (2, "DontChange")])
    GPIOPull = OrderedDict([("None", 0), ("Down", 1), ("Up", 2), ("DontChange", 3)])
    ReverseGPIOPull = OrderedDict([(0, "None"), (1, "Down"), (2, "Up"), (3, "DontChange")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 46), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (46, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_GPIO_SetGet.MSG_OFFSET + Debug_GPIO_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_GPIO_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_GPIO_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_GPIO_SetGet.MSG_OFFSET + Debug_GPIO_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_GPIO_SetGet.ID)
            self.hdr.SetDataLength(Debug_GPIO_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.GPIO.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetGPIONum(self):
        """Number of the GPIO to set (0-127)."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLevel(self, enumAsInt=0):
        """Level to set the GPIO to."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_GPIO_SetGet.ReverseGPIOLevel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction to set the GPIO to."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_GPIO_SetGet.ReverseGPIODirection.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetPull(self, enumAsInt=0):
        """Pull to apply to the GPIO."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Debug_GPIO_SetGet.ReverseGPIOPull.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetGPIONum(self, value):
        """Number of the GPIO to set (0-127)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLevel(self, value):
        """Level to set the GPIO to."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_SetGet.GPIOLevel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction to set the GPIO to."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_SetGet.GPIODirection.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetPull(self, value):
        """Pull to apply to the GPIO."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_SetGet.GPIOPull.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_SetGet.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="GPIONum",type="int",units="",minVal="0",maxVal="255",description="Number of the GPIO to set (0-127).",get=GetGPIONum,set=SetGPIONum,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Level",type="enumeration",units="",minVal="0",maxVal="255",description="Level to set the GPIO to.",get=GetLevel,set=SetLevel,count=1, bitfieldInfo = [], enum = [GPIOLevel, ReverseGPIOLevel]),\
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction to set the GPIO to.",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [GPIODirection, ReverseGPIODirection]),\
        FieldInfo(name="Pull",type="enumeration",units="",minVal="0",maxVal="255",description="Pull to apply to the GPIO.",get=GetPull,set=SetPull,count=1, bitfieldInfo = [], enum = [GPIOPull, ReverseGPIOPull])\
    ]

Messaging.Register("Debug.GPIO.SetGet", Debug_GPIO_SetGet.ID, Debug_GPIO_SetGet)
#    obj/CodeGenerator/Python/Debug/GPIO.py
#    Created 27/07/2023 at 10:10:12 from:
#        Messages = messages/Debug/GPIO.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_GPIO_Status :
    ID = 33507
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    GPIOLevel = OrderedDict([("Low", 0), ("High", 1), ("DontChange", 2)])
    ReverseGPIOLevel = OrderedDict([(0, "Low"), (1, "High"), (2, "DontChange")])
    GPIODirection = OrderedDict([("Input", 0), ("Output", 1), ("DontChange", 2)])
    ReverseGPIODirection = OrderedDict([(0, "Input"), (1, "Output"), (2, "DontChange")])
    GPIOPull = OrderedDict([("None", 0), ("Down", 1), ("Up", 2), ("DontChange", 3)])
    ReverseGPIOPull = OrderedDict([(0, "None"), (1, "Down"), (2, "Up"), (3, "DontChange")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 46), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (46, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_GPIO_Status.MSG_OFFSET + Debug_GPIO_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_GPIO_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_GPIO_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_GPIO_Status.MSG_OFFSET + Debug_GPIO_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_GPIO_Status.ID)
            self.hdr.SetDataLength(Debug_GPIO_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.GPIO.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetGPIONum(self):
        """Number of the GPIO queried (0-127)."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLevel(self, enumAsInt=0):
        """Level of the GPIO."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_GPIO_Status.ReverseGPIOLevel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of the GPIO."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_GPIO_Status.ReverseGPIODirection.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetPull(self, enumAsInt=0):
        """Pull applied to the GPIO."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Debug_GPIO_Status.ReverseGPIOPull.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetGPIONum(self, value):
        """Number of the GPIO queried (0-127)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLevel(self, value):
        """Level of the GPIO."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_Status.GPIOLevel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of the GPIO."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_Status.GPIODirection.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetPull(self, value):
        """Pull applied to the GPIO."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_GPIO_Status.GPIOPull.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_GPIO_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="GPIONum",type="int",units="",minVal="0",maxVal="255",description="Number of the GPIO queried (0-127).",get=GetGPIONum,set=SetGPIONum,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Level",type="enumeration",units="",minVal="0",maxVal="255",description="Level of the GPIO.",get=GetLevel,set=SetLevel,count=1, bitfieldInfo = [], enum = [GPIOLevel, ReverseGPIOLevel]),\
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of the GPIO.",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [GPIODirection, ReverseGPIODirection]),\
        FieldInfo(name="Pull",type="enumeration",units="",minVal="0",maxVal="255",description="Pull applied to the GPIO.",get=GetPull,set=SetPull,count=1, bitfieldInfo = [], enum = [GPIOPull, ReverseGPIOPull])\
    ]

Messaging.Register("Debug.GPIO.Status", Debug_GPIO_Status.ID, Debug_GPIO_Status)
