#    obj/CodeGenerator/Python/Debug/Reset.py
#    Created 27/07/2023 at 10:10:15 from:
#        Messages = messages/Debug/Reset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Reset_Start :
    ID = 32933
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 10), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (10, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Reset_Start.MSG_OFFSET + Debug_Reset_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Reset_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Reset_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Reset_Start.MSG_OFFSET + Debug_Reset_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Reset_Start.ID)
            self.hdr.SetDataLength(Debug_Reset_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Reset.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResetMode(self):
        """Reset Mode (0 - soft reset)."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Reset_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetResetDelay(self):
        """Reset Delay in milliseconds."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Reset_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResetMode(self, value):
        """Reset Mode (0 - soft reset)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Reset_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetResetDelay(self, value):
        """Reset Delay in milliseconds."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Reset_Start.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ResetMode",type="int",units="",minVal="0",maxVal="255",description="Reset Mode (0 - soft reset).",get=GetResetMode,set=SetResetMode,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ResetDelay",type="int",units="ms",minVal="0",maxVal="65535",description="Reset Delay in milliseconds.",get=GetResetDelay,set=SetResetDelay,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Reset.Start", Debug_Reset_Start.ID, Debug_Reset_Start)
#    obj/CodeGenerator/Python/Debug/Reset.py
#    Created 27/07/2023 at 10:10:15 from:
#        Messages = messages/Debug/Reset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Reset_Result :
    ID = 32934
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 10), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (10, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Reset_Result.MSG_OFFSET + Debug_Reset_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Reset_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Reset_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Reset_Result.MSG_OFFSET + Debug_Reset_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Reset_Result.ID)
            self.hdr.SetDataLength(Debug_Reset_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Reset.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.Reset.Result", Debug_Reset_Result.ID, Debug_Reset_Result)
