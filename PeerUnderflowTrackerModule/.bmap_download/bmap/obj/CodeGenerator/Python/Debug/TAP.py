#    obj/CodeGenerator/Python/Debug/TAP.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/TAP.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TAP_Start :
    ID = 33125
    SIZE = 239
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 22), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (22, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TAP_Start.MSG_OFFSET + Debug_TAP_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TAP_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TAP_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TAP_Start.MSG_OFFSET + Debug_TAP_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TAP_Start.ID)
            self.hdr.SetDataLength(Debug_TAP_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TAP.Start"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(239)
    def GetCommand(self):
        """TAP command to be excuted on the target device.  Enclose TAP command in quotes."""
        count = 239
        if count > len(self.rawBuffer())-(Debug_TAP_Start.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(Debug_TAP_Start.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Debug_TAP_Start.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(239)
    def SetCommand(self, value):
        """TAP command to be excuted on the target device.  Enclose TAP command in quotes."""
        tmp = value.encode('utf-8')
        struct.pack_into('239s', self.rawBuffer(), Debug_TAP_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Command",type="string",units="ASCII",minVal="0",maxVal="255",description="TAP command to be excuted on the target device.  Enclose TAP command in quotes.",get=GetCommand,set=SetCommand,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.TAP.Start", Debug_TAP_Start.ID, Debug_TAP_Start)
#    obj/CodeGenerator/Python/Debug/TAP.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/TAP.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TAP_Processing :
    ID = 33127
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 22), ("Operator", 7)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (22, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TAP_Processing.MSG_OFFSET + Debug_TAP_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TAP_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TAP_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TAP_Processing.MSG_OFFSET + Debug_TAP_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TAP_Processing.ID)
            self.hdr.SetDataLength(Debug_TAP_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TAP.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.TAP.Processing", Debug_TAP_Processing.ID, Debug_TAP_Processing)
#    obj/CodeGenerator/Python/Debug/TAP.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/TAP.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TAP_Status :
    ID = 33123
    SIZE = 239
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 22), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (22, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TAP_Status.MSG_OFFSET + Debug_TAP_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TAP_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TAP_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TAP_Status.MSG_OFFSET + Debug_TAP_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TAP_Status.ID)
            self.hdr.SetDataLength(Debug_TAP_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TAP.Status"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(239)
    def GetResponse(self):
        """Message Response to a TAP command sent via Start"""
        count = 239
        if count > len(self.rawBuffer())-(Debug_TAP_Status.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(Debug_TAP_Status.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Debug_TAP_Status.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(239)
    def SetResponse(self, value):
        """Message Response to a TAP command sent via Start"""
        tmp = value.encode('utf-8')
        struct.pack_into('239s', self.rawBuffer(), Debug_TAP_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Response",type="string",units="ASCII",minVal="0",maxVal="255",description="Message Response to a TAP command sent via Start",get=GetResponse,set=SetResponse,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.TAP.Status", Debug_TAP_Status.ID, Debug_TAP_Status)
#    obj/CodeGenerator/Python/Debug/TAP.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/TAP.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_TAP_Result :
    ID = 33126
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    TapCommandStatus = OrderedDict([("OK", 0), ("UNKNOWN_CMD", 1), ("UNKNOWN_ARG", 2), ("UNKNOWN_ERROR", 3), ("TIMEOUT_ERROR", 4)])
    ReverseTapCommandStatus = OrderedDict([(0, "OK"), (1, "UNKNOWN_CMD"), (2, "UNKNOWN_ARG"), (3, "UNKNOWN_ERROR"), (4, "TIMEOUT_ERROR")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 22), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (22, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_TAP_Result.MSG_OFFSET + Debug_TAP_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_TAP_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_TAP_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_TAP_Result.MSG_OFFSET + Debug_TAP_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_TAP_Result.ID)
            self.hdr.SetDataLength(Debug_TAP_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.TAP.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTapCommandStatus(self, enumAsInt=0):
        """Indicates status of TAP command."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_TAP_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_TAP_Result.ReverseTapCommandStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTapCommandStatus(self, value):
        """Indicates status of TAP command."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_TAP_Result.TapCommandStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_TAP_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TapCommandStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Indicates status of TAP command.",get=GetTapCommandStatus,set=SetTapCommandStatus,count=1, bitfieldInfo = [], enum = [TapCommandStatus, ReverseTapCommandStatus])\
    ]

Messaging.Register("Debug.TAP.Result", Debug_TAP_Result.ID, Debug_TAP_Result)
