#    obj/CodeGenerator/Python/Debug/HfpPlugin.py
#    Created 27/07/2023 at 10:10:12 from:
#        Messages = messages/Debug/HfpPlugin.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_HfpPlugin_Get :
    ID = 33361
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 37), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (37, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_HfpPlugin_Get.MSG_OFFSET + Debug_HfpPlugin_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_HfpPlugin_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_HfpPlugin_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_HfpPlugin_Get.MSG_OFFSET + Debug_HfpPlugin_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_HfpPlugin_Get.ID)
            self.hdr.SetDataLength(Debug_HfpPlugin_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.HfpPlugin.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.HfpPlugin.Get", Debug_HfpPlugin_Get.ID, Debug_HfpPlugin_Get)
#    obj/CodeGenerator/Python/Debug/HfpPlugin.py
#    Created 27/07/2023 at 10:10:12 from:
#        Messages = messages/Debug/HfpPlugin.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_HfpPlugin_Status :
    ID = 33363
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    HfpPlugin = OrderedDict([("NoPlugin", 0), ("csr_cvsd_cvc_1mic_handsfree_plugin", 1), ("csr_wbs_cvc_1mic_handsfree_plugin", 2), ("csr_cvsd_cvc_2mic_handsfree_plugin", 3), ("csr_wbs_cvc_2mic_handsfree_plugin", 4), ("csr_cvsd_cvc_1mic_headset_plugin", 5), ("csr_wbs_cvc_1mic_headset_plugin", 6), ("csr_cvsd_cvc_2mic_headset_plugin", 7), ("csr_wbs_cvc_2mic_headset_plugin", 8), ("bose_hfp_scofwd_rx_plugin", 9), ("non_hfp_plugin", 10)])
    ReverseHfpPlugin = OrderedDict([(0, "NoPlugin"), (1, "csr_cvsd_cvc_1mic_handsfree_plugin"), (2, "csr_wbs_cvc_1mic_handsfree_plugin"), (3, "csr_cvsd_cvc_2mic_handsfree_plugin"), (4, "csr_wbs_cvc_2mic_handsfree_plugin"), (5, "csr_cvsd_cvc_1mic_headset_plugin"), (6, "csr_wbs_cvc_1mic_headset_plugin"), (7, "csr_cvsd_cvc_2mic_headset_plugin"), (8, "csr_wbs_cvc_2mic_headset_plugin"), (9, "bose_hfp_scofwd_rx_plugin"), (10, "non_hfp_plugin")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 37), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (37, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_HfpPlugin_Status.MSG_OFFSET + Debug_HfpPlugin_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_HfpPlugin_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_HfpPlugin_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_HfpPlugin_Status.MSG_OFFSET + Debug_HfpPlugin_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_HfpPlugin_Status.ID)
            self.hdr.SetDataLength(Debug_HfpPlugin_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.HfpPlugin.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetControlPluginRunning(self, enumAsInt=0):
        """Specifies which hfp plugin is loaded as the control plugin, if any"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_HfpPlugin_Status.ReverseHfpPlugin.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetRelayPluginRunning(self, enumAsInt=0):
        """Specifies which hfp plugin is loaded as the relay plugin, if any"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_HfpPlugin_Status.ReverseHfpPlugin.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetAudioBusyPlugin(self, enumAsInt=0):
        """Specifies which plugin is saved in the AUDIO_BUSY slot, if any"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_HfpPlugin_Status.ReverseHfpPlugin.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetControlPluginRunning(self, value):
        """Specifies which hfp plugin is loaded as the control plugin, if any"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_HfpPlugin_Status.HfpPlugin.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetRelayPluginRunning(self, value):
        """Specifies which hfp plugin is loaded as the relay plugin, if any"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_HfpPlugin_Status.HfpPlugin.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetAudioBusyPlugin(self, value):
        """Specifies which plugin is saved in the AUDIO_BUSY slot, if any"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_HfpPlugin_Status.HfpPlugin.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_HfpPlugin_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ControlPluginRunning",type="enumeration",units="",minVal="0",maxVal="255",description="Specifies which hfp plugin is loaded as the control plugin, if any",get=GetControlPluginRunning,set=SetControlPluginRunning,count=1, bitfieldInfo = [], enum = [HfpPlugin, ReverseHfpPlugin]),\
        FieldInfo(name="RelayPluginRunning",type="enumeration",units="",minVal="0",maxVal="255",description="Specifies which hfp plugin is loaded as the relay plugin, if any",get=GetRelayPluginRunning,set=SetRelayPluginRunning,count=1, bitfieldInfo = [], enum = [HfpPlugin, ReverseHfpPlugin]),\
        FieldInfo(name="AudioBusyPlugin",type="enumeration",units="",minVal="0",maxVal="255",description="Specifies which plugin is saved in the AUDIO_BUSY slot, if any",get=GetAudioBusyPlugin,set=SetAudioBusyPlugin,count=1, bitfieldInfo = [], enum = [HfpPlugin, ReverseHfpPlugin])\
    ]

Messaging.Register("Debug.HfpPlugin.Status", Debug_HfpPlugin_Status.ID, Debug_HfpPlugin_Status)
