#    obj/CodeGenerator/Python/Debug/Tones.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/Tones.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Tones_Get :
    ID = 33105
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 21), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (21, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Tones_Get.MSG_OFFSET + Debug_Tones_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Tones_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Tones_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Tones_Get.MSG_OFFSET + Debug_Tones_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Tones_Get.ID)
            self.hdr.SetDataLength(Debug_Tones_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Tones.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.Tones.Get", Debug_Tones_Get.ID, Debug_Tones_Get)
#    obj/CodeGenerator/Python/Debug/Tones.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/Tones.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Tones_SetGet :
    ID = 33106
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ToneTestMode = OrderedDict([("StandbyMode", 0), ("IntegratedMode", 1), ("TonesDisableMode", 2), ("Reserved2", 3), ("Reserved3", 4), ("Reserved4", 5), ("Reserved5", 6), ("Reserved6", 7)])
    ReverseToneTestMode = OrderedDict([(0, "StandbyMode"), (1, "IntegratedMode"), (2, "TonesDisableMode"), (3, "Reserved2"), (4, "Reserved3"), (5, "Reserved4"), (6, "Reserved5"), (7, "Reserved6")])
    SystemEventMode = OrderedDict([("MappedMode", 0), ("RawMode", 1), ("Reserved1", 2), ("Reserved2", 3), ("Reserved3", 4), ("Reserved4", 5), ("Reserved5", 6), ("Reserved6", 7)])
    ReverseSystemEventMode = OrderedDict([(0, "MappedMode"), (1, "RawMode"), (2, "Reserved1"), (3, "Reserved2"), (4, "Reserved3"), (5, "Reserved4"), (6, "Reserved5"), (7, "Reserved6")])
    UeCommonBudPhysicalStatus = OrderedDict([("UE_PS_NOT_AVAILABLE", 0), ("UE_PS_DONT_CARE", 1), ("UE_IN_CASE", 2), ("UE_ON_BODY", 3), ("UE_ON_TABLE", 4), ("UE_IN_HAND", 5), ("UE_PRESUMED_TRANSITION", 6), ("UE_PRESUMED_INEAR", 7)])
    ReverseUeCommonBudPhysicalStatus = OrderedDict([(0, "UE_PS_NOT_AVAILABLE"), (1, "UE_PS_DONT_CARE"), (2, "UE_IN_CASE"), (3, "UE_ON_BODY"), (4, "UE_ON_TABLE"), (5, "UE_IN_HAND"), (6, "UE_PRESUMED_TRANSITION"), (7, "UE_PRESUMED_INEAR")])
    SystemEvent = OrderedDict([("EVT_RESERVED", 0), ("EVT_POWERON", 1), ("EVT_POWERON_PANIC", 2), ("EVT_POWEROFF", 3), ("EVT_MICROPHONE_MUTE", 4), ("EVT_MICROPHONE_UNMUTE", 5), ("EVT_CALL_CONNECTED", 6), ("EVT_CALL_ENDCALL", 7), ("EVT_CALL_ANSWERED", 8), ("EVT_THREE_WAY_CALL_ACCEPTED", 9), ("EVT_THREE_WAY_CALL_IGNORED", 10), ("EVT_ENTER_DISCOVERABLE", 11), ("EVT_PRIMARY_DEVICE_CONNECTED", 12), ("EVT_SECONDARY_DEVICE_CONNECTED", 13), ("EVT_PRIMARY_DEVICE_DISCONNECTED", 14), ("EVT_SECONDARY_DEVICE_DISCONNECTED", 15), ("EVT_PRIMARY_DEVICE_LINKLOSS", 16), ("EVT_SECONDARY_DEVICE_LINKLOSS", 17), ("EVT_FAIL_TO_CONNECT_ANY_DEVICE", 18), ("EVT_USER_OPERATION_NOT_AVAILABLE", 19), ("EVT_OOB_BOSE_WELCOME", 20), ("EVT_OOB_SETUP_COMPLETE", 21), ("EVT_START_ALEXA_VPA", 22), ("EVT_START_GOOGLE_VPA", 23), ("EVT_GOOGLE_VPA_MIC_CLOSE", 24), ("EVT_GOOGLE_VPA_DISMISS_QUERY", 25), ("EVT_VOLUME_MAX_INDICATION", 26), ("EVT_VOLUME_MIN_INDICATION", 27), ("EVT_BATTERY_lOW", 28), ("EVT_CHARGER_CONNECTED", 29), ("EVT_CHARGER_DISCONNECTED", 30), ("EVT_INDICATE_CONNECTING_NO_TTS", 31), ("EVT_SYSTEM_AUDIO_MSG", 32), ("EVT_UE_VOLUME_UP", 33), ("EVT_USB_ATTACHED", 34), ("EVT_SYSTEM_RINGTONE", 35)])
    ReverseSystemEvent = OrderedDict([(0, "EVT_RESERVED"), (1, "EVT_POWERON"), (2, "EVT_POWERON_PANIC"), (3, "EVT_POWEROFF"), (4, "EVT_MICROPHONE_MUTE"), (5, "EVT_MICROPHONE_UNMUTE"), (6, "EVT_CALL_CONNECTED"), (7, "EVT_CALL_ENDCALL"), (8, "EVT_CALL_ANSWERED"), (9, "EVT_THREE_WAY_CALL_ACCEPTED"), (10, "EVT_THREE_WAY_CALL_IGNORED"), (11, "EVT_ENTER_DISCOVERABLE"), (12, "EVT_PRIMARY_DEVICE_CONNECTED"), (13, "EVT_SECONDARY_DEVICE_CONNECTED"), (14, "EVT_PRIMARY_DEVICE_DISCONNECTED"), (15, "EVT_SECONDARY_DEVICE_DISCONNECTED"), (16, "EVT_PRIMARY_DEVICE_LINKLOSS"), (17, "EVT_SECONDARY_DEVICE_LINKLOSS"), (18, "EVT_FAIL_TO_CONNECT_ANY_DEVICE"), (19, "EVT_USER_OPERATION_NOT_AVAILABLE"), (20, "EVT_OOB_BOSE_WELCOME"), (21, "EVT_OOB_SETUP_COMPLETE"), (22, "EVT_START_ALEXA_VPA"), (23, "EVT_START_GOOGLE_VPA"), (24, "EVT_GOOGLE_VPA_MIC_CLOSE"), (25, "EVT_GOOGLE_VPA_DISMISS_QUERY"), (26, "EVT_VOLUME_MAX_INDICATION"), (27, "EVT_VOLUME_MIN_INDICATION"), (28, "EVT_BATTERY_lOW"), (29, "EVT_CHARGER_CONNECTED"), (30, "EVT_CHARGER_DISCONNECTED"), (31, "EVT_INDICATE_CONNECTING_NO_TTS"), (32, "EVT_SYSTEM_AUDIO_MSG"), (33, "EVT_UE_VOLUME_UP"), (34, "EVT_USB_ATTACHED"), (35, "EVT_SYSTEM_RINGTONE")])
    BudsRole = OrderedDict([("UE_ROLE_UNKNOWN", 0), ("UE_ROLE_MASTER", 1), ("UE_ROLE_PUPPET", 2)])
    ReverseBudsRole = OrderedDict([(0, "UE_ROLE_UNKNOWN"), (1, "UE_ROLE_MASTER"), (2, "UE_ROLE_PUPPET")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 21), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (21, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Tones_SetGet.MSG_OFFSET + Debug_Tones_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Tones_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Tones_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Tones_SetGet.MSG_OFFSET + Debug_Tones_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Tones_SetGet.ID)
            self.hdr.SetDataLength(Debug_Tones_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Tones.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTestMode(self):
        """Test mode of Tones Function"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetToneModuleTestMode(self, enumAsInt=0):
        """Tone module test mode."""
        value = (self.GetTestMode() >> 0) & 0xf
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseToneTestMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSystemEventMode(self, enumAsInt=0):
        """System event mode."""
        value = (self.GetTestMode() >> 4) & 0xf
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseSystemEventMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetSystemEvent(self, enumAsInt=0):
        """SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseSystemEvent.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetMasterBudPhyStatus(self, enumAsInt=0):
        """Optional. Location of Master earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseUeCommonBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetPuppetBudPhyStatus(self, enumAsInt=0):
        """Optional. Location of Puppet earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseUeCommonBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetBudsRole(self, enumAsInt=0):
        """Optional. Device Role, Master or Puppet. Do not set or set to UE_ROLE_UNKNOWN for Non-Earbud products."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 5)[0]
        if not enumAsInt:
            value = Debug_Tones_SetGet.ReverseBudsRole.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTestMode(self, value):
        """Test mode of Tones Function"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetToneModuleTestMode(self, value):
        """Tone module test mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.ToneTestMode.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetTestMode((self.GetTestMode() & ~(0xf << 0)) | ((tmp & 0xf) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSystemEventMode(self, value):
        """System event mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.SystemEventMode.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetTestMode((self.GetTestMode() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetSystemEvent(self, value):
        """SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.SystemEvent.get(value, defaultValue)
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetMasterBudPhyStatus(self, value):
        """Optional. Location of Master earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.UeCommonBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetPuppetBudPhyStatus(self, value):
        """Optional. Location of Puppet earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.UeCommonBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetBudsRole(self, value):
        """Optional. Device Role, Master or Puppet. Do not set or set to UE_ROLE_UNKNOWN for Non-Earbud products."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_SetGet.BudsRole.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_SetGet.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TestMode",type="int",units="",minVal="0",maxVal="255",description="Test mode of Tones Function",get=GetTestMode,set=SetTestMode,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ToneModuleTestMode",type="enumeration",units="",minVal="0",maxVal="15",description="Tone module test mode.",get=GetToneModuleTestMode,set=SetToneModuleTestMode, enum = [ToneTestMode, ReverseToneTestMode]),\
            BitFieldInfo(name="SystemEventMode",type="enumeration",units="",minVal="0",maxVal="15",description="System event mode.",get=GetSystemEventMode,set=SetSystemEventMode, enum = [SystemEventMode, ReverseSystemEventMode])], enum = []),\
        FieldInfo(name="SystemEvent",type="enumeration",units="",minVal="0",maxVal="65535",description="SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event.",get=GetSystemEvent,set=SetSystemEvent,count=1, bitfieldInfo = [], enum = [SystemEvent, ReverseSystemEvent]),\
        FieldInfo(name="MasterBudPhyStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Optional. Location of Master earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products.",get=GetMasterBudPhyStatus,set=SetMasterBudPhyStatus,count=1, bitfieldInfo = [], enum = [UeCommonBudPhysicalStatus, ReverseUeCommonBudPhysicalStatus]),\
        FieldInfo(name="PuppetBudPhyStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Optional. Location of Puppet earbud. Do not set or set to UE_PS_NOT_AVAILABLE for Non-Earbud products.",get=GetPuppetBudPhyStatus,set=SetPuppetBudPhyStatus,count=1, bitfieldInfo = [], enum = [UeCommonBudPhysicalStatus, ReverseUeCommonBudPhysicalStatus]),\
        FieldInfo(name="BudsRole",type="enumeration",units="",minVal="0",maxVal="255",description="Optional. Device Role, Master or Puppet. Do not set or set to UE_ROLE_UNKNOWN for Non-Earbud products.",get=GetBudsRole,set=SetBudsRole,count=1, bitfieldInfo = [], enum = [BudsRole, ReverseBudsRole])\
    ]

Messaging.Register("Debug.Tones.SetGet", Debug_Tones_SetGet.ID, Debug_Tones_SetGet)
#    obj/CodeGenerator/Python/Debug/Tones.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/Tones.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Tones_Start :
    ID = 33109
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 21), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (21, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Tones_Start.MSG_OFFSET + Debug_Tones_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Tones_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Tones_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Tones_Start.MSG_OFFSET + Debug_Tones_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Tones_Start.ID)
            self.hdr.SetDataLength(Debug_Tones_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Tones.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetToneID(self):
        """Tone ID to play."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Getvolume(self):
        """Tone volume"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetCanBeQueued(self):
        """1 == tone can be queued, 0 == tone cannot be queued."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetToneID(self, value):
        """Tone ID to play."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Setvolume(self, value):
        """Tone volume"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetCanBeQueued(self, value):
        """1 == tone can be queued, 0 == tone cannot be queued."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Start.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ToneID",type="int",units="",minVal="0",maxVal="255",description="Tone ID to play.",get=GetToneID,set=SetToneID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="volume",type="int",units="",minVal="0",maxVal="255",description="Tone volume",get=Getvolume,set=Setvolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CanBeQueued",type="int",units="",minVal="0",maxVal="255",description="1 == tone can be queued, 0 == tone cannot be queued.",get=GetCanBeQueued,set=SetCanBeQueued,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Tones.Start", Debug_Tones_Start.ID, Debug_Tones_Start)
#    obj/CodeGenerator/Python/Debug/Tones.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/Tones.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Tones_Result :
    ID = 33110
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 21), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (21, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Tones_Result.MSG_OFFSET + Debug_Tones_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Tones_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Tones_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Tones_Result.MSG_OFFSET + Debug_Tones_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Tones_Result.ID)
            self.hdr.SetDataLength(Debug_Tones_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Tones.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetToneID(self):
        """Tone ID played."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetVolume(self):
        """volume of the played tone"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Result.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetToneID(self, value):
        """Tone ID played."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetVolume(self, value):
        """volume of the played tone"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Result.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ToneID",type="int",units="",minVal="0",maxVal="255",description="Tone ID played.",get=GetToneID,set=SetToneID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Volume",type="int",units="",minVal="0",maxVal="255",description="volume of the played tone",get=GetVolume,set=SetVolume,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Tones.Result", Debug_Tones_Result.ID, Debug_Tones_Result)
#    obj/CodeGenerator/Python/Debug/Tones.py
#    Created 27/07/2023 at 10:10:19 from:
#        Messages = messages/Debug/Tones.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Tones_Status :
    ID = 33107
    SIZE = 45
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SystemEvent = OrderedDict([("EVT_RESERVED", 0), ("EVT_POWERON", 1), ("EVT_POWERON_PANIC", 2), ("EVT_POWEROFF", 3), ("EVT_MICROPHONE_MUTE", 4), ("EVT_MICROPHONE_UNMUTE", 5), ("EVT_CALL_CONNECTED", 6), ("EVT_CALL_ENDCALL", 7), ("EVT_CALL_ANSWERED", 8), ("EVT_THREE_WAY_CALL_ACCEPTED", 9), ("EVT_THREE_WAY_CALL_IGNORED", 10), ("EVT_ENTER_DISCOVERABLE", 11), ("EVT_PRIMARY_DEVICE_CONNECTED", 12), ("EVT_SECONDARY_DEVICE_CONNECTED", 13), ("EVT_PRIMARY_DEVICE_DISCONNECTED", 14), ("EVT_SECONDARY_DEVICE_DISCONNECTED", 15), ("EVT_PRIMARY_DEVICE_LINKLOSS", 16), ("EVT_SECONDARY_DEVICE_LINKLOSS", 17), ("EVT_FAIL_TO_CONNECT_ANY_DEVICE", 18), ("EVT_USER_OPERATION_NOT_AVAILABLE", 19), ("EVT_OOB_BOSE_WELCOME", 20), ("EVT_OOB_SETUP_COMPLETE", 21), ("EVT_START_ALEXA_VPA", 22), ("EVT_START_GOOGLE_VPA", 23), ("EVT_GOOGLE_VPA_MIC_CLOSE", 24), ("EVT_GOOGLE_VPA_DISMISS_QUERY", 25), ("EVT_VOLUME_MAX_INDICATION", 26), ("EVT_VOLUME_MIN_INDICATION", 27), ("EVT_BATTERY_lOW", 28), ("EVT_CHARGER_CONNECTED", 29), ("EVT_CHARGER_DISCONNECTED", 30), ("EVT_INDICATE_CONNECTING_NO_TTS", 31), ("EVT_SYSTEM_AUDIO_MSG", 32), ("EVT_UE_VOLUME_UP", 33), ("EVT_USB_ATTACHED", 34), ("EVT_SYSTEM_RINGTONE", 35)])
    ReverseSystemEvent = OrderedDict([(0, "EVT_RESERVED"), (1, "EVT_POWERON"), (2, "EVT_POWERON_PANIC"), (3, "EVT_POWEROFF"), (4, "EVT_MICROPHONE_MUTE"), (5, "EVT_MICROPHONE_UNMUTE"), (6, "EVT_CALL_CONNECTED"), (7, "EVT_CALL_ENDCALL"), (8, "EVT_CALL_ANSWERED"), (9, "EVT_THREE_WAY_CALL_ACCEPTED"), (10, "EVT_THREE_WAY_CALL_IGNORED"), (11, "EVT_ENTER_DISCOVERABLE"), (12, "EVT_PRIMARY_DEVICE_CONNECTED"), (13, "EVT_SECONDARY_DEVICE_CONNECTED"), (14, "EVT_PRIMARY_DEVICE_DISCONNECTED"), (15, "EVT_SECONDARY_DEVICE_DISCONNECTED"), (16, "EVT_PRIMARY_DEVICE_LINKLOSS"), (17, "EVT_SECONDARY_DEVICE_LINKLOSS"), (18, "EVT_FAIL_TO_CONNECT_ANY_DEVICE"), (19, "EVT_USER_OPERATION_NOT_AVAILABLE"), (20, "EVT_OOB_BOSE_WELCOME"), (21, "EVT_OOB_SETUP_COMPLETE"), (22, "EVT_START_ALEXA_VPA"), (23, "EVT_START_GOOGLE_VPA"), (24, "EVT_GOOGLE_VPA_MIC_CLOSE"), (25, "EVT_GOOGLE_VPA_DISMISS_QUERY"), (26, "EVT_VOLUME_MAX_INDICATION"), (27, "EVT_VOLUME_MIN_INDICATION"), (28, "EVT_BATTERY_lOW"), (29, "EVT_CHARGER_CONNECTED"), (30, "EVT_CHARGER_DISCONNECTED"), (31, "EVT_INDICATE_CONNECTING_NO_TTS"), (32, "EVT_SYSTEM_AUDIO_MSG"), (33, "EVT_UE_VOLUME_UP"), (34, "EVT_USB_ATTACHED"), (35, "EVT_SYSTEM_RINGTONE")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 21), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (21, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Tones_Status.MSG_OFFSET + Debug_Tones_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Tones_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Tones_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Tones_Status.MSG_OFFSET + Debug_Tones_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Tones_Status.ID)
            self.hdr.SetDataLength(Debug_Tones_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Tones.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetSystemEvent(self, enumAsInt=0):
        """SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Tones_Status.ReverseSystemEvent.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetToneID(self):
        """Last Tone ID Played."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetToneInfo(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetVolume(self):
        """volume of last played tone"""
        value = (self.GetToneInfo() >> 0) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Reserved"""
        value = (self.GetToneInfo() >> 6) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetCanBeQueued(self):
        """1 == tone can be queued, 0 == tone cannot be queued."""
        value = (self.GetToneInfo() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetMaxToneVolume(self):
        """Max supported tone volume of device."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(40)
    def GetBitfieldOfSupportedToneID(self, idx):
        """Bit mask of Supported/NotSupported tone ID for the device, it is big endian, with the MSB in byte 1. Bit == 0 -- Tone ID is not supported;  Bit == 1 -- Tone ID is supported"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 5+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetSystemEvent(self, value):
        """SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Tones_Status.SystemEvent.get(value, defaultValue)
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetToneID(self, value):
        """Last Tone ID Played."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetToneInfo(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetVolume(self, value):
        """volume of last played tone"""
        tmp = min(max(value, 0), 63)
        self.SetToneInfo((self.GetToneInfo() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 1)
        self.SetToneInfo((self.GetToneInfo() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetCanBeQueued(self, value):
        """1 == tone can be queued, 0 == tone cannot be queued."""
        tmp = min(max(value, 0), 1)
        self.SetToneInfo((self.GetToneInfo() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetMaxToneVolume(self, value):
        """Max supported tone volume of device."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(40)
    def SetBitfieldOfSupportedToneID(self, value, idx):
        """Bit mask of Supported/NotSupported tone ID for the device, it is big endian, with the MSB in byte 1. Bit == 0 -- Tone ID is not supported;  Bit == 1 -- Tone ID is supported"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Tones_Status.MSG_OFFSET + 5+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SystemEvent",type="enumeration",units="",minVal="0",maxVal="65535",description="SystemEvent to trigger tone. It is BMAP enum SystemEvent when SystemEventMode is 0; otherwise, it is the real index of system event.",get=GetSystemEvent,set=SetSystemEvent,count=1, bitfieldInfo = [], enum = [SystemEvent, ReverseSystemEvent]),\
        FieldInfo(name="ToneID",type="int",units="",minVal="0",maxVal="255",description="Last Tone ID Played.",get=GetToneID,set=SetToneID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ToneInfo",type="int",units="",minVal="0",maxVal="255",description="",get=GetToneInfo,set=SetToneInfo,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Volume",type="int",units="",minVal="0",maxVal="63",description="volume of last played tone",get=GetVolume,set=SetVolume, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="1",description="Reserved",get=GetReserved,set=SetReserved, enum = []),\
            BitFieldInfo(name="CanBeQueued",type="int",units="Boolean",minVal="0",maxVal="1",description="1 == tone can be queued, 0 == tone cannot be queued.",get=GetCanBeQueued,set=SetCanBeQueued, enum = [])], enum = []),\
        FieldInfo(name="MaxToneVolume",type="int",units="",minVal="0",maxVal="255",description="Max supported tone volume of device.",get=GetMaxToneVolume,set=SetMaxToneVolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BitfieldOfSupportedToneID",type="int",units="",minVal="0",maxVal="255",description="Bit mask of Supported/NotSupported tone ID for the device, it is big endian, with the MSB in byte 1. Bit == 0 -- Tone ID is not supported;  Bit == 1 -- Tone ID is supported",get=GetBitfieldOfSupportedToneID,set=SetBitfieldOfSupportedToneID,count=40, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Tones.Status", Debug_Tones_Status.ID, Debug_Tones_Status)
