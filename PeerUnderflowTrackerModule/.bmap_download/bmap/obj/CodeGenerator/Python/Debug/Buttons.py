#    obj/CodeGenerator/Python/Debug/Buttons.py
#    Created 27/07/2023 at 10:10:09 from:
#        Messages = messages/Debug/Buttons.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Buttons_Get :
    ID = 32897
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 8), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (8, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Buttons_Get.MSG_OFFSET + Debug_Buttons_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Buttons_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Buttons_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Buttons_Get.MSG_OFFSET + Debug_Buttons_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Buttons_Get.ID)
            self.hdr.SetDataLength(Debug_Buttons_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Buttons.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.Buttons.Get", Debug_Buttons_Get.ID, Debug_Buttons_Get)
#    obj/CodeGenerator/Python/Debug/Buttons.py
#    Created 27/07/2023 at 10:10:09 from:
#        Messages = messages/Debug/Buttons.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Buttons_SetGet :
    ID = 32898
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    InternalState = OrderedDict([("PowerOff", 0), ("Connecting", 1), ("Discoverable", 2), ("Connected", 3), ("A2DP", 4), ("IncomingCall", 5), ("OutgoingCall", 6), ("ActiveCall", 7), ("Aux", 8), ("ANRonly", 9), ("TestMode", 10), ("ThreewayCallWaiting", 11), ("ThreewayCallOnHold", 12), ("ThreewayMulticall", 13), ("IncomingCallOnHold", 14), ("ActiveCallNoSco", 15), ("LowBattery", 16), ("FactoryReset", 17), ("LanguageSelect", 18), ("ManualConnect", 19), ("DeviceUpdate", 20), ("Reman", 21), ("ShipMode", 22), ("USB", 23), ("ConfigMode", 24), ("ActiveScoNoCall", 25), ("PowerOn", 26), ("Disconnected", 27), ("ShelfMode", 28), ("Hibernate", 29), ("Boot", 30), ("VPA", 31), ("Undefined", 127)])
    ReverseInternalState = OrderedDict([(0, "PowerOff"), (1, "Connecting"), (2, "Discoverable"), (3, "Connected"), (4, "A2DP"), (5, "IncomingCall"), (6, "OutgoingCall"), (7, "ActiveCall"), (8, "Aux"), (9, "ANRonly"), (10, "TestMode"), (11, "ThreewayCallWaiting"), (12, "ThreewayCallOnHold"), (13, "ThreewayMulticall"), (14, "IncomingCallOnHold"), (15, "ActiveCallNoSco"), (16, "LowBattery"), (17, "FactoryReset"), (18, "LanguageSelect"), (19, "ManualConnect"), (20, "DeviceUpdate"), (21, "Reman"), (22, "ShipMode"), (23, "USB"), (24, "ConfigMode"), (25, "ActiveScoNoCall"), (26, "PowerOn"), (27, "Disconnected"), (28, "ShelfMode"), (29, "Hibernate"), (30, "Boot"), (31, "VPA"), (127, "Undefined")])
    ButtonPressType = OrderedDict([("Reserved", 0), ("RisingEdge", 1), ("FallEdge", 2), ("ShortPress", 3), ("SinglePress", 4), ("SinglePressAndHold", 5), ("DoublePress", 6), ("DoublePressAndHold", 7), ("TriplePress", 8), ("LongPress", 9), ("VeryLongPress", 10), ("VeryVeryLongPress", 11), ("VVVLongPress", 12), ("Repeat", 13), ("CaptouchSwipeDown", 14), ("CaptouchSwipeUp", 15), ("CaptouchTap", 16), ("CaptouchTapAndHold", 17), ("CaptouchDoubleTap", 18), ("CaptouchSwipeForward", 19), ("CaptouchSwipeBack", 20), ("CaptouchTapVLongHold", 21), ("CaptouchTapHoldRelease", 22), ("AccelerometerMotion", 23), ("AccelerometerDoubleTap", 24), ("LongPressRelease", 25), ("AccelerometerSingleTap", 26), ("SinglePressAndHoldRelease", 27), ("DoublePressAndHoldRelease", 28), ("VeryLongPressRelease", 29), ("VeryVeryLongPressRelease", 30), ("VVVLongPressRelease", 31), ("CaptouchTripleTap", 32), ("MediumPress", 33), ("Press", 34), ("Release", 35), ("Short press release", 36)])
    ReverseButtonPressType = OrderedDict([(0, "Reserved"), (1, "RisingEdge"), (2, "FallEdge"), (3, "ShortPress"), (4, "SinglePress"), (5, "SinglePressAndHold"), (6, "DoublePress"), (7, "DoublePressAndHold"), (8, "TriplePress"), (9, "LongPress"), (10, "VeryLongPress"), (11, "VeryVeryLongPress"), (12, "VVVLongPress"), (13, "Repeat"), (14, "CaptouchSwipeDown"), (15, "CaptouchSwipeUp"), (16, "CaptouchTap"), (17, "CaptouchTapAndHold"), (18, "CaptouchDoubleTap"), (19, "CaptouchSwipeForward"), (20, "CaptouchSwipeBack"), (21, "CaptouchTapVLongHold"), (22, "CaptouchTapHoldRelease"), (23, "AccelerometerMotion"), (24, "AccelerometerDoubleTap"), (25, "LongPressRelease"), (26, "AccelerometerSingleTap"), (27, "SinglePressAndHoldRelease"), (28, "DoublePressAndHoldRelease"), (29, "VeryLongPressRelease"), (30, "VeryVeryLongPressRelease"), (31, "VVVLongPressRelease"), (32, "CaptouchTripleTap"), (33, "MediumPress"), (34, "Press"), (35, "Release"), (36, "Short press release")])
    ButtonID = OrderedDict([("Power", 1), ("MFB", 2), ("VolumeUp", 4), ("VolumeDown", 8), ("VPA", 16), ("ANR_CNC", 32), ("Captouch", 64)])
    ReverseButtonID = OrderedDict([(1, "Power"), (2, "MFB"), (4, "VolumeUp"), (8, "VolumeDown"), (16, "VPA"), (32, "ANR_CNC"), (64, "Captouch")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 8), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (8, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Buttons_SetGet.MSG_OFFSET + Debug_Buttons_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Buttons_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Buttons_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Buttons_SetGet.MSG_OFFSET + Debug_Buttons_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Buttons_SetGet.ID)
            self.hdr.SetDataLength(Debug_Buttons_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Buttons.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetType(self, enumAsInt=0):
        """Button press type."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Buttons_SetGet.ReverseButtonPressType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetButtons(self, enumAsInt=0):
        """Bitfield of buttons pressed."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_Buttons_SetGet.ReverseButtonID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetButtonGroup(self):
        """0 == earbud Master or non-earbud product; 1 == earbud Puppet"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetButtonDisable(self):
        """1 == Disable button module, button module will not respond to any button commands except sending BMAP status response; 0 == Enable button module."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetInternalState(self):
        """internal state used to process this button"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetInternalStateSource(self):
        """0 = Use device actual internal state; 1 = Use internal state designated in this command"""
        value = (self.GetInternalState() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetInternalStateValue(self, enumAsInt=0):
        """Simulated internal State of Device"""
        value = (self.GetInternalState() >> 1) & 0x7f
        if not enumAsInt:
            value = Debug_Buttons_SetGet.ReverseInternalState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetType(self, value):
        """Button press type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Buttons_SetGet.ButtonPressType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetButtons(self, value):
        """Bitfield of buttons pressed."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Buttons_SetGet.ButtonID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetButtonGroup(self, value):
        """0 == earbud Master or non-earbud product; 1 == earbud Puppet"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetButtonDisable(self, value):
        """1 == Disable button module, button module will not respond to any button commands except sending BMAP status response; 0 == Enable button module."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetInternalState(self, value):
        """internal state used to process this button"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetInternalStateSource(self, value):
        """0 = Use device actual internal state; 1 = Use internal state designated in this command"""
        tmp = min(max(value, 0), 1)
        self.SetInternalState((self.GetInternalState() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetInternalStateValue(self, value):
        """Simulated internal State of Device"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Buttons_SetGet.InternalState.get(value, defaultValue)
        tmp = min(max(value, 0), 127)
        self.SetInternalState((self.GetInternalState() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="enumeration",units="",minVal="0",maxVal="255",description="Button press type.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [ButtonPressType, ReverseButtonPressType]),\
        FieldInfo(name="Buttons",type="enumeration",units="",minVal="0",maxVal="255",description="Bitfield of buttons pressed.",get=GetButtons,set=SetButtons,count=1, bitfieldInfo = [], enum = [ButtonID, ReverseButtonID]),\
        FieldInfo(name="ButtonGroup",type="int",units="",minVal="0",maxVal="255",description="0 == earbud Master or non-earbud product; 1 == earbud Puppet",get=GetButtonGroup,set=SetButtonGroup,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ButtonDisable",type="int",units="",minVal="0",maxVal="255",description="1 == Disable button module, button module will not respond to any button commands except sending BMAP status response; 0 == Enable button module.",get=GetButtonDisable,set=SetButtonDisable,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="InternalState",type="int",units="",minVal="0",maxVal="255",description="internal state used to process this button",get=GetInternalState,set=SetInternalState,count=1, bitfieldInfo = [\
            BitFieldInfo(name="InternalStateSource",type="int",units="",minVal="0",maxVal="1",description="0 = Use device actual internal state; 1 = Use internal state designated in this command",get=GetInternalStateSource,set=SetInternalStateSource, enum = []),\
            BitFieldInfo(name="InternalStateValue",type="enumeration",units="",minVal="0",maxVal="127",description="Simulated internal State of Device",get=GetInternalStateValue,set=SetInternalStateValue, enum = [InternalState, ReverseInternalState])], enum = [])\
    ]

Messaging.Register("Debug.Buttons.SetGet", Debug_Buttons_SetGet.ID, Debug_Buttons_SetGet)
#    obj/CodeGenerator/Python/Debug/Buttons.py
#    Created 27/07/2023 at 10:10:09 from:
#        Messages = messages/Debug/Buttons.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Buttons_Status :
    ID = 32899
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ButtonPressType = OrderedDict([("Reserved", 0), ("RisingEdge", 1), ("FallEdge", 2), ("ShortPress", 3), ("SinglePress", 4), ("SinglePressAndHold", 5), ("DoublePress", 6), ("DoublePressAndHold", 7), ("TriplePress", 8), ("LongPress", 9), ("VeryLongPress", 10), ("VeryVeryLongPress", 11), ("VVVLongPress", 12), ("Repeat", 13), ("CaptouchSwipeDown", 14), ("CaptouchSwipeUp", 15), ("CaptouchTap", 16), ("CaptouchTapAndHold", 17), ("CaptouchDoubleTap", 18), ("CaptouchSwipeForward", 19), ("CaptouchSwipeBack", 20), ("CaptouchTapVLongHold", 21), ("CaptouchTapHoldRelease", 22), ("AccelerometerMotion", 23), ("AccelerometerDoubleTap", 24), ("LongPressRelease", 25), ("AccelerometerSingleTap", 26), ("SinglePressAndHoldRelease", 27), ("DoublePressAndHoldRelease", 28), ("VeryLongPressRelease", 29), ("VeryVeryLongPressRelease", 30), ("VVVLongPressRelease", 31), ("CaptouchTripleTap", 32), ("MediumPress", 33), ("Press", 34), ("Release", 35), ("Short press release", 36)])
    ReverseButtonPressType = OrderedDict([(0, "Reserved"), (1, "RisingEdge"), (2, "FallEdge"), (3, "ShortPress"), (4, "SinglePress"), (5, "SinglePressAndHold"), (6, "DoublePress"), (7, "DoublePressAndHold"), (8, "TriplePress"), (9, "LongPress"), (10, "VeryLongPress"), (11, "VeryVeryLongPress"), (12, "VVVLongPress"), (13, "Repeat"), (14, "CaptouchSwipeDown"), (15, "CaptouchSwipeUp"), (16, "CaptouchTap"), (17, "CaptouchTapAndHold"), (18, "CaptouchDoubleTap"), (19, "CaptouchSwipeForward"), (20, "CaptouchSwipeBack"), (21, "CaptouchTapVLongHold"), (22, "CaptouchTapHoldRelease"), (23, "AccelerometerMotion"), (24, "AccelerometerDoubleTap"), (25, "LongPressRelease"), (26, "AccelerometerSingleTap"), (27, "SinglePressAndHoldRelease"), (28, "DoublePressAndHoldRelease"), (29, "VeryLongPressRelease"), (30, "VeryVeryLongPressRelease"), (31, "VVVLongPressRelease"), (32, "CaptouchTripleTap"), (33, "MediumPress"), (34, "Press"), (35, "Release"), (36, "Short press release")])
    ButtonID = OrderedDict([("Power", 1), ("MFB", 2), ("VolumeUp", 4), ("VolumeDown", 8), ("VPA", 16), ("ANR_CNC", 32), ("Captouch", 64)])
    ReverseButtonID = OrderedDict([(1, "Power"), (2, "MFB"), (4, "VolumeUp"), (8, "VolumeDown"), (16, "VPA"), (32, "ANR_CNC"), (64, "Captouch")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Buttons_Status.MSG_OFFSET + Debug_Buttons_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Buttons_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Buttons_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Buttons_Status.MSG_OFFSET + Debug_Buttons_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Buttons_Status.ID)
            self.hdr.SetDataLength(Debug_Buttons_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Buttons.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetType(self, enumAsInt=0):
        """Button press type."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Buttons_Status.ReverseButtonPressType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetButtons(self, enumAsInt=0):
        """Bitfield of buttons pressed."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_Buttons_Status.ReverseButtonID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetButtonGroup(self):
        """0 == earbud Master or non-earbud product; 1 == earbud Puppet"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetButtonDisabled(self):
        """1 == Button module disabled, button module does not respond to any button commands except sending BMAP status response; 0 == Button module enabled."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetButtonProcessStatus(self):
        """0 == Button Ignored; 1 == Button Processed"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def GetSupportedButtonIDs(self):
        """BitMask of the supported ButtonID in device"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetType(self, value):
        """Button press type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Buttons_Status.ButtonPressType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetButtons(self, value):
        """Bitfield of buttons pressed."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Buttons_Status.ButtonID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetButtonGroup(self, value):
        """0 == earbud Master or non-earbud product; 1 == earbud Puppet"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetButtonDisabled(self, value):
        """1 == Button module disabled, button module does not respond to any button commands except sending BMAP status response; 0 == Button module enabled."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetButtonProcessStatus(self, value):
        """0 == Button Ignored; 1 == Button Processed"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def SetSupportedButtonIDs(self, value):
        """BitMask of the supported ButtonID in device"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Buttons_Status.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="enumeration",units="",minVal="0",maxVal="255",description="Button press type.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [ButtonPressType, ReverseButtonPressType]),\
        FieldInfo(name="Buttons",type="enumeration",units="",minVal="0",maxVal="255",description="Bitfield of buttons pressed.",get=GetButtons,set=SetButtons,count=1, bitfieldInfo = [], enum = [ButtonID, ReverseButtonID]),\
        FieldInfo(name="ButtonGroup",type="int",units="",minVal="0",maxVal="255",description="0 == earbud Master or non-earbud product; 1 == earbud Puppet",get=GetButtonGroup,set=SetButtonGroup,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ButtonDisabled",type="int",units="",minVal="0",maxVal="255",description="1 == Button module disabled, button module does not respond to any button commands except sending BMAP status response; 0 == Button module enabled.",get=GetButtonDisabled,set=SetButtonDisabled,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ButtonProcessStatus",type="int",units="",minVal="0",maxVal="255",description="0 == Button Ignored; 1 == Button Processed",get=GetButtonProcessStatus,set=SetButtonProcessStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SupportedButtonIDs",type="int",units="",minVal="0",maxVal="65535",description="BitMask of the supported ButtonID in device",get=GetSupportedButtonIDs,set=SetSupportedButtonIDs,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Buttons.Status", Debug_Buttons_Status.ID, Debug_Buttons_Status)
