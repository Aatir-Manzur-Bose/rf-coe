#    obj/CodeGenerator/Python/Debug/BMAPReroute.py
#    Created 27/07/2023 at 10:10:07 from:
#        Messages = messages/Debug/BMAPReroute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BMAPReroute_SetGet :
    ID = 33522
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BMAPRerouteTargetType = OrderedDict([("SpecifiedMacAddress", 0), ("SpecifiedConnID", 1), ("USB", 2), ("Master", 3), ("Puppet", 4), ("ChargingCase", 5), ("All", 255)])
    ReverseBMAPRerouteTargetType = OrderedDict([(0, "SpecifiedMacAddress"), (1, "SpecifiedConnID"), (2, "USB"), (3, "Master"), (4, "Puppet"), (5, "ChargingCase"), (255, "All")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 47), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (47, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BMAPReroute_SetGet.MSG_OFFSET + Debug_BMAPReroute_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BMAPReroute_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BMAPReroute_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BMAPReroute_SetGet.MSG_OFFSET + Debug_BMAPReroute_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BMAPReroute_SetGet.ID)
            self.hdr.SetDataLength(Debug_BMAPReroute_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BMAPReroute.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTargetType(self, enumAsInt=0):
        """Type of target the BMAP command is being rerouted to."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_BMAPReroute_SetGet.ReverseBMAPRerouteTargetType.get(value, value)
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetFBlock(self):
        """FBlock"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetFunctionID(self):
        """FunctionID"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetOperator(self):
        """Operator"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(6)
    def GetTargetIdentifier(self, idx):
        """Identifier or address of a specific reroute target. Required to specify this if the TargetType is SpecifiedBtAddress or SpecifiedConnID."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTargetType(self, value):
        """Type of target the BMAP command is being rerouted to."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_BMAPReroute_SetGet.BMAPRerouteTargetType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetFBlock(self, value):
        """FBlock"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetFunctionID(self, value):
        """FunctionID"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetOperator(self, value):
        """Operator"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(6)
    def SetTargetIdentifier(self, value, idx):
        """Identifier or address of a specific reroute target. Required to specify this if the TargetType is SpecifiedBtAddress or SpecifiedConnID."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_SetGet.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TargetType",type="enumeration",units="",minVal="0",maxVal="255",description="Type of target the BMAP command is being rerouted to.",get=GetTargetType,set=SetTargetType,count=1, bitfieldInfo = [], enum = [BMAPRerouteTargetType, ReverseBMAPRerouteTargetType]),\
        FieldInfo(name="FBlock",type="int",units="HEX",minVal="0",maxVal="255",description="FBlock",get=GetFBlock,set=SetFBlock,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FunctionID",type="int",units="HEX",minVal="0",maxVal="255",description="FunctionID",get=GetFunctionID,set=SetFunctionID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Operator",type="int",units="HEX",minVal="0",maxVal="255",description="Operator",get=GetOperator,set=SetOperator,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetIdentifier",type="int",units="HEX",minVal="0",maxVal="255",description="Identifier or address of a specific reroute target. Required to specify this if the TargetType is SpecifiedBtAddress or SpecifiedConnID.",get=GetTargetIdentifier,set=SetTargetIdentifier,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BMAPReroute.SetGet", Debug_BMAPReroute_SetGet.ID, Debug_BMAPReroute_SetGet)
#    obj/CodeGenerator/Python/Debug/BMAPReroute.py
#    Created 27/07/2023 at 10:10:07 from:
#        Messages = messages/Debug/BMAPReroute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BMAPReroute_Status :
    ID = 33523
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BMAPRerouteTargetType = OrderedDict([("SpecifiedMacAddress", 0), ("SpecifiedConnID", 1), ("USB", 2), ("Master", 3), ("Puppet", 4), ("ChargingCase", 5), ("All", 255)])
    ReverseBMAPRerouteTargetType = OrderedDict([(0, "SpecifiedMacAddress"), (1, "SpecifiedConnID"), (2, "USB"), (3, "Master"), (4, "Puppet"), (5, "ChargingCase"), (255, "All")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 47), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (47, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BMAPReroute_Status.MSG_OFFSET + Debug_BMAPReroute_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BMAPReroute_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BMAPReroute_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BMAPReroute_Status.MSG_OFFSET + Debug_BMAPReroute_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BMAPReroute_Status.ID)
            self.hdr.SetDataLength(Debug_BMAPReroute_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BMAPReroute.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTargetType(self, enumAsInt=0):
        """Type of target the BMAP command is being rerouted to."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_BMAPReroute_Status.ReverseBMAPRerouteTargetType.get(value, value)
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetFBlock(self):
        """FBlock"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetFunctionID(self):
        """FunctionID"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetOperator(self):
        """Operator"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(6)
    def GetTargetIdentifier(self, idx):
        """Identifier or address of the reroute target."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTargetType(self, value):
        """Type of target the BMAP command is being rerouted to."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_BMAPReroute_Status.BMAPRerouteTargetType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetFBlock(self, value):
        """FBlock"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetFunctionID(self, value):
        """FunctionID"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetOperator(self, value):
        """Operator"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(6)
    def SetTargetIdentifier(self, value, idx):
        """Identifier or address of the reroute target."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BMAPReroute_Status.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TargetType",type="enumeration",units="",minVal="0",maxVal="255",description="Type of target the BMAP command is being rerouted to.",get=GetTargetType,set=SetTargetType,count=1, bitfieldInfo = [], enum = [BMAPRerouteTargetType, ReverseBMAPRerouteTargetType]),\
        FieldInfo(name="FBlock",type="int",units="HEX",minVal="0",maxVal="255",description="FBlock",get=GetFBlock,set=SetFBlock,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FunctionID",type="int",units="HEX",minVal="0",maxVal="255",description="FunctionID",get=GetFunctionID,set=SetFunctionID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Operator",type="int",units="HEX",minVal="0",maxVal="255",description="Operator",get=GetOperator,set=SetOperator,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetIdentifier",type="int",units="HEX",minVal="0",maxVal="255",description="Identifier or address of the reroute target.",get=GetTargetIdentifier,set=SetTargetIdentifier,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BMAPReroute.Status", Debug_BMAPReroute_Status.ID, Debug_BMAPReroute_Status)
