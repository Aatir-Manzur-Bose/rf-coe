#    obj/CodeGenerator/Python/Debug/LinkQuality.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LinkQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LinkQuality_SetGet :
    ID = 32818
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 3), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (3, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LinkQuality_SetGet.MSG_OFFSET + Debug_LinkQuality_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LinkQuality_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LinkQuality_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LinkQuality_SetGet.MSG_OFFSET + Debug_LinkQuality_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LinkQuality_SetGet.ID)
            self.hdr.SetDataLength(Debug_LinkQuality_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LinkQuality.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMacAddress(self, idx):
        """MAC Address of Source Device (chooses which radio link to query)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_SetGet.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetNotificationTimerInterval(self):
        """Notification Timer Interval (in ms, 1sec is default setting)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_LinkQuality_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMacAddress(self, value, idx):
        """MAC Address of Source Device (chooses which radio link to query)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_SetGet.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetNotificationTimerInterval(self, value):
        """Notification Timer Interval (in ms, 1sec is default setting)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_LinkQuality_SetGet.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MacAddress",type="int",units="",minVal="0",maxVal="255",description="MAC Address of Source Device (chooses which radio link to query)",get=GetMacAddress,set=SetMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NotificationTimerInterval",type="int",units="ms",minVal="0",maxVal="65535",description="Notification Timer Interval (in ms, 1sec is default setting)",get=GetNotificationTimerInterval,set=SetNotificationTimerInterval,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.LinkQuality.SetGet", Debug_LinkQuality_SetGet.ID, Debug_LinkQuality_SetGet)
#    obj/CodeGenerator/Python/Debug/LinkQuality.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LinkQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LinkQuality_Status :
    ID = 32819
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LinkQuality_Status.MSG_OFFSET + Debug_LinkQuality_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LinkQuality_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LinkQuality_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LinkQuality_Status.MSG_OFFSET + Debug_LinkQuality_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LinkQuality_Status.ID)
            self.hdr.SetDataLength(Debug_LinkQuality_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LinkQuality.Status"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetValidity(self):
        """Link Quality Validity. (0 - invalid, 1 - valid)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('BER')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityValue(self):
        """Normalized Link Quality Value (i.e. bit error rate)."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def GetTimestamp(self):
        """Timestamp (ms)"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Bits')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityRawBits(self):
        """Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Raw')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityRawValue(self):
        """Raw Link Quality Value"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetValidity(self, value):
        """Link Quality Validity. (0 - invalid, 1 - valid)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('BER')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityValue(self, value):
        """Normalized Link Quality Value (i.e. bit error rate)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Timestamp (ms)"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('Bits')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityRawBits(self, value):
        """Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('Raw')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityRawValue(self, value):
        """Raw Link Quality Value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Status.MSG_OFFSET + 7, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Validity",type="int",units="Boolean",minVal="0",maxVal="255",description="Link Quality Validity. (0 - invalid, 1 - valid)",get=GetValidity,set=SetValidity,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityValue",type="int",units="BER",minVal="0",maxVal="255",description="Normalized Link Quality Value (i.e. bit error rate).",get=GetLinkQualityValue,set=SetLinkQualityValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp",type="int",units="ms",minVal="0",maxVal="4294967295",description="Timestamp (ms)",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityRawBits",type="int",units="Bits",minVal="0",maxVal="255",description="Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)",get=GetLinkQualityRawBits,set=SetLinkQualityRawBits,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityRawValue",type="int",units="Raw",minVal="0",maxVal="255",description="Raw Link Quality Value",get=GetLinkQualityRawValue,set=SetLinkQualityRawValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.LinkQuality.Status", Debug_LinkQuality_Status.ID, Debug_LinkQuality_Status)
#    obj/CodeGenerator/Python/Debug/LinkQuality.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LinkQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LinkQuality_Result :
    ID = 32822
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 3), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (3, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LinkQuality_Result.MSG_OFFSET + Debug_LinkQuality_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LinkQuality_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LinkQuality_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LinkQuality_Result.MSG_OFFSET + Debug_LinkQuality_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LinkQuality_Result.ID)
            self.hdr.SetDataLength(Debug_LinkQuality_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LinkQuality.Result"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetValidity(self):
        """Link Quality Validity. (0 - invalid, 1 - valid)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('BER')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityValue(self):
        """Normalized Link Quality Value (i.e. bit error rate)."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def GetTimestamp(self):
        """Timestamp (ms)"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Bits')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityRawBits(self):
        """Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Raw')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetLinkQualityRawValue(self):
        """Raw Link Quality Value"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetValidity(self, value):
        """Link Quality Validity. (0 - invalid, 1 - valid)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('BER')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityValue(self, value):
        """Normalized Link Quality Value (i.e. bit error rate)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Timestamp (ms)"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 2, tmp)
    
    @msg.units('Bits')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityRawBits(self, value):
        """Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 6, tmp)
    
    @msg.units('Raw')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetLinkQualityRawValue(self, value):
        """Raw Link Quality Value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LinkQuality_Result.MSG_OFFSET + 7, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Validity",type="int",units="Boolean",minVal="0",maxVal="255",description="Link Quality Validity. (0 - invalid, 1 - valid)",get=GetValidity,set=SetValidity,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityValue",type="int",units="BER",minVal="0",maxVal="255",description="Normalized Link Quality Value (i.e. bit error rate).",get=GetLinkQualityValue,set=SetLinkQualityValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp",type="int",units="ms",minVal="0",maxVal="4294967295",description="Timestamp (ms)",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityRawBits",type="int",units="Bits",minVal="0",maxVal="255",description="Link Quality Raw Value resolution (i.e. number of bits, 0 = no value)",get=GetLinkQualityRawBits,set=SetLinkQualityRawBits,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LinkQualityRawValue",type="int",units="Raw",minVal="0",maxVal="255",description="Raw Link Quality Value",get=GetLinkQualityRawValue,set=SetLinkQualityRawValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.LinkQuality.Result", Debug_LinkQuality_Result.ID, Debug_LinkQuality_Result)
