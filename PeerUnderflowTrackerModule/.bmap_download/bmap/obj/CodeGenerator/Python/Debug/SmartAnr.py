#    obj/CodeGenerator/Python/Debug/SmartAnr.py
#    Created 27/07/2023 at 10:10:17 from:
#        Messages = messages/Debug/SmartAnr.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_SmartAnr_Get :
    ID = 33297
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 33), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (33, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_SmartAnr_Get.MSG_OFFSET + Debug_SmartAnr_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_SmartAnr_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_SmartAnr_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_SmartAnr_Get.MSG_OFFSET + Debug_SmartAnr_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_SmartAnr_Get.ID)
            self.hdr.SetDataLength(Debug_SmartAnr_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.SmartAnr.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.SmartAnr.Get", Debug_SmartAnr_Get.ID, Debug_SmartAnr_Get)
#    obj/CodeGenerator/Python/Debug/SmartAnr.py
#    Created 27/07/2023 at 10:10:17 from:
#        Messages = messages/Debug/SmartAnr.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_SmartAnr_Status :
    ID = 33299
    SIZE = 26
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartAnrPowerState = OrderedDict([("Unknown", 0), ("PoweredUp", 1), ("PoweredDown", 2), ("PoweringUp", 3), ("PoweringDown", 4), ("InitialState", 5)])
    ReverseSmartAnrPowerState = OrderedDict([(0, "Unknown"), (1, "PoweredUp"), (2, "PoweredDown"), (3, "PoweringUp"), (4, "PoweringDown"), (5, "InitialState")])
    SmartAnrFirmwareUpdateStatus = OrderedDict([("UpdateInitialState", 0), ("UpdateNotRequired", 1), ("UpdateInProgress", 2), ("UpdateComplete", 3), ("UpdateFailed", 4), ("UpdateUnknownState", 5)])
    ReverseSmartAnrFirmwareUpdateStatus = OrderedDict([(0, "UpdateInitialState"), (1, "UpdateNotRequired"), (2, "UpdateInProgress"), (3, "UpdateComplete"), (4, "UpdateFailed"), (5, "UpdateUnknownState")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 33), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (33, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_SmartAnr_Status.MSG_OFFSET + Debug_SmartAnr_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_SmartAnr_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_SmartAnr_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_SmartAnr_Status.MSG_OFFSET + Debug_SmartAnr_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_SmartAnr_Status.ID)
            self.hdr.SetDataLength(Debug_SmartAnr_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.SmartAnr.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPowerState(self, enumAsInt=0):
        """Status of the Smart ANR subsystem power"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_SmartAnr_Status.ReverseSmartAnrPowerState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetUpdateState(self, enumAsInt=0):
        """Status of the Smart ANR subsystem firmware update"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_SmartAnr_Status.ReverseSmartAnrFirmwareUpdateStatus.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(24)
    def GetVersion(self):
        """SmartANR Firmware Version (UTF-8 String)"""
        count = 24
        if count > len(self.rawBuffer())-(Debug_SmartAnr_Status.MSG_OFFSET + 2):
            count = len(self.rawBuffer())-(Debug_SmartAnr_Status.MSG_OFFSET + 2)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 2)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPowerState(self, value):
        """Status of the Smart ANR subsystem power"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SmartAnr_Status.SmartAnrPowerState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetUpdateState(self, value):
        """Status of the Smart ANR subsystem firmware update"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_SmartAnr_Status.SmartAnrFirmwareUpdateStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(24)
    def SetVersion(self, value):
        """SmartANR Firmware Version (UTF-8 String)"""
        tmp = value.encode('utf-8')
        struct.pack_into('24s', self.rawBuffer(), Debug_SmartAnr_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PowerState",type="enumeration",units="",minVal="0",maxVal="255",description="Status of the Smart ANR subsystem power",get=GetPowerState,set=SetPowerState,count=1, bitfieldInfo = [], enum = [SmartAnrPowerState, ReverseSmartAnrPowerState]),\
        FieldInfo(name="UpdateState",type="enumeration",units="",minVal="0",maxVal="255",description="Status of the Smart ANR subsystem firmware update",get=GetUpdateState,set=SetUpdateState,count=1, bitfieldInfo = [], enum = [SmartAnrFirmwareUpdateStatus, ReverseSmartAnrFirmwareUpdateStatus]),\
        FieldInfo(name="Version",type="string",units="ASCII",minVal="0",maxVal="255",description="SmartANR Firmware Version (UTF-8 String)",get=GetVersion,set=SetVersion,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.SmartAnr.Status", Debug_SmartAnr_Status.ID, Debug_SmartAnr_Status)
