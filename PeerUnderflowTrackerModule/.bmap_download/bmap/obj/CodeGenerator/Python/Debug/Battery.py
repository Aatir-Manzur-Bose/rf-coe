#    obj/CodeGenerator/Python/Debug/Battery.py
#    Created 27/07/2023 at 10:10:05 from:
#        Messages = messages/Debug/Battery.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Battery_Get :
    ID = 32833
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Battery_Get.MSG_OFFSET + Debug_Battery_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Battery_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Battery_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Battery_Get.MSG_OFFSET + Debug_Battery_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Battery_Get.ID)
            self.hdr.SetDataLength(Debug_Battery_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Battery.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.Battery.Get", Debug_Battery_Get.ID, Debug_Battery_Get)
#    obj/CodeGenerator/Python/Debug/Battery.py
#    Created 27/07/2023 at 10:10:05 from:
#        Messages = messages/Debug/Battery.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Battery_SetGet :
    ID = 32834
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 4), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (4, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Battery_SetGet.MSG_OFFSET + Debug_Battery_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Battery_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Battery_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Battery_SetGet.MSG_OFFSET + Debug_Battery_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Battery_SetGet.ID)
            self.hdr.SetDataLength(Debug_Battery_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Battery.SetGet"
    # Accessors
    @msg.units('minutes')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetNotificationTimerInterval(self):
        """NotificationTimerInterval"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Battery_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('minutes')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetNotificationTimerInterval(self, value):
        """NotificationTimerInterval"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Battery_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="NotificationTimerInterval",type="int",units="minutes",minVal="0",maxVal="255",description="NotificationTimerInterval",get=GetNotificationTimerInterval,set=SetNotificationTimerInterval,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Battery.SetGet", Debug_Battery_SetGet.ID, Debug_Battery_SetGet)
#    obj/CodeGenerator/Python/Debug/Battery.py
#    Created 27/07/2023 at 10:10:05 from:
#        Messages = messages/Debug/Battery.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Battery_Status :
    ID = 32835
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ChargerStates = OrderedDict([("Disconnected", 0), ("Disabled", 1), ("Trickle", 2), ("Fast", 3), ("Boost", 4), ("Complete", 5), ("UnknownState", 6)])
    ReverseChargerStates = OrderedDict([(0, "Disconnected"), (1, "Disabled"), (2, "Trickle"), (3, "Fast"), (4, "Boost"), (5, "Complete"), (6, "UnknownState")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Battery_Status.MSG_OFFSET + Debug_Battery_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Battery_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Battery_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Battery_Status.MSG_OFFSET + Debug_Battery_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Battery_Status.ID)
            self.hdr.SetDataLength(Debug_Battery_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Battery.Status"
    # Accessors
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetBatteryVoltage(self):
        """BatteryVoltage"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetChargerState(self, enumAsInt=0):
        """Charger States."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_Battery_Status.ReverseChargerStates.get(value, value)
        return value
    
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetThermistorVoltage(self):
        """ThermistorVoltage"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetBatteryVoltage(self, value):
        """BatteryVoltage"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetChargerState(self, value):
        """Charger States."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Battery_Status.ChargerStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetThermistorVoltage(self, value):
        """ThermistorVoltage"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Battery_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BatteryVoltage",type="int",units="mV",minVal="0",maxVal="65535",description="BatteryVoltage",get=GetBatteryVoltage,set=SetBatteryVoltage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ChargerState",type="enumeration",units="",minVal="0",maxVal="255",description="Charger States.",get=GetChargerState,set=SetChargerState,count=1, bitfieldInfo = [], enum = [ChargerStates, ReverseChargerStates]),\
        FieldInfo(name="ThermistorVoltage",type="int",units="mV",minVal="0",maxVal="65535",description="ThermistorVoltage",get=GetThermistorVoltage,set=SetThermistorVoltage,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Battery.Status", Debug_Battery_Status.ID, Debug_Battery_Status)
