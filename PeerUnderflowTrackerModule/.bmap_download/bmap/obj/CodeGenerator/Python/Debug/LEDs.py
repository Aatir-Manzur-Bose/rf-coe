#    obj/CodeGenerator/Python/Debug/LEDs.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LEDs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LEDs_Get :
    ID = 32913
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    LedGroupId = OrderedDict([("BtDiscoverableLed", 0), ("BtConnectedLed", 1), ("BattLed", 2), ("ErrorLed", 3), ("CallLed", 4), ("AuxLed", 5), ("AnrLed", 6), ("AllBtLeds", 7), ("AllBattLeds", 8), ("AllLeds", 9), ("FaultLed0", 10), ("FaultLed1", 11), ("Bud", 12), ("Case", 13), ("RightBud", 14), ("LeftBud", 15), ("SingleDevice", 16)])
    ReverseLedGroupId = OrderedDict([(0, "BtDiscoverableLed"), (1, "BtConnectedLed"), (2, "BattLed"), (3, "ErrorLed"), (4, "CallLed"), (5, "AuxLed"), (6, "AnrLed"), (7, "AllBtLeds"), (8, "AllBattLeds"), (9, "AllLeds"), (10, "FaultLed0"), (11, "FaultLed1"), (12, "Bud"), (13, "Case"), (14, "RightBud"), (15, "LeftBud"), (16, "SingleDevice")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 9), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (9, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LEDs_Get.MSG_OFFSET + Debug_LEDs_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LEDs_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LEDs_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LEDs_Get.MSG_OFFSET + Debug_LEDs_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LEDs_Get.ID)
            self.hdr.SetDataLength(Debug_LEDs_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LEDs.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLedGroup(self, enumAsInt=0):
        """Optional; If no Led Group is provided, firmware will default to `BUD`"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LEDs_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_LEDs_Get.ReverseLedGroupId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLedGroup(self, value):
        """Optional; If no Led Group is provided, firmware will default to `BUD`"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_LEDs_Get.LedGroupId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LEDs_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LedGroup",type="enumeration",units="",minVal="0",maxVal="255",description="Optional; If no Led Group is provided, firmware will default to `BUD`",get=GetLedGroup,set=SetLedGroup,count=1, bitfieldInfo = [], enum = [LedGroupId, ReverseLedGroupId])\
    ]

Messaging.Register("Debug.LEDs.Get", Debug_LEDs_Get.ID, Debug_LEDs_Get)
#    obj/CodeGenerator/Python/Debug/LEDs.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LEDs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LEDs_SetGet :
    ID = 32914
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    LedGroupId = OrderedDict([("BtDiscoverableLed", 0), ("BtConnectedLed", 1), ("BattLed", 2), ("ErrorLed", 3), ("CallLed", 4), ("AuxLed", 5), ("AnrLed", 6), ("AllBtLeds", 7), ("AllBattLeds", 8), ("AllLeds", 9), ("FaultLed0", 10), ("FaultLed1", 11), ("Bud", 12), ("Case", 13), ("RightBud", 14), ("LeftBud", 15), ("SingleDevice", 16)])
    ReverseLedGroupId = OrderedDict([(0, "BtDiscoverableLed"), (1, "BtConnectedLed"), (2, "BattLed"), (3, "ErrorLed"), (4, "CallLed"), (5, "AuxLed"), (6, "AnrLed"), (7, "AllBtLeds"), (8, "AllBattLeds"), (9, "AllLeds"), (10, "FaultLed0"), (11, "FaultLed1"), (12, "Bud"), (13, "Case"), (14, "RightBud"), (15, "LeftBud"), (16, "SingleDevice")])
    LedPatternId = OrderedDict([("LedOff", 0), ("SolidOn", 1), ("FlashSlowRpt", 2), ("FlashMedRpt", 3), ("FlashFastRpt", 4), ("FlashSuperFastRpt", 5), ("FlashSuperFastRptInvertedPhase", 6), ("BlinkSingle", 7), ("BlinkDouble", 8), ("LongDoublePulse", 9), ("TenSecOn", 10), ("BtDiscov", 11), ("Connecting", 12), ("BlinkPause", 13), ("PowerOnFallback", 14), ("PowerOff", 15), ("ErrorFlash", 16), ("PowerOn", 17), ("ChargingBlink", 18), ("FiveSecOn", 19), ("ThirtySecOn", 20), ("Connected", 21), ("BattCritical", 22), ("Charged", 23), ("LidOpenBattFull", 24), ("LidCloseBattFull", 25), ("LidOpenBattLow", 26), ("LidCloseBattLow", 27), ("Updating", 28), ("ResetComplete", 29), ("BattLow", 30), ("LED1", 31), ("LED2", 32), ("LED3", 33), ("LED4", 34), ("LED5", 35), ("LED6", 36), ("LED7", 37), ("LED8", 38), ("LED9", 39), ("LED10", 40), ("LEDBattFull", 41), ("LEDPDLClear", 42), ("LEDLowPower", 43), ("LEDLowPowerLowCharge", 44), ("LEDWake", 45), ("LEDWakeLowCharge", 46), ("LEDPowerOn", 47), ("LEDPowerOnLowCharge", 48), ("LEDFactoryDefault", 49)])
    ReverseLedPatternId = OrderedDict([(0, "LedOff"), (1, "SolidOn"), (2, "FlashSlowRpt"), (3, "FlashMedRpt"), (4, "FlashFastRpt"), (5, "FlashSuperFastRpt"), (6, "FlashSuperFastRptInvertedPhase"), (7, "BlinkSingle"), (8, "BlinkDouble"), (9, "LongDoublePulse"), (10, "TenSecOn"), (11, "BtDiscov"), (12, "Connecting"), (13, "BlinkPause"), (14, "PowerOnFallback"), (15, "PowerOff"), (16, "ErrorFlash"), (17, "PowerOn"), (18, "ChargingBlink"), (19, "FiveSecOn"), (20, "ThirtySecOn"), (21, "Connected"), (22, "BattCritical"), (23, "Charged"), (24, "LidOpenBattFull"), (25, "LidCloseBattFull"), (26, "LidOpenBattLow"), (27, "LidCloseBattLow"), (28, "Updating"), (29, "ResetComplete"), (30, "BattLow"), (31, "LED1"), (32, "LED2"), (33, "LED3"), (34, "LED4"), (35, "LED5"), (36, "LED6"), (37, "LED7"), (38, "LED8"), (39, "LED9"), (40, "LED10"), (41, "LEDBattFull"), (42, "LEDPDLClear"), (43, "LEDLowPower"), (44, "LEDLowPowerLowCharge"), (45, "LEDWake"), (46, "LEDWakeLowCharge"), (47, "LEDPowerOn"), (48, "LEDPowerOnLowCharge"), (49, "LEDFactoryDefault")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 9), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (9, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LEDs_SetGet.MSG_OFFSET + Debug_LEDs_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LEDs_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LEDs_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LEDs_SetGet.MSG_OFFSET + Debug_LEDs_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LEDs_SetGet.ID)
            self.hdr.SetDataLength(Debug_LEDs_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LEDs.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLedGroup(self, enumAsInt=0):
        """LED group."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LEDs_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_LEDs_SetGet.ReverseLedGroupId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLedPattern(self):
        """LED pattern."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LEDs_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetPatternID(self, enumAsInt=0):
        """Integer identification of pattern"""
        value = (self.GetLedPattern() >> 0) & 0x3f
        if not enumAsInt:
            value = Debug_LEDs_SetGet.ReverseLedPatternId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetPriority(self):
        """Priority of pattern (Ignored for some products)"""
        value = (self.GetLedPattern() >> 6) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLedGroup(self, value):
        """LED group."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_LEDs_SetGet.LedGroupId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LEDs_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLedPattern(self, value):
        """LED pattern."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LEDs_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetPatternID(self, value):
        """Integer identification of pattern"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_LEDs_SetGet.LedPatternId.get(value, defaultValue)
        tmp = min(max(value, 0), 63)
        self.SetLedPattern((self.GetLedPattern() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetPriority(self, value):
        """Priority of pattern (Ignored for some products)"""
        tmp = min(max(value, 0), 3)
        self.SetLedPattern((self.GetLedPattern() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LedGroup",type="enumeration",units="",minVal="0",maxVal="255",description="LED group.",get=GetLedGroup,set=SetLedGroup,count=1, bitfieldInfo = [], enum = [LedGroupId, ReverseLedGroupId]),\
        FieldInfo(name="LedPattern",type="int",units="",minVal="0",maxVal="255",description="LED pattern.",get=GetLedPattern,set=SetLedPattern,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PatternID",type="enumeration",units="",minVal="0",maxVal="63",description="Integer identification of pattern",get=GetPatternID,set=SetPatternID, enum = [LedPatternId, ReverseLedPatternId]),\
            BitFieldInfo(name="Priority",type="int",units="",minVal="0",maxVal="3",description="Priority of pattern (Ignored for some products)",get=GetPriority,set=SetPriority, enum = [])], enum = [])\
    ]

Messaging.Register("Debug.LEDs.SetGet", Debug_LEDs_SetGet.ID, Debug_LEDs_SetGet)
#    obj/CodeGenerator/Python/Debug/LEDs.py
#    Created 27/07/2023 at 10:10:13 from:
#        Messages = messages/Debug/LEDs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_LEDs_Status :
    ID = 32915
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    LedPatternId = OrderedDict([("LedOff", 0), ("SolidOn", 1), ("FlashSlowRpt", 2), ("FlashMedRpt", 3), ("FlashFastRpt", 4), ("FlashSuperFastRpt", 5), ("FlashSuperFastRptInvertedPhase", 6), ("BlinkSingle", 7), ("BlinkDouble", 8), ("LongDoublePulse", 9), ("TenSecOn", 10), ("BtDiscov", 11), ("Connecting", 12), ("BlinkPause", 13), ("PowerOnFallback", 14), ("PowerOff", 15), ("ErrorFlash", 16), ("PowerOn", 17), ("ChargingBlink", 18), ("FiveSecOn", 19), ("ThirtySecOn", 20), ("Connected", 21), ("BattCritical", 22), ("Charged", 23), ("LidOpenBattFull", 24), ("LidCloseBattFull", 25), ("LidOpenBattLow", 26), ("LidCloseBattLow", 27), ("Updating", 28), ("ResetComplete", 29), ("BattLow", 30), ("LED1", 31), ("LED2", 32), ("LED3", 33), ("LED4", 34), ("LED5", 35), ("LED6", 36), ("LED7", 37), ("LED8", 38), ("LED9", 39), ("LED10", 40), ("LEDBattFull", 41), ("LEDPDLClear", 42), ("LEDLowPower", 43), ("LEDLowPowerLowCharge", 44), ("LEDWake", 45), ("LEDWakeLowCharge", 46), ("LEDPowerOn", 47), ("LEDPowerOnLowCharge", 48), ("LEDFactoryDefault", 49)])
    ReverseLedPatternId = OrderedDict([(0, "LedOff"), (1, "SolidOn"), (2, "FlashSlowRpt"), (3, "FlashMedRpt"), (4, "FlashFastRpt"), (5, "FlashSuperFastRpt"), (6, "FlashSuperFastRptInvertedPhase"), (7, "BlinkSingle"), (8, "BlinkDouble"), (9, "LongDoublePulse"), (10, "TenSecOn"), (11, "BtDiscov"), (12, "Connecting"), (13, "BlinkPause"), (14, "PowerOnFallback"), (15, "PowerOff"), (16, "ErrorFlash"), (17, "PowerOn"), (18, "ChargingBlink"), (19, "FiveSecOn"), (20, "ThirtySecOn"), (21, "Connected"), (22, "BattCritical"), (23, "Charged"), (24, "LidOpenBattFull"), (25, "LidCloseBattFull"), (26, "LidOpenBattLow"), (27, "LidCloseBattLow"), (28, "Updating"), (29, "ResetComplete"), (30, "BattLow"), (31, "LED1"), (32, "LED2"), (33, "LED3"), (34, "LED4"), (35, "LED5"), (36, "LED6"), (37, "LED7"), (38, "LED8"), (39, "LED9"), (40, "LED10"), (41, "LEDBattFull"), (42, "LEDPDLClear"), (43, "LEDLowPower"), (44, "LEDLowPowerLowCharge"), (45, "LEDWake"), (46, "LEDWakeLowCharge"), (47, "LEDPowerOn"), (48, "LEDPowerOnLowCharge"), (49, "LEDFactoryDefault")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 9), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (9, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_LEDs_Status.MSG_OFFSET + Debug_LEDs_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_LEDs_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_LEDs_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_LEDs_Status.MSG_OFFSET + Debug_LEDs_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_LEDs_Status.ID)
            self.hdr.SetDataLength(Debug_LEDs_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.LEDs.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLedPatterns(self):
        """Array of LED patterns representing all patterns currently playing. For some products, the single LED pattern currently playing."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_LEDs_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPatternID(self, enumAsInt=0):
        """Integer identification of pattern"""
        value = (self.GetLedPatterns() >> 0) & 0x3f
        if not enumAsInt:
            value = Debug_LEDs_Status.ReverseLedPatternId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPriority(self):
        """Priority of pattern (Not used for some products)"""
        value = (self.GetLedPatterns() >> 6) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLedPatterns(self, value):
        """Array of LED patterns representing all patterns currently playing. For some products, the single LED pattern currently playing."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_LEDs_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPatternID(self, value):
        """Integer identification of pattern"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_LEDs_Status.LedPatternId.get(value, defaultValue)
        tmp = min(max(value, 0), 63)
        self.SetLedPatterns((self.GetLedPatterns() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPriority(self, value):
        """Priority of pattern (Not used for some products)"""
        tmp = min(max(value, 0), 3)
        self.SetLedPatterns((self.GetLedPatterns() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LedPatterns",type="int",units="",minVal="0",maxVal="255",description="Array of LED patterns representing all patterns currently playing. For some products, the single LED pattern currently playing.",get=GetLedPatterns,set=SetLedPatterns,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PatternID",type="enumeration",units="",minVal="0",maxVal="63",description="Integer identification of pattern",get=GetPatternID,set=SetPatternID, enum = [LedPatternId, ReverseLedPatternId]),\
            BitFieldInfo(name="Priority",type="int",units="",minVal="0",maxVal="3",description="Priority of pattern (Not used for some products)",get=GetPriority,set=SetPriority, enum = [])], enum = [])\
    ]

Messaging.Register("Debug.LEDs.Status", Debug_LEDs_Status.ID, Debug_LEDs_Status)
