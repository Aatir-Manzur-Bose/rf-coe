#    obj/CodeGenerator/Python/Debug/Audio.py
#    Created 27/07/2023 at 10:10:04 from:
#        Messages = messages/Debug/Audio.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Audio_Get :
    ID = 33377
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 38), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (38, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Audio_Get.MSG_OFFSET + Debug_Audio_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Audio_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Audio_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Audio_Get.MSG_OFFSET + Debug_Audio_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Audio_Get.ID)
            self.hdr.SetDataLength(Debug_Audio_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Audio.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.Audio.Get", Debug_Audio_Get.ID, Debug_Audio_Get)
#    obj/CodeGenerator/Python/Debug/Audio.py
#    Created 27/07/2023 at 10:10:04 from:
#        Messages = messages/Debug/Audio.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Audio_Status :
    ID = 33379
    SIZE = 26
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioPlugin = OrderedDict([("NoPlugin", 0), ("A2DP", 1), ("HFP", 2), ("AUX", 3), ("USB", 4), ("Other", 255)])
    ReverseAudioPlugin = OrderedDict([(0, "NoPlugin"), (1, "A2DP"), (2, "HFP"), (3, "AUX"), (4, "USB"), (255, "Other")])
    DSPStatus = OrderedDict([("NotLoaded", 0), ("Loading", 1), ("LoadedIdle", 2), ("Running", 3), ("Error", 4)])
    ReverseDSPStatus = OrderedDict([(0, "NotLoaded"), (1, "Loading"), (2, "LoadedIdle"), (3, "Running"), (4, "Error")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 38), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (38, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Audio_Status.MSG_OFFSET + Debug_Audio_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Audio_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Audio_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Audio_Status.MSG_OFFSET + Debug_Audio_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Audio_Status.ID)
            self.hdr.SetDataLength(Debug_Audio_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Audio.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentControlPlugin(self, enumAsInt=0):
        """Specifies profile for current control plugin"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Audio_Status.ReverseAudioPlugin.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentRelayPlugin(self, enumAsInt=0):
        """Specifies profile for current relay plugin"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_Audio_Status.ReverseAudioPlugin.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetDspStatusInfo(self, enumAsInt=0):
        """DSP Status Information"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_Audio_Status.ReverseDSPStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetNumAudioConnections(self):
        """Number of audio connections"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetAudioInUse(self):
        """Audio currently being routed (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetAsrRunning(self):
        """ASR is currently running/listening (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetContentProtection(self):
        """Content protection (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetVpaPluginActive(self):
        """Vpa Plugin is active (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetFakeAuxEnabled(self):
        """Fake Aux Enabled (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetLocalStreamEnabled(self):
        """Local Stream Enabled (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetRelayAvailable(self):
        """Relay Available (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetLocalStreamClientsNum(self):
        """Local Stream Clients Count"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetLastToneMuted(self):
        """Last Completed Tone Was Muted (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetLastTTSMuted(self):
        """Last Completed TTS Prompt Was Muted (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def GetPlayingTone(self):
        """Playing Tone"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetLastPlayedTone(self):
        """Last Played Tone"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 15)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetLastCompletedTone(self):
        """Last Completed Tone"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('17')
    @msg.size('2')
    @msg.count(1)
    def GetPlayingTTSPrompt(self):
        """Playing TTS Prompt"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 17)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('19')
    @msg.size('2')
    @msg.count(1)
    def GetLastPlayedTTSPrompt(self):
        """Last Played TTS Prompt"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 19)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('21')
    @msg.size('2')
    @msg.count(1)
    def GetLastCompletedTTSPrompt(self):
        """Last Completed TTS Prompt"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 21)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(1)
    def GetTTSOverrideLevel(self):
        """TTS Override Level"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 23)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def GetPromptOverrideLevel(self):
        """Prompt Override Level"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(1)
    def GetLastEventIsConnectEvt(self):
        """Last Event is Connect Evt"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 25)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentControlPlugin(self, value):
        """Specifies profile for current control plugin"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Audio_Status.AudioPlugin.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentRelayPlugin(self, value):
        """Specifies profile for current relay plugin"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Audio_Status.AudioPlugin.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetDspStatusInfo(self, value):
        """DSP Status Information"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Audio_Status.DSPStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetNumAudioConnections(self, value):
        """Number of audio connections"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetAudioInUse(self, value):
        """Audio currently being routed (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetAsrRunning(self, value):
        """ASR is currently running/listening (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetContentProtection(self, value):
        """Content protection (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetVpaPluginActive(self, value):
        """Vpa Plugin is active (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetFakeAuxEnabled(self, value):
        """Fake Aux Enabled (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetLocalStreamEnabled(self, value):
        """Local Stream Enabled (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetRelayAvailable(self, value):
        """Relay Available (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetLocalStreamClientsNum(self, value):
        """Local Stream Clients Count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetLastToneMuted(self, value):
        """Last Completed Tone Was Muted (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetLastTTSMuted(self, value):
        """Last Completed TTS Prompt Was Muted (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def SetPlayingTone(self, value):
        """Playing Tone"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetLastPlayedTone(self, value):
        """Last Played Tone"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 15, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetLastCompletedTone(self, value):
        """Last Completed Tone"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('17')
    @msg.size('2')
    @msg.count(1)
    def SetPlayingTTSPrompt(self, value):
        """Playing TTS Prompt"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('19')
    @msg.size('2')
    @msg.count(1)
    def SetLastPlayedTTSPrompt(self, value):
        """Last Played TTS Prompt"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 19, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('21')
    @msg.size('2')
    @msg.count(1)
    def SetLastCompletedTTSPrompt(self, value):
        """Last Completed TTS Prompt"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 21, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(1)
    def SetTTSOverrideLevel(self, value):
        """TTS Override Level"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 23, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def SetPromptOverrideLevel(self, value):
        """Prompt Override Level"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 24, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(1)
    def SetLastEventIsConnectEvt(self, value):
        """Last Event is Connect Evt"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Audio_Status.MSG_OFFSET + 25, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentControlPlugin",type="enumeration",units="",minVal="0",maxVal="255",description="Specifies profile for current control plugin",get=GetCurrentControlPlugin,set=SetCurrentControlPlugin,count=1, bitfieldInfo = [], enum = [AudioPlugin, ReverseAudioPlugin]),\
        FieldInfo(name="CurrentRelayPlugin",type="enumeration",units="",minVal="0",maxVal="255",description="Specifies profile for current relay plugin",get=GetCurrentRelayPlugin,set=SetCurrentRelayPlugin,count=1, bitfieldInfo = [], enum = [AudioPlugin, ReverseAudioPlugin]),\
        FieldInfo(name="DspStatusInfo",type="enumeration",units="",minVal="0",maxVal="255",description="DSP Status Information",get=GetDspStatusInfo,set=SetDspStatusInfo,count=1, bitfieldInfo = [], enum = [DSPStatus, ReverseDSPStatus]),\
        FieldInfo(name="NumAudioConnections",type="int",units="",minVal="0",maxVal="255",description="Number of audio connections",get=GetNumAudioConnections,set=SetNumAudioConnections,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AudioInUse",type="int",units="Boolean",minVal="0",maxVal="255",description="Audio currently being routed (true/false)",get=GetAudioInUse,set=SetAudioInUse,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AsrRunning",type="int",units="Boolean",minVal="0",maxVal="255",description="ASR is currently running/listening (true/false)",get=GetAsrRunning,set=SetAsrRunning,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ContentProtection",type="int",units="Boolean",minVal="0",maxVal="255",description="Content protection (true/false)",get=GetContentProtection,set=SetContentProtection,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VpaPluginActive",type="int",units="Boolean",minVal="0",maxVal="255",description="Vpa Plugin is active (true/false)",get=GetVpaPluginActive,set=SetVpaPluginActive,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FakeAuxEnabled",type="int",units="Boolean",minVal="0",maxVal="255",description="Fake Aux Enabled (true/false)",get=GetFakeAuxEnabled,set=SetFakeAuxEnabled,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LocalStreamEnabled",type="int",units="Boolean",minVal="0",maxVal="255",description="Local Stream Enabled (true/false)",get=GetLocalStreamEnabled,set=SetLocalStreamEnabled,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RelayAvailable",type="int",units="Boolean",minVal="0",maxVal="255",description="Relay Available (true/false)",get=GetRelayAvailable,set=SetRelayAvailable,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LocalStreamClientsNum",type="int",units="",minVal="0",maxVal="255",description="Local Stream Clients Count",get=GetLocalStreamClientsNum,set=SetLocalStreamClientsNum,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastToneMuted",type="int",units="Boolean",minVal="0",maxVal="255",description="Last Completed Tone Was Muted (true/false)",get=GetLastToneMuted,set=SetLastToneMuted,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastTTSMuted",type="int",units="Boolean",minVal="0",maxVal="255",description="Last Completed TTS Prompt Was Muted (true/false)",get=GetLastTTSMuted,set=SetLastTTSMuted,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PlayingTone",type="int",units="",minVal="0",maxVal="255",description="Playing Tone",get=GetPlayingTone,set=SetPlayingTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastPlayedTone",type="int",units="",minVal="0",maxVal="255",description="Last Played Tone",get=GetLastPlayedTone,set=SetLastPlayedTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastCompletedTone",type="int",units="",minVal="0",maxVal="255",description="Last Completed Tone",get=GetLastCompletedTone,set=SetLastCompletedTone,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PlayingTTSPrompt",type="int",units="",minVal="0",maxVal="65535",description="Playing TTS Prompt",get=GetPlayingTTSPrompt,set=SetPlayingTTSPrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastPlayedTTSPrompt",type="int",units="",minVal="0",maxVal="65535",description="Last Played TTS Prompt",get=GetLastPlayedTTSPrompt,set=SetLastPlayedTTSPrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastCompletedTTSPrompt",type="int",units="",minVal="0",maxVal="65535",description="Last Completed TTS Prompt",get=GetLastCompletedTTSPrompt,set=SetLastCompletedTTSPrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TTSOverrideLevel",type="int",units="",minVal="0",maxVal="255",description="TTS Override Level",get=GetTTSOverrideLevel,set=SetTTSOverrideLevel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PromptOverrideLevel",type="int",units="",minVal="0",maxVal="255",description="Prompt Override Level",get=GetPromptOverrideLevel,set=SetPromptOverrideLevel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastEventIsConnectEvt",type="int",units="Boolean",minVal="0",maxVal="255",description="Last Event is Connect Evt",get=GetLastEventIsConnectEvt,set=SetLastEventIsConnectEvt,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Audio.Status", Debug_Audio_Status.ID, Debug_Audio_Status)
