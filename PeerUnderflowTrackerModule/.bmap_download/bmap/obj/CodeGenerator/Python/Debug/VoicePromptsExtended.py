#    obj/CodeGenerator/Python/Debug/VoicePromptsExtended.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePromptsExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePromptsExtended_Get :
    ID = 33201
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 27), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (27, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Get.MSG_OFFSET + Debug_VoicePromptsExtended_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePromptsExtended_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePromptsExtended_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Get.MSG_OFFSET + Debug_VoicePromptsExtended_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePromptsExtended_Get.ID)
            self.hdr.SetDataLength(Debug_VoicePromptsExtended_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePromptsExtended.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.VoicePromptsExtended.Get", Debug_VoicePromptsExtended_Get.ID, Debug_VoicePromptsExtended_Get)
#    obj/CodeGenerator/Python/Debug/VoicePromptsExtended.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePromptsExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePromptsExtended_Status :
    ID = 33203
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 27), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (27, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Status.MSG_OFFSET + Debug_VoicePromptsExtended_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePromptsExtended_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePromptsExtended_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Status.MSG_OFFSET + Debug_VoicePromptsExtended_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePromptsExtended_Status.ID)
            self.hdr.SetDataLength(Debug_VoicePromptsExtended_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePromptsExtended.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetLastPlayedVoicePrompt(self):
        """Last played Voice Prompt ID."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetLastCompletedVoicePrompt(self):
        """Last completed Voice Prompt ID."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetLastQueuedVoicePrompt(self):
        """Last queued Voice Prompt ID."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetVoicePromptExtendedFlags(self):
        """Bitfield of flags indicating additional details such as now playing"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetNowPlayingFlag(self):
        """This flag is set if the listed last played voice prompt is currently playing."""
        value = (self.GetVoicePromptExtendedFlags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetLastPlayedRawTTSIdFlag(self):
        """This flag is set if there was no matching last played voice prompt ID and the raw TTS ID is passed through instead."""
        value = (self.GetVoicePromptExtendedFlags() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetLastCompletedRawTTSIdFlag(self):
        """This flag is set if there was no matching last completed voice prompt ID and the raw TTS ID is passed through instead."""
        value = (self.GetVoicePromptExtendedFlags() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetLastQueuedRawTTSIdFlag(self):
        """This flag is set if there was no matching last queued voice prompt ID and the raw TTS ID is passed through instead."""
        value = (self.GetVoicePromptExtendedFlags() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetIsPromptNowPlayingMuted(self):
        """This flag is set if the currently playing voice prompt is muted. (Don't Care if NowPlayingFlag = 0)"""
        value = (self.GetVoicePromptExtendedFlags() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetWasLastCompletedVoicePromptMuted(self):
        """This flag is set if the last played voice prompt was muted at completion."""
        value = (self.GetVoicePromptExtendedFlags() >> 5) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedVoicePromptFlags(self):
        """Unused"""
        value = (self.GetVoicePromptExtendedFlags() >> 6) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetLastPlayedVoicePrompt(self, value):
        """Last played Voice Prompt ID."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetLastCompletedVoicePrompt(self, value):
        """Last completed Voice Prompt ID."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetLastQueuedVoicePrompt(self, value):
        """Last queued Voice Prompt ID."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetVoicePromptExtendedFlags(self, value):
        """Bitfield of flags indicating additional details such as now playing"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_VoicePromptsExtended_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetNowPlayingFlag(self, value):
        """This flag is set if the listed last played voice prompt is currently playing."""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetLastPlayedRawTTSIdFlag(self, value):
        """This flag is set if there was no matching last played voice prompt ID and the raw TTS ID is passed through instead."""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetLastCompletedRawTTSIdFlag(self, value):
        """This flag is set if there was no matching last completed voice prompt ID and the raw TTS ID is passed through instead."""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetLastQueuedRawTTSIdFlag(self, value):
        """This flag is set if there was no matching last queued voice prompt ID and the raw TTS ID is passed through instead."""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetIsPromptNowPlayingMuted(self, value):
        """This flag is set if the currently playing voice prompt is muted. (Don't Care if NowPlayingFlag = 0)"""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetWasLastCompletedVoicePromptMuted(self, value):
        """This flag is set if the last played voice prompt was muted at completion."""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedVoicePromptFlags(self, value):
        """Unused"""
        tmp = min(max(value, 0), 3)
        self.SetVoicePromptExtendedFlags((self.GetVoicePromptExtendedFlags() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LastPlayedVoicePrompt",type="int",units="",minVal="0",maxVal="65535",description="Last played Voice Prompt ID.",get=GetLastPlayedVoicePrompt,set=SetLastPlayedVoicePrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastCompletedVoicePrompt",type="int",units="",minVal="0",maxVal="65535",description="Last completed Voice Prompt ID.",get=GetLastCompletedVoicePrompt,set=SetLastCompletedVoicePrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LastQueuedVoicePrompt",type="int",units="",minVal="0",maxVal="65535",description="Last queued Voice Prompt ID.",get=GetLastQueuedVoicePrompt,set=SetLastQueuedVoicePrompt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VoicePromptExtendedFlags",type="int",units="",minVal="0",maxVal="255",description="Bitfield of flags indicating additional details such as now playing",get=GetVoicePromptExtendedFlags,set=SetVoicePromptExtendedFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="NowPlayingFlag",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the listed last played voice prompt is currently playing.",get=GetNowPlayingFlag,set=SetNowPlayingFlag, enum = []),\
            BitFieldInfo(name="LastPlayedRawTTSIdFlag",type="int",units="",minVal="0",maxVal="1",description="This flag is set if there was no matching last played voice prompt ID and the raw TTS ID is passed through instead.",get=GetLastPlayedRawTTSIdFlag,set=SetLastPlayedRawTTSIdFlag, enum = []),\
            BitFieldInfo(name="LastCompletedRawTTSIdFlag",type="int",units="",minVal="0",maxVal="1",description="This flag is set if there was no matching last completed voice prompt ID and the raw TTS ID is passed through instead.",get=GetLastCompletedRawTTSIdFlag,set=SetLastCompletedRawTTSIdFlag, enum = []),\
            BitFieldInfo(name="LastQueuedRawTTSIdFlag",type="int",units="",minVal="0",maxVal="1",description="This flag is set if there was no matching last queued voice prompt ID and the raw TTS ID is passed through instead.",get=GetLastQueuedRawTTSIdFlag,set=SetLastQueuedRawTTSIdFlag, enum = []),\
            BitFieldInfo(name="IsPromptNowPlayingMuted",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the currently playing voice prompt is muted. (Don't Care if NowPlayingFlag = 0)",get=GetIsPromptNowPlayingMuted,set=SetIsPromptNowPlayingMuted, enum = []),\
            BitFieldInfo(name="WasLastCompletedVoicePromptMuted",type="int",units="",minVal="0",maxVal="1",description="This flag is set if the last played voice prompt was muted at completion.",get=GetWasLastCompletedVoicePromptMuted,set=SetWasLastCompletedVoicePromptMuted, enum = []),\
            BitFieldInfo(name="UnusedVoicePromptFlags",type="int",units="",minVal="0",maxVal="3",description="Unused",get=GetUnusedVoicePromptFlags,set=SetUnusedVoicePromptFlags, enum = [])], enum = [])\
    ]

Messaging.Register("Debug.VoicePromptsExtended.Status", Debug_VoicePromptsExtended_Status.ID, Debug_VoicePromptsExtended_Status)
#    obj/CodeGenerator/Python/Debug/VoicePromptsExtended.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePromptsExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePromptsExtended_Start :
    ID = 33205
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 27), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (27, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Start.MSG_OFFSET + Debug_VoicePromptsExtended_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePromptsExtended_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePromptsExtended_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Start.MSG_OFFSET + Debug_VoicePromptsExtended_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePromptsExtended_Start.ID)
            self.hdr.SetDataLength(Debug_VoicePromptsExtended_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePromptsExtended.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetType(self):
        """Voice Prompt ID."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetType(self, value):
        """Voice Prompt ID."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="int",units="",minVal="0",maxVal="65535",description="Voice Prompt ID.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.VoicePromptsExtended.Start", Debug_VoicePromptsExtended_Start.ID, Debug_VoicePromptsExtended_Start)
#    obj/CodeGenerator/Python/Debug/VoicePromptsExtended.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/VoicePromptsExtended.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_VoicePromptsExtended_Result :
    ID = 33206
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 27), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (27, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Result.MSG_OFFSET + Debug_VoicePromptsExtended_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_VoicePromptsExtended_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_VoicePromptsExtended_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_VoicePromptsExtended_Result.MSG_OFFSET + Debug_VoicePromptsExtended_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_VoicePromptsExtended_Result.ID)
            self.hdr.SetDataLength(Debug_VoicePromptsExtended_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.VoicePromptsExtended.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetType(self):
        """Extended Voice Prompt ID."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetType(self, value):
        """Extended Voice Prompt ID."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_VoicePromptsExtended_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Type",type="int",units="",minVal="0",maxVal="65535",description="Extended Voice Prompt ID.",get=GetType,set=SetType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.VoicePromptsExtended.Result", Debug_VoicePromptsExtended_Result.ID, Debug_VoicePromptsExtended_Result)
