#    obj/CodeGenerator/Python/Debug/Seize.py
#    Created 27/07/2023 at 10:10:16 from:
#        Messages = messages/Debug/Seize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Seize_Get :
    ID = 33089
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SeizableResources = OrderedDict([("SEIZE_LED_PATTERN_PLAYER", 0)])
    ReverseSeizableResources = OrderedDict([(0, "SEIZE_LED_PATTERN_PLAYER")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 20), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (20, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Seize_Get.MSG_OFFSET + Debug_Seize_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Seize_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Seize_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Seize_Get.MSG_OFFSET + Debug_Seize_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Seize_Get.ID)
            self.hdr.SetDataLength(Debug_Seize_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Seize.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResourceID(self, enumAsInt=0):
        """ID of resource you wish to interrogate"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Seize_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Seize_Get.ReverseSeizableResources.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResourceID(self, value):
        """ID of resource you wish to interrogate"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Seize_Get.SeizableResources.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Seize_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ResourceID",type="enumeration",units="",minVal="0",maxVal="255",description="ID of resource you wish to interrogate",get=GetResourceID,set=SetResourceID,count=1, bitfieldInfo = [], enum = [SeizableResources, ReverseSeizableResources])\
    ]

Messaging.Register("Debug.Seize.Get", Debug_Seize_Get.ID, Debug_Seize_Get)
#    obj/CodeGenerator/Python/Debug/Seize.py
#    Created 27/07/2023 at 10:10:16 from:
#        Messages = messages/Debug/Seize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Seize_SetGet :
    ID = 33090
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SeizableResources = OrderedDict([("SEIZE_LED_PATTERN_PLAYER", 0)])
    ReverseSeizableResources = OrderedDict([(0, "SEIZE_LED_PATTERN_PLAYER")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 20), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (20, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Seize_SetGet.MSG_OFFSET + Debug_Seize_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Seize_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Seize_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Seize_SetGet.MSG_OFFSET + Debug_Seize_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Seize_SetGet.ID)
            self.hdr.SetDataLength(Debug_Seize_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Seize.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResourceID(self, enumAsInt=0):
        """ID of resource you wish to seize or free. 1 = seized by BMAP, 0 = available to UE"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Seize_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_Seize_SetGet.ReverseSeizableResources.get(value, value)
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAction(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Seize_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResourceID(self, value):
        """ID of resource you wish to seize or free. 1 = seized by BMAP, 0 = available to UE"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_Seize_SetGet.SeizableResources.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Seize_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAction(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Seize_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ResourceID",type="enumeration",units="",minVal="0",maxVal="255",description="ID of resource you wish to seize or free. 1 = seized by BMAP, 0 = available to UE",get=GetResourceID,set=SetResourceID,count=1, bitfieldInfo = [], enum = [SeizableResources, ReverseSeizableResources]),\
        FieldInfo(name="Action",type="int",units="Boolean",minVal="0",maxVal="255",description="",get=GetAction,set=SetAction,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Seize.SetGet", Debug_Seize_SetGet.ID, Debug_Seize_SetGet)
#    obj/CodeGenerator/Python/Debug/Seize.py
#    Created 27/07/2023 at 10:10:16 from:
#        Messages = messages/Debug/Seize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_Seize_Status :
    ID = 33091
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 20), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (20, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_Seize_Status.MSG_OFFSET + Debug_Seize_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_Seize_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_Seize_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_Seize_Status.MSG_OFFSET + Debug_Seize_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_Seize_Status.ID)
            self.hdr.SetDataLength(Debug_Seize_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.Seize.Status"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSeizureStatus(self):
        """Seizure status. 1 = seized by BMAP, 0 = available to UE"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_Seize_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSeizureStatus(self, value):
        """Seizure status. 1 = seized by BMAP, 0 = available to UE"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_Seize_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SeizureStatus",type="int",units="Boolean",minVal="0",maxVal="255",description="Seizure status. 1 = seized by BMAP, 0 = available to UE",get=GetSeizureStatus,set=SetSeizureStatus,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.Seize.Status", Debug_Seize_Status.ID, Debug_Seize_Status)
