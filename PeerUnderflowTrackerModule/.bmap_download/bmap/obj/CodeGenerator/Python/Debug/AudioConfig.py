#    obj/CodeGenerator/Python/Debug/AudioConfig.py
#    Created 27/07/2023 at 10:10:04 from:
#        Messages = messages/Debug/AudioConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_AudioConfig_Get :
    ID = 33425
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 41), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (41, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_AudioConfig_Get.MSG_OFFSET + Debug_AudioConfig_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_AudioConfig_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_AudioConfig_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_AudioConfig_Get.MSG_OFFSET + Debug_AudioConfig_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_AudioConfig_Get.ID)
            self.hdr.SetDataLength(Debug_AudioConfig_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.AudioConfig.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.AudioConfig.Get", Debug_AudioConfig_Get.ID, Debug_AudioConfig_Get)
#    obj/CodeGenerator/Python/Debug/AudioConfig.py
#    Created 27/07/2023 at 10:10:04 from:
#        Messages = messages/Debug/AudioConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_AudioConfig_Status :
    ID = 33427
    SIZE = 73
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    A2dpMusicProcessingMode = OrderedDict([("Passthrough", 0), ("Full", 1), ("FullNextEqBank", 2), ("FullSetEqBank0", 3), ("FullSetEqBank1", 4), ("FullSetEqBank2", 5), ("FullSetEqBank3", 6), ("FullSetEqBank4", 7), ("FullSetEqBank5", 8), ("FullSetEqBank6", 9)])
    ReverseA2dpMusicProcessingMode = OrderedDict([(0, "Passthrough"), (1, "Full"), (2, "FullNextEqBank"), (3, "FullSetEqBank0"), (4, "FullSetEqBank1"), (5, "FullSetEqBank2"), (6, "FullSetEqBank3"), (7, "FullSetEqBank4"), (8, "FullSetEqBank5"), (9, "FullSetEqBank6")])
    AudioMusicChannelMode = OrderedDict([("Stereo", 0), ("Left", 1), ("Right", 2), ("Downmix", 3), ("Invalid", 4)])
    ReverseAudioMusicChannelMode = OrderedDict([(0, "Stereo"), (1, "Left"), (2, "Right"), (3, "Downmix"), (4, "Invalid")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 41), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (41, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_AudioConfig_Status.MSG_OFFSET + Debug_AudioConfig_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_AudioConfig_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_AudioConfig_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_AudioConfig_Status.MSG_OFFSET + Debug_AudioConfig_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_AudioConfig_Status.ID)
            self.hdr.SetDataLength(Debug_AudioConfig_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.AudioConfig.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMusicProcessingMode(self, enumAsInt=0):
        """A2dp Music Processing Mode"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_AudioConfig_Status.ReverseA2dpMusicProcessingMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetMusicModeEnhancements(self):
        """Music Mode Enhancements"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetFixedToneVolume(self):
        """Tone Volume Fixed (true/false)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(1)
    def GetToneVolume(self):
        """Tone Volume"""
        value = struct.unpack_from('>l', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def GetMasterVolume(self):
        """Master Volume"""
        value = struct.unpack_from('>l', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def GetNumEqParams(self):
        """Number of Eq Parameters"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetOutputSampleRate(self):
        """Output Sample Rate"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def GetWiredOutputSampleRate(self):
        """Wired Output Sample Rate"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('26')
    @msg.size('4')
    @msg.count(1)
    def GetNumConcurrentInputs(self):
        """Number of Concurrent Inputs"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('30')
    @msg.size('1')
    @msg.count(1)
    def GetSpeakerPeqBypass(self):
        """Speaker PEQ Bypass"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 30)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(1)
    def GetLocalChannelMode(self, enumAsInt=0):
        """Local TWS Channel Mode"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 31)[0]
        if not enumAsInt:
            value = Debug_AudioConfig_Status.ReverseAudioMusicChannelMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(1)
    def GetRemoteChannelMode(self, enumAsInt=0):
        """Remote TWS Channel Mode"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 32)[0]
        if not enumAsInt:
            value = Debug_AudioConfig_Status.ReverseAudioMusicChannelMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def GetPeqConfigSelected(self):
        """Selected Peq Config"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 33)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def GetMasterMuteState(self):
        """Master Mute State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 34)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('35')
    @msg.size('1')
    @msg.count(1)
    def GetMicMuteState(self):
        """Mic Mute State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 35)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(1)
    def GetPCMInstance(self):
        """PCM Audio Hardware Instance"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 36)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(1)
    def GetMusicQuality(self):
        """Audio Quality Mode for Music"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 37)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('38')
    @msg.size('1')
    @msg.count(1)
    def GetVoiceQuality(self):
        """Audio Quality Mode for Voice"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 38)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('39')
    @msg.size('4')
    @msg.count(1)
    def GetDacOutputResamplingRate(self):
        """DAC Output Resampling Rate"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 39)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('43')
    @msg.size('4')
    @msg.count(1)
    def GetDacOutputRawGain0(self):
        """DAC Output Raw Gain (0)"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 43)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('47')
    @msg.size('4')
    @msg.count(1)
    def GetDacOutputRawGain1(self):
        """DAC Output Raw Gain (1)"""
        value = struct.unpack_from('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 47)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('51')
    @msg.size('1')
    @msg.count(1)
    def GetPeerMode(self):
        """Peer Mode (e.g. None, TWS, or ShareMe)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 51)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('52')
    @msg.size('2')
    @msg.count(1)
    def GetA2dpMinTtpLatency(self):
        """A2dp Minimum TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 52)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('54')
    @msg.size('2')
    @msg.count(1)
    def GetA2dpTargetTtpLatency(self):
        """A2dp Target TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 54)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('56')
    @msg.size('2')
    @msg.count(1)
    def GetA2dpMaxTtpLatency(self):
        """A2dp Max TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 56)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('58')
    @msg.size('2')
    @msg.count(1)
    def GetTwsMinTtpLatency(self):
        """TWS Minimum TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 58)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('60')
    @msg.size('2')
    @msg.count(1)
    def GetTwsTargetTtpLatency(self):
        """TWS Target TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 60)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('62')
    @msg.size('2')
    @msg.count(1)
    def GetTwsMaxTtpLatency(self):
        """TWS Max TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 62)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('64')
    @msg.size('2')
    @msg.count(1)
    def GetWiredMinTtpLatency(self):
        """Wired Minimum TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 64)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('66')
    @msg.size('2')
    @msg.count(1)
    def GetWiredTargetTtpLatency(self):
        """Wired Target TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 66)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('68')
    @msg.size('2')
    @msg.count(1)
    def GetWiredMaxTtpLatency(self):
        """Wired Max TTP Latency (Milliseconds)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 68)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('70')
    @msg.size('1')
    @msg.count(1)
    def GetSBCEncoderFormat(self):
        """SBC Encoder Format"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 70)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('71')
    @msg.size('1')
    @msg.count(1)
    def GetSBCEncoderBitpool(self):
        """SBC Encoder Bitpool"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 71)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('72')
    @msg.size('1')
    @msg.count(1)
    def GetUseSramForA2dp(self):
        """Use SRAM for A2dp"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 72)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMusicProcessingMode(self, value):
        """A2dp Music Processing Mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_AudioConfig_Status.A2dpMusicProcessingMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetMusicModeEnhancements(self, value):
        """Music Mode Enhancements"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetFixedToneVolume(self, value):
        """Tone Volume Fixed (true/false)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(1)
    def SetToneVolume(self, value):
        """Tone Volume"""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def SetMasterVolume(self, value):
        """Master Volume"""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def SetNumEqParams(self, value):
        """Number of Eq Parameters"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetOutputSampleRate(self, value):
        """Output Sample Rate"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def SetWiredOutputSampleRate(self, value):
        """Wired Output Sample Rate"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 22, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('26')
    @msg.size('4')
    @msg.count(1)
    def SetNumConcurrentInputs(self, value):
        """Number of Concurrent Inputs"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 26, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('30')
    @msg.size('1')
    @msg.count(1)
    def SetSpeakerPeqBypass(self, value):
        """Speaker PEQ Bypass"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 30, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(1)
    def SetLocalChannelMode(self, value):
        """Local TWS Channel Mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_AudioConfig_Status.AudioMusicChannelMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 31, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(1)
    def SetRemoteChannelMode(self, value):
        """Remote TWS Channel Mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_AudioConfig_Status.AudioMusicChannelMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def SetPeqConfigSelected(self, value):
        """Selected Peq Config"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 33, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def SetMasterMuteState(self, value):
        """Master Mute State"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 34, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('35')
    @msg.size('1')
    @msg.count(1)
    def SetMicMuteState(self, value):
        """Mic Mute State"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 35, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(1)
    def SetPCMInstance(self, value):
        """PCM Audio Hardware Instance"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 36, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(1)
    def SetMusicQuality(self, value):
        """Audio Quality Mode for Music"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 37, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('38')
    @msg.size('1')
    @msg.count(1)
    def SetVoiceQuality(self, value):
        """Audio Quality Mode for Voice"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 38, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('39')
    @msg.size('4')
    @msg.count(1)
    def SetDacOutputResamplingRate(self, value):
        """DAC Output Resampling Rate"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 39, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('43')
    @msg.size('4')
    @msg.count(1)
    def SetDacOutputRawGain0(self, value):
        """DAC Output Raw Gain (0)"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 43, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('47')
    @msg.size('4')
    @msg.count(1)
    def SetDacOutputRawGain1(self, value):
        """DAC Output Raw Gain (1)"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 47, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('51')
    @msg.size('1')
    @msg.count(1)
    def SetPeerMode(self, value):
        """Peer Mode (e.g. None, TWS, or ShareMe)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 51, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('52')
    @msg.size('2')
    @msg.count(1)
    def SetA2dpMinTtpLatency(self, value):
        """A2dp Minimum TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 52, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('54')
    @msg.size('2')
    @msg.count(1)
    def SetA2dpTargetTtpLatency(self, value):
        """A2dp Target TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 54, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('56')
    @msg.size('2')
    @msg.count(1)
    def SetA2dpMaxTtpLatency(self, value):
        """A2dp Max TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 56, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('58')
    @msg.size('2')
    @msg.count(1)
    def SetTwsMinTtpLatency(self, value):
        """TWS Minimum TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 58, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('60')
    @msg.size('2')
    @msg.count(1)
    def SetTwsTargetTtpLatency(self, value):
        """TWS Target TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 60, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('62')
    @msg.size('2')
    @msg.count(1)
    def SetTwsMaxTtpLatency(self, value):
        """TWS Max TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 62, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('64')
    @msg.size('2')
    @msg.count(1)
    def SetWiredMinTtpLatency(self, value):
        """Wired Minimum TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 64, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('66')
    @msg.size('2')
    @msg.count(1)
    def SetWiredTargetTtpLatency(self, value):
        """Wired Target TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 66, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('68')
    @msg.size('2')
    @msg.count(1)
    def SetWiredMaxTtpLatency(self, value):
        """Wired Max TTP Latency (Milliseconds)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 68, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('70')
    @msg.size('1')
    @msg.count(1)
    def SetSBCEncoderFormat(self, value):
        """SBC Encoder Format"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 70, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('71')
    @msg.size('1')
    @msg.count(1)
    def SetSBCEncoderBitpool(self, value):
        """SBC Encoder Bitpool"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 71, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('72')
    @msg.size('1')
    @msg.count(1)
    def SetUseSramForA2dp(self, value):
        """Use SRAM for A2dp"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_AudioConfig_Status.MSG_OFFSET + 72, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MusicProcessingMode",type="enumeration",units="",minVal="0",maxVal="255",description="A2dp Music Processing Mode",get=GetMusicProcessingMode,set=SetMusicProcessingMode,count=1, bitfieldInfo = [], enum = [A2dpMusicProcessingMode, ReverseA2dpMusicProcessingMode]),\
        FieldInfo(name="MusicModeEnhancements",type="int",units="",minVal="0",maxVal="4294967295",description="Music Mode Enhancements",get=GetMusicModeEnhancements,set=SetMusicModeEnhancements,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FixedToneVolume",type="int",units="Boolean",minVal="0",maxVal="255",description="Tone Volume Fixed (true/false)",get=GetFixedToneVolume,set=SetFixedToneVolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ToneVolume",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Tone Volume",get=GetToneVolume,set=SetToneVolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MasterVolume",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Master Volume",get=GetMasterVolume,set=SetMasterVolume,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumEqParams",type="int",units="",minVal="0",maxVal="4294967295",description="Number of Eq Parameters",get=GetNumEqParams,set=SetNumEqParams,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="OutputSampleRate",type="int",units="",minVal="0",maxVal="4294967295",description="Output Sample Rate",get=GetOutputSampleRate,set=SetOutputSampleRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WiredOutputSampleRate",type="int",units="",minVal="0",maxVal="4294967295",description="Wired Output Sample Rate",get=GetWiredOutputSampleRate,set=SetWiredOutputSampleRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumConcurrentInputs",type="int",units="",minVal="0",maxVal="4294967295",description="Number of Concurrent Inputs",get=GetNumConcurrentInputs,set=SetNumConcurrentInputs,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SpeakerPeqBypass",type="int",units="Boolean",minVal="0",maxVal="255",description="Speaker PEQ Bypass",get=GetSpeakerPeqBypass,set=SetSpeakerPeqBypass,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LocalChannelMode",type="enumeration",units="",minVal="0",maxVal="255",description="Local TWS Channel Mode",get=GetLocalChannelMode,set=SetLocalChannelMode,count=1, bitfieldInfo = [], enum = [AudioMusicChannelMode, ReverseAudioMusicChannelMode]),\
        FieldInfo(name="RemoteChannelMode",type="enumeration",units="",minVal="0",maxVal="255",description="Remote TWS Channel Mode",get=GetRemoteChannelMode,set=SetRemoteChannelMode,count=1, bitfieldInfo = [], enum = [AudioMusicChannelMode, ReverseAudioMusicChannelMode]),\
        FieldInfo(name="PeqConfigSelected",type="int",units="",minVal="0",maxVal="255",description="Selected Peq Config",get=GetPeqConfigSelected,set=SetPeqConfigSelected,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MasterMuteState",type="int",units="",minVal="0",maxVal="255",description="Master Mute State",get=GetMasterMuteState,set=SetMasterMuteState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MicMuteState",type="int",units="",minVal="0",maxVal="255",description="Mic Mute State",get=GetMicMuteState,set=SetMicMuteState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PCMInstance",type="int",units="",minVal="0",maxVal="255",description="PCM Audio Hardware Instance",get=GetPCMInstance,set=SetPCMInstance,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MusicQuality",type="int",units="",minVal="0",maxVal="255",description="Audio Quality Mode for Music",get=GetMusicQuality,set=SetMusicQuality,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VoiceQuality",type="int",units="",minVal="0",maxVal="255",description="Audio Quality Mode for Voice",get=GetVoiceQuality,set=SetVoiceQuality,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DacOutputResamplingRate",type="int",units="",minVal="0",maxVal="4294967295",description="DAC Output Resampling Rate",get=GetDacOutputResamplingRate,set=SetDacOutputResamplingRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DacOutputRawGain0",type="int",units="",minVal="0",maxVal="4294967295",description="DAC Output Raw Gain (0)",get=GetDacOutputRawGain0,set=SetDacOutputRawGain0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DacOutputRawGain1",type="int",units="",minVal="0",maxVal="4294967295",description="DAC Output Raw Gain (1)",get=GetDacOutputRawGain1,set=SetDacOutputRawGain1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PeerMode",type="int",units="",minVal="0",maxVal="255",description="Peer Mode (e.g. None, TWS, or ShareMe)",get=GetPeerMode,set=SetPeerMode,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2dpMinTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="A2dp Minimum TTP Latency (Milliseconds)",get=GetA2dpMinTtpLatency,set=SetA2dpMinTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2dpTargetTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="A2dp Target TTP Latency (Milliseconds)",get=GetA2dpTargetTtpLatency,set=SetA2dpTargetTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2dpMaxTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="A2dp Max TTP Latency (Milliseconds)",get=GetA2dpMaxTtpLatency,set=SetA2dpMaxTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TwsMinTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="TWS Minimum TTP Latency (Milliseconds)",get=GetTwsMinTtpLatency,set=SetTwsMinTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TwsTargetTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="TWS Target TTP Latency (Milliseconds)",get=GetTwsTargetTtpLatency,set=SetTwsTargetTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TwsMaxTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="TWS Max TTP Latency (Milliseconds)",get=GetTwsMaxTtpLatency,set=SetTwsMaxTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WiredMinTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="Wired Minimum TTP Latency (Milliseconds)",get=GetWiredMinTtpLatency,set=SetWiredMinTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WiredTargetTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="Wired Target TTP Latency (Milliseconds)",get=GetWiredTargetTtpLatency,set=SetWiredTargetTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WiredMaxTtpLatency",type="int",units="",minVal="0",maxVal="65535",description="Wired Max TTP Latency (Milliseconds)",get=GetWiredMaxTtpLatency,set=SetWiredMaxTtpLatency,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SBCEncoderFormat",type="int",units="",minVal="0",maxVal="255",description="SBC Encoder Format",get=GetSBCEncoderFormat,set=SetSBCEncoderFormat,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SBCEncoderBitpool",type="int",units="",minVal="0",maxVal="255",description="SBC Encoder Bitpool",get=GetSBCEncoderBitpool,set=SetSBCEncoderBitpool,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UseSramForA2dp",type="int",units="Boolean",minVal="0",maxVal="255",description="Use SRAM for A2dp",get=GetUseSramForA2dp,set=SetUseSramForA2dp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.AudioConfig.Status", Debug_AudioConfig_Status.ID, Debug_AudioConfig_Status)
