#    obj/CodeGenerator/Python/Debug/BmapOverInsecureBle.py
#    Created 27/07/2023 at 10:10:07 from:
#        Messages = messages/Debug/BmapOverInsecureBle.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BmapOverInsecureBle_Get :
    ID = 33185
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 26), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (26, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_Get.MSG_OFFSET + Debug_BmapOverInsecureBle_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BmapOverInsecureBle_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BmapOverInsecureBle_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_Get.MSG_OFFSET + Debug_BmapOverInsecureBle_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BmapOverInsecureBle_Get.ID)
            self.hdr.SetDataLength(Debug_BmapOverInsecureBle_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BmapOverInsecureBle.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.BmapOverInsecureBle.Get", Debug_BmapOverInsecureBle_Get.ID, Debug_BmapOverInsecureBle_Get)
#    obj/CodeGenerator/Python/Debug/BmapOverInsecureBle.py
#    Created 27/07/2023 at 10:10:07 from:
#        Messages = messages/Debug/BmapOverInsecureBle.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BmapOverInsecureBle_SetGet :
    ID = 33186
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 26), ("Operator", 2)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (26, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_SetGet.MSG_OFFSET + Debug_BmapOverInsecureBle_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BmapOverInsecureBle_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BmapOverInsecureBle_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_SetGet.MSG_OFFSET + Debug_BmapOverInsecureBle_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BmapOverInsecureBle_SetGet.ID)
            self.hdr.SetDataLength(Debug_BmapOverInsecureBle_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BmapOverInsecureBle.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetallowInsecureBLE(self):
        """Parameter to allow(1) or disallow(0) BMAP communication over an insecure BLE connection."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BmapOverInsecureBle_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetallowInsecureBLE(self, value):
        """Parameter to allow(1) or disallow(0) BMAP communication over an insecure BLE connection."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BmapOverInsecureBle_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="allowInsecureBLE",type="int",units="",minVal="0",maxVal="255",description="Parameter to allow(1) or disallow(0) BMAP communication over an insecure BLE connection.",get=GetallowInsecureBLE,set=SetallowInsecureBLE,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BmapOverInsecureBle.SetGet", Debug_BmapOverInsecureBle_SetGet.ID, Debug_BmapOverInsecureBle_SetGet)
#    obj/CodeGenerator/Python/Debug/BmapOverInsecureBle.py
#    Created 27/07/2023 at 10:10:07 from:
#        Messages = messages/Debug/BmapOverInsecureBle.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BmapOverInsecureBle_Status :
    ID = 33187
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 26), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (26, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_Status.MSG_OFFSET + Debug_BmapOverInsecureBle_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BmapOverInsecureBle_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BmapOverInsecureBle_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BmapOverInsecureBle_Status.MSG_OFFSET + Debug_BmapOverInsecureBle_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BmapOverInsecureBle_Status.ID)
            self.hdr.SetDataLength(Debug_BmapOverInsecureBle_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BmapOverInsecureBle.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetallowInsecureBLE(self):
        """Parameter indicating the BMAP communication over an insecure BLE connection status (1=allowed, 0=disallowed)"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BmapOverInsecureBle_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetallowInsecureBLE(self, value):
        """Parameter indicating the BMAP communication over an insecure BLE connection status (1=allowed, 0=disallowed)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BmapOverInsecureBle_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="allowInsecureBLE",type="int",units="",minVal="0",maxVal="255",description="Parameter indicating the BMAP communication over an insecure BLE connection status (1=allowed, 0=disallowed)",get=GetallowInsecureBLE,set=SetallowInsecureBLE,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BmapOverInsecureBle.Status", Debug_BmapOverInsecureBle_Status.ID, Debug_BmapOverInsecureBle_Status)
