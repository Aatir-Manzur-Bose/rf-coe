#    obj/CodeGenerator/Python/Debug/UeCommonState.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/UeCommonState.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_UeCommonState_Get :
    ID = 33233
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 29), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (29, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_UeCommonState_Get.MSG_OFFSET + Debug_UeCommonState_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_UeCommonState_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_UeCommonState_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_UeCommonState_Get.MSG_OFFSET + Debug_UeCommonState_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_UeCommonState_Get.ID)
            self.hdr.SetDataLength(Debug_UeCommonState_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.UeCommonState.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.UeCommonState.Get", Debug_UeCommonState_Get.ID, Debug_UeCommonState_Get)
#    obj/CodeGenerator/Python/Debug/UeCommonState.py
#    Created 27/07/2023 at 10:10:21 from:
#        Messages = messages/Debug/UeCommonState.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_UeCommonState_Status :
    ID = 33235
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    UeCommonBudPhysicalStatus = OrderedDict([("UE_PS_NOT_AVAILABLE", 0), ("UE_PS_DONT_CARE", 1), ("UE_IN_CASE", 2), ("UE_ON_BODY", 3), ("UE_ON_TABLE", 4), ("UE_IN_HAND", 5), ("UE_PRESUMED_TRANSITION", 6), ("UE_PRESUMED_INEAR", 7)])
    ReverseUeCommonBudPhysicalStatus = OrderedDict([(0, "UE_PS_NOT_AVAILABLE"), (1, "UE_PS_DONT_CARE"), (2, "UE_IN_CASE"), (3, "UE_ON_BODY"), (4, "UE_ON_TABLE"), (5, "UE_IN_HAND"), (6, "UE_PRESUMED_TRANSITION"), (7, "UE_PRESUMED_INEAR")])
    UeSinkState = OrderedDict([("Limbo", 0), ("Connectable", 1), ("ConnDiscoverable", 2), ("ConnectedToAG", 3), ("OutgoingCallState", 4), ("IncomingCallState", 5), ("ActiveCallSCO", 6), ("TestMode", 7), ("ThreeWayCallWaiting", 8), ("ThreeWayCallHolding", 9), ("ThreeWayCallMultiCall", 10), ("IncomingCallOnHold", 11), ("ActiveCallNoSCO", 12), ("A2dpStreaming", 13), ("LowBattery", 14), ("Aux", 15), ("FactoryTest", 16), ("LanguageSelect", 17), ("Manual", 18), ("Update", 19), ("Reman", 20), ("ShipMode", 21), ("USB", 22), ("AnrOnly", 23), ("ConfigMode", 24), ("NoCallSco", 25), ("Connecting", 26), ("Idle", 125), ("UnInit", 126), ("InValid", 127), ("Reserved1", 253), ("Reserved2", 254), ("Reserved3", 255)])
    ReverseUeSinkState = OrderedDict([(0, "Limbo"), (1, "Connectable"), (2, "ConnDiscoverable"), (3, "ConnectedToAG"), (4, "OutgoingCallState"), (5, "IncomingCallState"), (6, "ActiveCallSCO"), (7, "TestMode"), (8, "ThreeWayCallWaiting"), (9, "ThreeWayCallHolding"), (10, "ThreeWayCallMultiCall"), (11, "IncomingCallOnHold"), (12, "ActiveCallNoSCO"), (13, "A2dpStreaming"), (14, "LowBattery"), (15, "Aux"), (16, "FactoryTest"), (17, "LanguageSelect"), (18, "Manual"), (19, "Update"), (20, "Reman"), (21, "ShipMode"), (22, "USB"), (23, "AnrOnly"), (24, "ConfigMode"), (25, "NoCallSco"), (26, "Connecting"), (125, "Idle"), (126, "UnInit"), (127, "InValid"), (253, "Reserved1"), (254, "Reserved2"), (255, "Reserved3")])
    UePeerSinkState = OrderedDict([("PeerSinkStateOff", 0), ("PeerSinkStateOn", 1), ("PeerSinkStateUnknown", 2)])
    ReverseUePeerSinkState = OrderedDict([(0, "PeerSinkStateOff"), (1, "PeerSinkStateOn"), (2, "PeerSinkStateUnknown")])
    UeAudioState = OrderedDict([("INIT", 0), ("IDLE", 1), ("NotificationPending", 2), ("OOB", 3), ("StartToneSend", 4), ("StartToneEnd", 5), ("NotificationSend", 6), ("NotificationEnd", 7), ("Unknown", 8)])
    ReverseUeAudioState = OrderedDict([(0, "INIT"), (1, "IDLE"), (2, "NotificationPending"), (3, "OOB"), (4, "StartToneSend"), (5, "StartToneEnd"), (6, "NotificationSend"), (7, "NotificationEnd"), (8, "Unknown")])
    UeChargeState = OrderedDict([("Discharging", 0), ("Charging", 1), ("ChargingSuspend", 2)])
    ReverseUeChargeState = OrderedDict([(0, "Discharging"), (1, "Charging"), (2, "ChargingSuspend")])
    B2BConnectState = OrderedDict([("Disconnected", 0), ("Connecting", 1), ("Connected", 2), ("Disconnecting", 3), ("InvalidState", 4)])
    ReverseB2BConnectState = OrderedDict([(0, "Disconnected"), (1, "Connecting"), (2, "Connected"), (3, "Disconnecting"), (4, "InvalidState")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 29), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (29, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_UeCommonState_Status.MSG_OFFSET + Debug_UeCommonState_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_UeCommonState_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_UeCommonState_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_UeCommonState_Status.MSG_OFFSET + Debug_UeCommonState_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_UeCommonState_Status.ID)
            self.hdr.SetDataLength(Debug_UeCommonState_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.UeCommonState.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLocalPhyState(self, enumAsInt=0):
        """Local device physical State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeCommonBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetPeerPhyState(self, enumAsInt=0):
        """Peer device physical State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeCommonBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetLocalSinkState(self, enumAsInt=0):
        """Local device UE sink State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeSinkState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetPeerSinkState(self, enumAsInt=0):
        """Peer device UE sink State"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUePeerSinkState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetLocalBattPercentage(self):
        """Local battery percentage"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetPeerBattPercentage(self):
        """Peer battery percentage"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetLocalAudioState(self, enumAsInt=0):
        """Local audio state"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeAudioState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetPeerAudioState(self, enumAsInt=0):
        """Peer audio state"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 7)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeAudioState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetUeChargingState(self, enumAsInt=0):
        """Local charge state"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 8)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseUeChargeState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetB2BConnection(self, enumAsInt=0):
        """Bud to bud connection state"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = Debug_UeCommonState_Status.ReverseB2BConnectState.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLocalPhyState(self, value):
        """Local device physical State"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeCommonBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetPeerPhyState(self, value):
        """Peer device physical State"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeCommonBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetLocalSinkState(self, value):
        """Local device UE sink State"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeSinkState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetPeerSinkState(self, value):
        """Peer device UE sink State"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UePeerSinkState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetLocalBattPercentage(self, value):
        """Local battery percentage"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetPeerBattPercentage(self, value):
        """Peer battery percentage"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetLocalAudioState(self, value):
        """Local audio state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeAudioState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetPeerAudioState(self, value):
        """Peer audio state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeAudioState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetUeChargingState(self, value):
        """Local charge state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.UeChargeState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetB2BConnection(self, value):
        """Bud to bud connection state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_UeCommonState_Status.B2BConnectState.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_UeCommonState_Status.MSG_OFFSET + 9, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LocalPhyState",type="enumeration",units="",minVal="0",maxVal="255",description="Local device physical State",get=GetLocalPhyState,set=SetLocalPhyState,count=1, bitfieldInfo = [], enum = [UeCommonBudPhysicalStatus, ReverseUeCommonBudPhysicalStatus]),\
        FieldInfo(name="PeerPhyState",type="enumeration",units="",minVal="0",maxVal="255",description="Peer device physical State",get=GetPeerPhyState,set=SetPeerPhyState,count=1, bitfieldInfo = [], enum = [UeCommonBudPhysicalStatus, ReverseUeCommonBudPhysicalStatus]),\
        FieldInfo(name="LocalSinkState",type="enumeration",units="",minVal="0",maxVal="255",description="Local device UE sink State",get=GetLocalSinkState,set=SetLocalSinkState,count=1, bitfieldInfo = [], enum = [UeSinkState, ReverseUeSinkState]),\
        FieldInfo(name="PeerSinkState",type="enumeration",units="",minVal="0",maxVal="255",description="Peer device UE sink State",get=GetPeerSinkState,set=SetPeerSinkState,count=1, bitfieldInfo = [], enum = [UePeerSinkState, ReverseUePeerSinkState]),\
        FieldInfo(name="LocalBattPercentage",type="int",units="",minVal="0",maxVal="255",description="Local battery percentage",get=GetLocalBattPercentage,set=SetLocalBattPercentage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PeerBattPercentage",type="int",units="",minVal="0",maxVal="255",description="Peer battery percentage",get=GetPeerBattPercentage,set=SetPeerBattPercentage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LocalAudioState",type="enumeration",units="",minVal="0",maxVal="255",description="Local audio state",get=GetLocalAudioState,set=SetLocalAudioState,count=1, bitfieldInfo = [], enum = [UeAudioState, ReverseUeAudioState]),\
        FieldInfo(name="PeerAudioState",type="enumeration",units="",minVal="0",maxVal="255",description="Peer audio state",get=GetPeerAudioState,set=SetPeerAudioState,count=1, bitfieldInfo = [], enum = [UeAudioState, ReverseUeAudioState]),\
        FieldInfo(name="UeChargingState",type="enumeration",units="",minVal="0",maxVal="255",description="Local charge state",get=GetUeChargingState,set=SetUeChargingState,count=1, bitfieldInfo = [], enum = [UeChargeState, ReverseUeChargeState]),\
        FieldInfo(name="B2BConnection",type="enumeration",units="",minVal="0",maxVal="255",description="Bud to bud connection state",get=GetB2BConnection,set=SetB2BConnection,count=1, bitfieldInfo = [], enum = [B2BConnectState, ReverseB2BConnectState])\
    ]

Messaging.Register("Debug.UeCommonState.Status", Debug_UeCommonState_Status.ID, Debug_UeCommonState_Status)
