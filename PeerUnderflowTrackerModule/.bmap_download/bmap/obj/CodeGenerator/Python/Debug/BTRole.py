#    obj/CodeGenerator/Python/Debug/BTRole.py
#    Created 27/07/2023 at 10:10:08 from:
#        Messages = messages/Debug/BTRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BTRole_Get :
    ID = 33569
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 50), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (50, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BTRole_Get.MSG_OFFSET + Debug_BTRole_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BTRole_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BTRole_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BTRole_Get.MSG_OFFSET + Debug_BTRole_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BTRole_Get.ID)
            self.hdr.SetDataLength(Debug_BTRole_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BTRole.Get"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of connection"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Get.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of connection"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Get.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of connection",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BTRole.Get", Debug_BTRole_Get.ID, Debug_BTRole_Get)
#    obj/CodeGenerator/Python/Debug/BTRole.py
#    Created 27/07/2023 at 10:10:08 from:
#        Messages = messages/Debug/BTRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BTRole_Status :
    ID = 33571
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BTRoleType = OrderedDict([("Central", 0), ("Peripheral", 1), ("Unknown", 2)])
    ReverseBTRoleType = OrderedDict([(0, "Central"), (1, "Peripheral"), (2, "Unknown")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 50), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (50, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BTRole_Status.MSG_OFFSET + Debug_BTRole_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BTRole_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BTRole_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BTRole_Status.MSG_OFFSET + Debug_BTRole_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BTRole_Status.ID)
            self.hdr.SetDataLength(Debug_BTRole_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BTRole.Status"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of device"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentRole(self, enumAsInt=0):
        """Role in piconet connection of device with given MAC address."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Status.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Debug_BTRole_Status.ReverseBTRoleType.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentRole(self, value):
        """Role in piconet connection of device with given MAC address."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_BTRole_Status.BTRoleType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentRole",type="enumeration",units="",minVal="0",maxVal="255",description="Role in piconet connection of device with given MAC address.",get=GetCurrentRole,set=SetCurrentRole,count=1, bitfieldInfo = [], enum = [BTRoleType, ReverseBTRoleType])\
    ]

Messaging.Register("Debug.BTRole.Status", Debug_BTRole_Status.ID, Debug_BTRole_Status)
#    obj/CodeGenerator/Python/Debug/BTRole.py
#    Created 27/07/2023 at 10:10:08 from:
#        Messages = messages/Debug/BTRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BTRole_Start :
    ID = 33573
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BTRoleType = OrderedDict([("Central", 0), ("Peripheral", 1), ("Unknown", 2)])
    ReverseBTRoleType = OrderedDict([(0, "Central"), (1, "Peripheral"), (2, "Unknown")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 50), ("Operator", 5)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (50, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BTRole_Start.MSG_OFFSET + Debug_BTRole_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BTRole_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BTRole_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BTRole_Start.MSG_OFFSET + Debug_BTRole_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BTRole_Start.ID)
            self.hdr.SetDataLength(Debug_BTRole_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BTRole.Start"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of device"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetTargetRole(self, enumAsInt=0):
        """Initiate bluetooth link role switch to specified role with connection of device with given MAC address."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Start.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Debug_BTRole_Start.ReverseBTRoleType.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetTargetRole(self, value):
        """Initiate bluetooth link role switch to specified role with connection of device with given MAC address."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_BTRole_Start.BTRoleType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Start.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetRole",type="enumeration",units="",minVal="0",maxVal="255",description="Initiate bluetooth link role switch to specified role with connection of device with given MAC address.",get=GetTargetRole,set=SetTargetRole,count=1, bitfieldInfo = [], enum = [BTRoleType, ReverseBTRoleType])\
    ]

Messaging.Register("Debug.BTRole.Start", Debug_BTRole_Start.ID, Debug_BTRole_Start)
#    obj/CodeGenerator/Python/Debug/BTRole.py
#    Created 27/07/2023 at 10:10:08 from:
#        Messages = messages/Debug/BTRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BTRole_Processing :
    ID = 33575
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 50), ("Operator", 7)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (50, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BTRole_Processing.MSG_OFFSET + Debug_BTRole_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BTRole_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BTRole_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BTRole_Processing.MSG_OFFSET + Debug_BTRole_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BTRole_Processing.ID)
            self.hdr.SetDataLength(Debug_BTRole_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BTRole.Processing"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of device"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Processing.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Processing.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.BTRole.Processing", Debug_BTRole_Processing.ID, Debug_BTRole_Processing)
#    obj/CodeGenerator/Python/Debug/BTRole.py
#    Created 27/07/2023 at 10:10:08 from:
#        Messages = messages/Debug/BTRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_BTRole_Result :
    ID = 33574
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BTRoleType = OrderedDict([("Central", 0), ("Peripheral", 1), ("Unknown", 2)])
    ReverseBTRoleType = OrderedDict([(0, "Central"), (1, "Peripheral"), (2, "Unknown")])
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 50), ("Operator", 6)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (50, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_BTRole_Result.MSG_OFFSET + Debug_BTRole_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_BTRole_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_BTRole_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_BTRole_Result.MSG_OFFSET + Debug_BTRole_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_BTRole_Result.ID)
            self.hdr.SetDataLength(Debug_BTRole_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.BTRole.Result"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of device"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Result.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentRole(self, enumAsInt=0):
        """Role in piconet connection of device with given MAC address."""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_BTRole_Result.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Debug_BTRole_Result.ReverseBTRoleType.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Result.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentRole(self, value):
        """Role in piconet connection of device with given MAC address."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Debug_BTRole_Result.BTRoleType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_BTRole_Result.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentRole",type="enumeration",units="",minVal="0",maxVal="255",description="Role in piconet connection of device with given MAC address.",get=GetCurrentRole,set=SetCurrentRole,count=1, bitfieldInfo = [], enum = [BTRoleType, ReverseBTRoleType])\
    ]

Messaging.Register("Debug.BTRole.Result", Debug_BTRole_Result.ID, Debug_BTRole_Result)
