#    obj/CodeGenerator/Python/Debug/WUW.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/Debug/WUW.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_WUW_Get :
    ID = 33057
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 18), ("Operator", 1)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (18, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_WUW_Get.MSG_OFFSET + Debug_WUW_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_WUW_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_WUW_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_WUW_Get.MSG_OFFSET + Debug_WUW_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_WUW_Get.ID)
            self.hdr.SetDataLength(Debug_WUW_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.WUW.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Debug.WUW.Get", Debug_WUW_Get.ID, Debug_WUW_Get)
#    obj/CodeGenerator/Python/Debug/WUW.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/Debug/WUW.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Debug_WUW_Status :
    ID = 33059
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 8), ("Function", 18), ("Operator", 3)])
    ReverseIDs = OrderedDict([(8, "FunctionBlock"), (18, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Debug_WUW_Status.MSG_OFFSET + Debug_WUW_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Debug_WUW_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Debug_WUW_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Debug_WUW_Status.MSG_OFFSET + Debug_WUW_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Debug_WUW_Status.ID)
            self.hdr.SetDataLength(Debug_WUW_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Debug.WUW.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetWUWVPAStatus(self):
        """Bitfield of WUW VPA current status"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSelectedWUWVPA(self):
        """Currently Selected WUW VPA (0x7F == none). See VPA fBlock for details."""
        value = (self.GetWUWVPAStatus() >> 0) & 0x7f
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetIsConnected(self):
        """VPA Connected (1=connected, 0=disconnected)."""
        value = (self.GetWUWVPAStatus() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetWUWStatus(self):
        """Bitfield of WUW current status"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('VPALangID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetSelectedVPALanguage(self):
        """Currently configured VPA Language for current VPA WUW. See VPA fBlock for details."""
        value = (self.GetWUWStatus() >> 0) & 0x7f
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetIsWuwEnabled(self):
        """WUW Enabled (1=enabled, 0=disabled)."""
        value = (self.GetWUWStatus() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetWUWDSPScore(self):
        """WUW Score and WUW DSP operation status."""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('uint16')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetWUWScore(self):
        """WUW confidence score in {0,1000} -  Only for async status"""
        value = (self.GetWUWDSPScore() >> 0) & 0x7fff
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetIsWUWDSPOperational(self):
        """WUW DSP Operation (1=running, 0=not running) - Only for get responses."""
        value = (self.GetWUWDSPScore() >> 15) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetWUWThreshold(self):
        """WUW Score threshold"""
        value = struct.unpack_from('>H', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('WUWErrorID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetWUWErrorMask(self):
        """Error mask for WUW voice queries"""
        value = struct.unpack_from('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetWUWVPAStatus(self, value):
        """Bitfield of WUW VPA current status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSelectedWUWVPA(self, value):
        """Currently Selected WUW VPA (0x7F == none). See VPA fBlock for details."""
        tmp = min(max(value, 0), 127)
        self.SetWUWVPAStatus((self.GetWUWVPAStatus() & ~(0x7f << 0)) | ((tmp & 0x7f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetIsConnected(self, value):
        """VPA Connected (1=connected, 0=disconnected)."""
        tmp = min(max(value, 0), 1)
        self.SetWUWVPAStatus((self.GetWUWVPAStatus() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetWUWStatus(self, value):
        """Bitfield of WUW current status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('VPALangID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetSelectedVPALanguage(self, value):
        """Currently configured VPA Language for current VPA WUW. See VPA fBlock for details."""
        tmp = min(max(value, 0), 127)
        self.SetWUWStatus((self.GetWUWStatus() & ~(0x7f << 0)) | ((tmp & 0x7f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetIsWuwEnabled(self, value):
        """WUW Enabled (1=enabled, 0=disabled)."""
        tmp = min(max(value, 0), 1)
        self.SetWUWStatus((self.GetWUWStatus() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetWUWDSPScore(self, value):
        """WUW Score and WUW DSP operation status."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('uint16')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetWUWScore(self, value):
        """WUW confidence score in {0,1000} -  Only for async status"""
        tmp = min(max(value, 0), 32767)
        self.SetWUWDSPScore((self.GetWUWDSPScore() & ~(0x7fff << 0)) | ((tmp & 0x7fff) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetIsWUWDSPOperational(self, value):
        """WUW DSP Operation (1=running, 0=not running) - Only for get responses."""
        tmp = min(max(value, 0), 1)
        self.SetWUWDSPScore((self.GetWUWDSPScore() & ~(0x1 << 15)) | ((tmp & 0x1) << 15))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetWUWThreshold(self, value):
        """WUW Score threshold"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('WUWErrorID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetWUWErrorMask(self, value):
        """Error mask for WUW voice queries"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Debug_WUW_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="WUWVPAStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of WUW VPA current status",get=GetWUWVPAStatus,set=SetWUWVPAStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SelectedWUWVPA",type="int",units="WUWID",minVal="0",maxVal="127",description="Currently Selected WUW VPA (0x7F == none). See VPA fBlock for details.",get=GetSelectedWUWVPA,set=SetSelectedWUWVPA, enum = []),\
            BitFieldInfo(name="IsConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="VPA Connected (1=connected, 0=disconnected).",get=GetIsConnected,set=SetIsConnected, enum = [])], enum = []),\
        FieldInfo(name="WUWStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of WUW current status",get=GetWUWStatus,set=SetWUWStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SelectedVPALanguage",type="int",units="VPALangID",minVal="0",maxVal="127",description="Currently configured VPA Language for current VPA WUW. See VPA fBlock for details.",get=GetSelectedVPALanguage,set=SetSelectedVPALanguage, enum = []),\
            BitFieldInfo(name="IsWuwEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="WUW Enabled (1=enabled, 0=disabled).",get=GetIsWuwEnabled,set=SetIsWuwEnabled, enum = [])], enum = []),\
        FieldInfo(name="WUWDSPScore",type="int",units="",minVal="0",maxVal="65535",description="WUW Score and WUW DSP operation status.",get=GetWUWDSPScore,set=SetWUWDSPScore,count=1, bitfieldInfo = [\
            BitFieldInfo(name="WUWScore",type="int",units="uint16",minVal="0",maxVal="32767",description="WUW confidence score in {0,1000} -  Only for async status",get=GetWUWScore,set=SetWUWScore, enum = []),\
            BitFieldInfo(name="IsWUWDSPOperational",type="int",units="Boolean",minVal="0",maxVal="1",description="WUW DSP Operation (1=running, 0=not running) - Only for get responses.",get=GetIsWUWDSPOperational,set=SetIsWUWDSPOperational, enum = [])], enum = []),\
        FieldInfo(name="WUWThreshold",type="int",units="",minVal="0",maxVal="65535",description="WUW Score threshold",get=GetWUWThreshold,set=SetWUWThreshold,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WUWErrorMask",type="int",units="WUWErrorID",minVal="0",maxVal="255",description="Error mask for WUW voice queries",get=GetWUWErrorMask,set=SetWUWErrorMask,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Debug.WUW.Status", Debug_WUW_Status.ID, Debug_WUW_Status)
