#    obj/CodeGenerator/Python/VPA/VPALanguage.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/VPALanguage.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_VPALanguage_Get :
    ID = 65601
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_VPALanguage_Get.MSG_OFFSET + VPA_VPALanguage_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_VPALanguage_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_VPALanguage_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_VPALanguage_Get.MSG_OFFSET + VPA_VPALanguage_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_VPALanguage_Get.ID)
            self.hdr.SetDataLength(VPA_VPALanguage_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.VPALanguage.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("VPA.VPALanguage.Get", VPA_VPALanguage_Get.ID, VPA_VPALanguage_Get)
#    obj/CodeGenerator/Python/VPA/VPALanguage.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/VPALanguage.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_VPALanguage_SetGet :
    ID = 65602
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VPALangID = OrderedDict([("en-US", 0), ("en-GB", 1), ("de-DE", 2), ("fr-CA", 3), ("fr-FR", 4), ("it-IT", 5), ("ja-JP", 6), ("en-AU", 7), ("en-CA", 8), ("es-ES", 9), ("es-MX", 10), ("en-IN", 11)])
    ReverseVPALangID = OrderedDict([(0, "en-US"), (1, "en-GB"), (2, "de-DE"), (3, "fr-CA"), (4, "fr-FR"), (5, "it-IT"), (6, "ja-JP"), (7, "en-AU"), (8, "en-CA"), (9, "es-ES"), (10, "es-MX"), (11, "en-IN")])
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 4), ("Operator", 2)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (4, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_VPALanguage_SetGet.MSG_OFFSET + VPA_VPALanguage_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_VPALanguage_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_VPALanguage_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_VPALanguage_SetGet.MSG_OFFSET + VPA_VPALanguage_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_VPALanguage_SetGet.ID)
            self.hdr.SetDataLength(VPA_VPALanguage_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.VPALanguage.SetGet"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSelectedVPALanguage(self, enumAsInt=0):
        """Set/Get VPA Language of current VPA WUW"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPALanguage_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = VPA_VPALanguage_SetGet.ReverseVPALangID.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSelectedVPALanguage(self, value):
        """Set/Get VPA Language of current VPA WUW"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_VPALanguage_SetGet.VPALangID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPALanguage_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SelectedVPALanguage",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Set/Get VPA Language of current VPA WUW",get=GetSelectedVPALanguage,set=SetSelectedVPALanguage,count=1, bitfieldInfo = [], enum = [VPALangID, ReverseVPALangID])\
    ]

Messaging.Register("VPA.VPALanguage.SetGet", VPA_VPALanguage_SetGet.ID, VPA_VPALanguage_SetGet)
#    obj/CodeGenerator/Python/VPA/VPALanguage.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/VPALanguage.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_VPALanguage_Status :
    ID = 65603
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VPALangID = OrderedDict([("en-US", 0), ("en-GB", 1), ("de-DE", 2), ("fr-CA", 3), ("fr-FR", 4), ("it-IT", 5), ("ja-JP", 6), ("en-AU", 7), ("en-CA", 8), ("es-ES", 9), ("es-MX", 10), ("en-IN", 11)])
    ReverseVPALangID = OrderedDict([(0, "en-US"), (1, "en-GB"), (2, "de-DE"), (3, "fr-CA"), (4, "fr-FR"), (5, "it-IT"), (6, "ja-JP"), (7, "en-AU"), (8, "en-CA"), (9, "es-ES"), (10, "es-MX"), (11, "en-IN")])
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_VPALanguage_Status.MSG_OFFSET + VPA_VPALanguage_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_VPALanguage_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_VPALanguage_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_VPALanguage_Status.MSG_OFFSET + VPA_VPALanguage_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_VPALanguage_Status.ID)
            self.hdr.SetDataLength(VPA_VPALanguage_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.VPALanguage.Status"
    # Accessors
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSelectedWUWVPA(self):
        """Currently Selected VPA WUW (0x3F == none)"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSelectedVPALanguage(self, enumAsInt=0):
        """Currently configured VPA Language for current VPA WUW"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = VPA_VPALanguage_Status.ReverseVPALangID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedVPALanguage(self):
        """Bitfield of supported VPA Languages (MSB first) for current VPA WUW"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSelectedWUWVPA(self, value):
        """Currently Selected VPA WUW (0x3F == none)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSelectedVPALanguage(self, value):
        """Currently configured VPA Language for current VPA WUW"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_VPALanguage_Status.VPALangID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedVPALanguage(self, value):
        """Bitfield of supported VPA Languages (MSB first) for current VPA WUW"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPALanguage_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SelectedWUWVPA",type="int",units="WUWID",minVal="0",maxVal="255",description="Currently Selected VPA WUW (0x3F == none)",get=GetSelectedWUWVPA,set=SetSelectedWUWVPA,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SelectedVPALanguage",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Currently configured VPA Language for current VPA WUW",get=GetSelectedVPALanguage,set=SetSelectedVPALanguage,count=1, bitfieldInfo = [], enum = [VPALangID, ReverseVPALangID]),\
        FieldInfo(name="SupportedVPALanguage",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported VPA Languages (MSB first) for current VPA WUW",get=GetSupportedVPALanguage,set=SetSupportedVPALanguage,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("VPA.VPALanguage.Status", VPA_VPALanguage_Status.ID, VPA_VPALanguage_Status)
#    obj/CodeGenerator/Python/VPA/VPALanguage.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/VPALanguage.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_VPALanguage_Error :
    ID = 65604
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 4), ("Operator", 4)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (4, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_VPALanguage_Error.MSG_OFFSET + VPA_VPALanguage_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_VPALanguage_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_VPALanguage_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_VPALanguage_Error.MSG_OFFSET + VPA_VPALanguage_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_VPALanguage_Error.ID)
            self.hdr.SetDataLength(VPA_VPALanguage_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.VPALanguage.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self):
        """InvalidData if setting a non-supported language to selected VPA"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPALanguage_Error.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """InvalidData if setting a non-supported language to selected VPA"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPALanguage_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="int",units="",minVal="0",maxVal="255",description="InvalidData if setting a non-supported language to selected VPA",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("VPA.VPALanguage.Error", VPA_VPALanguage_Error.ID, VPA_VPALanguage_Error)
