#    obj/CodeGenerator/Python/VPA/PushToTalkVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/PushToTalkVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_PushToTalkVPA_Get :
    ID = 65569
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_Get.MSG_OFFSET + VPA_PushToTalkVPA_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_PushToTalkVPA_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_PushToTalkVPA_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_Get.MSG_OFFSET + VPA_PushToTalkVPA_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_PushToTalkVPA_Get.ID)
            self.hdr.SetDataLength(VPA_PushToTalkVPA_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.PushToTalkVPA.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("VPA.PushToTalkVPA.Get", VPA_PushToTalkVPA_Get.ID, VPA_PushToTalkVPA_Get)
#    obj/CodeGenerator/Python/VPA/PushToTalkVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/PushToTalkVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_PushToTalkVPA_SetGet :
    ID = 65570
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VPAID = OrderedDict([("GoogleAssistant", 0), ("Alexa", 1), ("Native", 2), ("Xiaowei", 3), ("QQMusic", 4), ("None", 127)])
    ReverseVPAID = OrderedDict([(0, "GoogleAssistant"), (1, "Alexa"), (2, "Native"), (3, "Xiaowei"), (4, "QQMusic"), (127, "None")])
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 2), ("Operator", 2)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (2, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_SetGet.MSG_OFFSET + VPA_PushToTalkVPA_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_PushToTalkVPA_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_PushToTalkVPA_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_SetGet.MSG_OFFSET + VPA_PushToTalkVPA_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_PushToTalkVPA_SetGet.ID)
            self.hdr.SetDataLength(VPA_PushToTalkVPA_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.PushToTalkVPA.SetGet"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSelectedPTTVPA(self, enumAsInt=0):
        """Currently Selected PTT VPA (0x7F == none)."""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_PushToTalkVPA_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = VPA_PushToTalkVPA_SetGet.ReverseVPAID.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSelectedPTTVPA(self, value):
        """Currently Selected PTT VPA (0x7F == none)."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_PushToTalkVPA_SetGet.VPAID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_PushToTalkVPA_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SelectedPTTVPA",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Currently Selected PTT VPA (0x7F == none).",get=GetSelectedPTTVPA,set=SetSelectedPTTVPA,count=1, bitfieldInfo = [], enum = [VPAID, ReverseVPAID])\
    ]

Messaging.Register("VPA.PushToTalkVPA.SetGet", VPA_PushToTalkVPA_SetGet.ID, VPA_PushToTalkVPA_SetGet)
#    obj/CodeGenerator/Python/VPA/PushToTalkVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/PushToTalkVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_PushToTalkVPA_Status :
    ID = 65571
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VPAID = OrderedDict([("GoogleAssistant", 0), ("Alexa", 1), ("Native", 2), ("Xiaowei", 3), ("QQMusic", 4), ("None", 127)])
    ReverseVPAID = OrderedDict([(0, "GoogleAssistant"), (1, "Alexa"), (2, "Native"), (3, "Xiaowei"), (4, "QQMusic"), (127, "None")])
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_Status.MSG_OFFSET + VPA_PushToTalkVPA_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_PushToTalkVPA_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_PushToTalkVPA_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_PushToTalkVPA_Status.MSG_OFFSET + VPA_PushToTalkVPA_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_PushToTalkVPA_Status.ID)
            self.hdr.SetDataLength(VPA_PushToTalkVPA_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.PushToTalkVPA.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPTTVPAStatus(self):
        """Bitfield of PTT VPA current status"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_PushToTalkVPA_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSelectedPTTVPA(self, enumAsInt=0):
        """Currently Selected PTT VPA (0x7F == none)."""
        value = (self.GetPTTVPAStatus() >> 0) & 0x7f
        if not enumAsInt:
            value = VPA_PushToTalkVPA_Status.ReverseVPAID.get(value, value)
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetIsConnected(self):
        """VPA Connected (1=connected, 0=disconnected)."""
        value = (self.GetPTTVPAStatus() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedPTTVPA(self):
        """Bitfield of supported PTT VPAs (MSB first)"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_PushToTalkVPA_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPTTVPAStatus(self, value):
        """Bitfield of PTT VPA current status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_PushToTalkVPA_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSelectedPTTVPA(self, value):
        """Currently Selected PTT VPA (0x7F == none)."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_PushToTalkVPA_Status.VPAID.get(value, defaultValue)
        tmp = min(max(value, 0), 127)
        self.SetPTTVPAStatus((self.GetPTTVPAStatus() & ~(0x7f << 0)) | ((tmp & 0x7f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetIsConnected(self, value):
        """VPA Connected (1=connected, 0=disconnected)."""
        tmp = min(max(value, 0), 1)
        self.SetPTTVPAStatus((self.GetPTTVPAStatus() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedPTTVPA(self, value):
        """Bitfield of supported PTT VPAs (MSB first)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_PushToTalkVPA_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PTTVPAStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of PTT VPA current status",get=GetPTTVPAStatus,set=SetPTTVPAStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SelectedPTTVPA",type="enumeration",units="Enum",minVal="0",maxVal="127",description="Currently Selected PTT VPA (0x7F == none).",get=GetSelectedPTTVPA,set=SetSelectedPTTVPA, enum = [VPAID, ReverseVPAID]),\
            BitFieldInfo(name="IsConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="VPA Connected (1=connected, 0=disconnected).",get=GetIsConnected,set=SetIsConnected, enum = [])], enum = []),\
        FieldInfo(name="SupportedPTTVPA",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported PTT VPAs (MSB first)",get=GetSupportedPTTVPA,set=SetSupportedPTTVPA,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("VPA.PushToTalkVPA.Status", VPA_PushToTalkVPA_Status.ID, VPA_PushToTalkVPA_Status)
