#    obj/CodeGenerator/Python/VPA/VPATrigger.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/VPATrigger.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_VPATrigger_Status :
    ID = 65619
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VPAID = OrderedDict([("GoogleAssistant", 0), ("Alexa", 1), ("Native", 2), ("Xiaowei", 3), ("QQMusic", 4), ("None", 127)])
    ReverseVPAID = OrderedDict([(0, "GoogleAssistant"), (1, "Alexa"), (2, "Native"), (3, "Xiaowei"), (4, "QQMusic"), (127, "None")])
    VPATrigID = OrderedDict([("VPA not triggered", 0), ("Button press", 1), ("Wake Up Word", 2), ("Received Command from app", 3), ("Fetch Notification", 4)])
    ReverseVPATrigID = OrderedDict([(0, "VPA not triggered"), (1, "Button press"), (2, "Wake Up Word"), (3, "Received Command from app"), (4, "Fetch Notification")])
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 5), ("Operator", 3)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (5, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_VPATrigger_Status.MSG_OFFSET + VPA_VPATrigger_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_VPATrigger_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_VPATrigger_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_VPATrigger_Status.MSG_OFFSET + VPA_VPATrigger_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_VPATrigger_Status.ID)
            self.hdr.SetDataLength(VPA_VPATrigger_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.VPATrigger.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetVPATrigID(self, enumAsInt=0):
        """VPA trigger type ID"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPATrigger_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = VPA_VPATrigger_Status.ReverseVPATrigID.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetVPAID(self, enumAsInt=0):
        """VPA ID"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_VPATrigger_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = VPA_VPATrigger_Status.ReverseVPAID.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetVPATrigID(self, value):
        """VPA trigger type ID"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_VPATrigger_Status.VPATrigID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPATrigger_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetVPAID(self, value):
        """VPA ID"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = VPA_VPATrigger_Status.VPAID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_VPATrigger_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="VPATrigID",type="enumeration",units="Enum",minVal="0",maxVal="255",description="VPA trigger type ID",get=GetVPATrigID,set=SetVPATrigID,count=1, bitfieldInfo = [], enum = [VPATrigID, ReverseVPATrigID]),\
        FieldInfo(name="VPAID",type="enumeration",units="Enum",minVal="0",maxVal="255",description="VPA ID",get=GetVPAID,set=SetVPAID,count=1, bitfieldInfo = [], enum = [VPAID, ReverseVPAID])\
    ]

Messaging.Register("VPA.VPATrigger.Status", VPA_VPATrigger_Status.ID, VPA_VPATrigger_Status)
