#    obj/CodeGenerator/Python/VPA/WakeUpWordVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/WakeUpWordVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_WakeUpWordVPA_Get :
    ID = 65585
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_Get.MSG_OFFSET + VPA_WakeUpWordVPA_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_WakeUpWordVPA_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_WakeUpWordVPA_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_Get.MSG_OFFSET + VPA_WakeUpWordVPA_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_WakeUpWordVPA_Get.ID)
            self.hdr.SetDataLength(VPA_WakeUpWordVPA_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.WakeUpWordVPA.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("VPA.WakeUpWordVPA.Get", VPA_WakeUpWordVPA_Get.ID, VPA_WakeUpWordVPA_Get)
#    obj/CodeGenerator/Python/VPA/WakeUpWordVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/WakeUpWordVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_WakeUpWordVPA_SetGet :
    ID = 65586
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 3), ("Operator", 2)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (3, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_SetGet.MSG_OFFSET + VPA_WakeUpWordVPA_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_WakeUpWordVPA_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_WakeUpWordVPA_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_SetGet.MSG_OFFSET + VPA_WakeUpWordVPA_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_WakeUpWordVPA_SetGet.ID)
            self.hdr.SetDataLength(VPA_WakeUpWordVPA_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.WakeUpWordVPA.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetWUWVPASetGet(self):
        """Set/Get WUW VPA"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_WakeUpWordVPA_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSelectedWUWVPA(self):
        """Currently Selected WUW VPA (0x3F == none)."""
        value = (self.GetWUWVPASetGet() >> 0) & 0x3f
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetIsEnabled(self):
        """WUW Enabled (1=enabled, 0=disabled)."""
        value = (self.GetWUWVPASetGet() >> 6) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetWUWVPASetGet(self, value):
        """Set/Get WUW VPA"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_WakeUpWordVPA_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSelectedWUWVPA(self, value):
        """Currently Selected WUW VPA (0x3F == none)."""
        tmp = min(max(value, 0), 63)
        self.SetWUWVPASetGet((self.GetWUWVPASetGet() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetIsEnabled(self, value):
        """WUW Enabled (1=enabled, 0=disabled)."""
        tmp = min(max(value, 0), 1)
        self.SetWUWVPASetGet((self.GetWUWVPASetGet() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="WUWVPASetGet",type="int",units="",minVal="0",maxVal="255",description="Set/Get WUW VPA",get=GetWUWVPASetGet,set=SetWUWVPASetGet,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SelectedWUWVPA",type="int",units="WUWID",minVal="0",maxVal="63",description="Currently Selected WUW VPA (0x3F == none).",get=GetSelectedWUWVPA,set=SetSelectedWUWVPA, enum = []),\
            BitFieldInfo(name="IsEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="WUW Enabled (1=enabled, 0=disabled).",get=GetIsEnabled,set=SetIsEnabled, enum = [])], enum = [])\
    ]

Messaging.Register("VPA.WakeUpWordVPA.SetGet", VPA_WakeUpWordVPA_SetGet.ID, VPA_WakeUpWordVPA_SetGet)
#    obj/CodeGenerator/Python/VPA/WakeUpWordVPA.py
#    Created 27/07/2023 at 10:11:18 from:
#        Messages = messages/VPA/WakeUpWordVPA.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class VPA_WakeUpWordVPA_Status :
    ID = 65587
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 16), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(16, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_Status.MSG_OFFSET + VPA_WakeUpWordVPA_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, VPA_WakeUpWordVPA_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, VPA_WakeUpWordVPA_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(VPA_WakeUpWordVPA_Status.MSG_OFFSET + VPA_WakeUpWordVPA_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(VPA_WakeUpWordVPA_Status.ID)
            self.hdr.SetDataLength(VPA_WakeUpWordVPA_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "VPA.WakeUpWordVPA.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetWUWVPAStatus(self):
        """Bitfield of WUW VPA current status"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_WakeUpWordVPA_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSelectedWUWVPA(self):
        """Currently Selected WUW VPA (0x3F == none)."""
        value = (self.GetWUWVPAStatus() >> 0) & 0x3f
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetIsEnabled(self):
        """WUW Enabled (1=enabled, 0=disabled)."""
        value = (self.GetWUWVPAStatus() >> 6) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetIsReadOnly(self):
        """WUW Read-Only (1=read-only, 0=read/write)."""
        value = (self.GetWUWVPAStatus() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedWUWVPA(self):
        """Bitfield of supported WUWs (MSB first)"""
        value = struct.unpack_from('B', self.rawBuffer(), VPA_WakeUpWordVPA_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetWUWVPAStatus(self, value):
        """Bitfield of WUW VPA current status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_WakeUpWordVPA_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('WUWID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSelectedWUWVPA(self, value):
        """Currently Selected WUW VPA (0x3F == none)."""
        tmp = min(max(value, 0), 63)
        self.SetWUWVPAStatus((self.GetWUWVPAStatus() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetIsEnabled(self, value):
        """WUW Enabled (1=enabled, 0=disabled)."""
        tmp = min(max(value, 0), 1)
        self.SetWUWVPAStatus((self.GetWUWVPAStatus() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetIsReadOnly(self, value):
        """WUW Read-Only (1=read-only, 0=read/write)."""
        tmp = min(max(value, 0), 1)
        self.SetWUWVPAStatus((self.GetWUWVPAStatus() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedWUWVPA(self, value):
        """Bitfield of supported WUWs (MSB first)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), VPA_WakeUpWordVPA_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="WUWVPAStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of WUW VPA current status",get=GetWUWVPAStatus,set=SetWUWVPAStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SelectedWUWVPA",type="int",units="WUWID",minVal="0",maxVal="63",description="Currently Selected WUW VPA (0x3F == none).",get=GetSelectedWUWVPA,set=SetSelectedWUWVPA, enum = []),\
            BitFieldInfo(name="IsEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="WUW Enabled (1=enabled, 0=disabled).",get=GetIsEnabled,set=SetIsEnabled, enum = []),\
            BitFieldInfo(name="IsReadOnly",type="int",units="Boolean",minVal="0",maxVal="1",description="WUW Read-Only (1=read-only, 0=read/write).",get=GetIsReadOnly,set=SetIsReadOnly, enum = [])], enum = []),\
        FieldInfo(name="SupportedWUWVPA",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported WUWs (MSB first)",get=GetSupportedWUWVPA,set=SetSupportedWUWVPA,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("VPA.WakeUpWordVPA.Status", VPA_WakeUpWordVPA_Status.ID, VPA_WakeUpWordVPA_Status)
