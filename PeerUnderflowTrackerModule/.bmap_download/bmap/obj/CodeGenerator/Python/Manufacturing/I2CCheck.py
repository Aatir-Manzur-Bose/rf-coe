#    obj/CodeGenerator/Python/Manufacturing/I2CCheck.py
#    Created 27/07/2023 at 10:10:52 from:
#        Messages = messages/Manufacturing/I2CCheck.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_I2CCheck_Set :
    ID = 94640
    SIZE = 43
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 27), ("Operator", 0)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (27, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Set.MSG_OFFSET + Manufacturing_I2CCheck_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_I2CCheck_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_I2CCheck_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Set.MSG_OFFSET + Manufacturing_I2CCheck_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_I2CCheck_Set.ID)
            self.hdr.SetDataLength(Manufacturing_I2CCheck_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.I2CCheck.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetDevice(self):
        """I2C device address (not bus address)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetWriteLength(self):
        """Number of bytes to write"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(40)
    def GetData(self, idx):
        """Data to write to the I2C device"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 3+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetDevice(self, value):
        """I2C device address (not bus address)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetWriteLength(self, value):
        """Number of bytes to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(40)
    def SetData(self, value, idx):
        """Data to write to the I2C device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Set.MSG_OFFSET + 3+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Device",type="int",units="",minVal="0",maxVal="65535",description="I2C device address (not bus address)",get=GetDevice,set=SetDevice,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WriteLength",type="int",units="",minVal="0",maxVal="255",description="Number of bytes to write",get=GetWriteLength,set=SetWriteLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data to write to the I2C device",get=GetData,set=SetData,count=40, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.I2CCheck.Set", Manufacturing_I2CCheck_Set.ID, Manufacturing_I2CCheck_Set)
#    obj/CodeGenerator/Python/Manufacturing/I2CCheck.py
#    Created 27/07/2023 at 10:10:52 from:
#        Messages = messages/Manufacturing/I2CCheck.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_I2CCheck_SetGet :
    ID = 94642
    SIZE = 44
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 27), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (27, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_SetGet.MSG_OFFSET + Manufacturing_I2CCheck_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_I2CCheck_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_I2CCheck_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_SetGet.MSG_OFFSET + Manufacturing_I2CCheck_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_I2CCheck_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_I2CCheck_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.I2CCheck.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetDevice(self):
        """I2C device address (not bus address)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetWriteLength(self):
        """Number of bytes to write"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetResponseLength(self):
        """Number of bytes to read"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(40)
    def GetData(self, idx):
        """Data to write to the I2C device"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetDevice(self, value):
        """I2C device address (not bus address)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetWriteLength(self, value):
        """Number of bytes to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetResponseLength(self, value):
        """Number of bytes to read"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(40)
    def SetData(self, value, idx):
        """Data to write to the I2C device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_SetGet.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Device",type="int",units="",minVal="0",maxVal="65535",description="I2C device address (not bus address)",get=GetDevice,set=SetDevice,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WriteLength",type="int",units="",minVal="0",maxVal="255",description="Number of bytes to write",get=GetWriteLength,set=SetWriteLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ResponseLength",type="int",units="",minVal="0",maxVal="255",description="Number of bytes to read",get=GetResponseLength,set=SetResponseLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data to write to the I2C device",get=GetData,set=SetData,count=40, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.I2CCheck.SetGet", Manufacturing_I2CCheck_SetGet.ID, Manufacturing_I2CCheck_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/I2CCheck.py
#    Created 27/07/2023 at 10:10:52 from:
#        Messages = messages/Manufacturing/I2CCheck.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_I2CCheck_Get :
    ID = 94641
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 27), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (27, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Get.MSG_OFFSET + Manufacturing_I2CCheck_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_I2CCheck_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_I2CCheck_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Get.MSG_OFFSET + Manufacturing_I2CCheck_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_I2CCheck_Get.ID)
            self.hdr.SetDataLength(Manufacturing_I2CCheck_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.I2CCheck.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetDevice(self):
        """I2C device address (not bus address)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetReadLength(self):
        """Number of bytes to read"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetRegisterAddressLength(self):
        """Bytes in register address field (optional)"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(8)
    def GetRegisterAddress(self, idx):
        """Device register starting address (optional)"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetDevice(self, value):
        """I2C device address (not bus address)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetReadLength(self, value):
        """Number of bytes to read"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetRegisterAddressLength(self, value):
        """Bytes in register address field (optional)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(8)
    def SetRegisterAddress(self, value, idx):
        """Device register starting address (optional)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Get.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Device",type="int",units="",minVal="0",maxVal="65535",description="I2C device address (not bus address)",get=GetDevice,set=SetDevice,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ReadLength",type="int",units="",minVal="0",maxVal="255",description="Number of bytes to read",get=GetReadLength,set=SetReadLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RegisterAddressLength",type="int",units="",minVal="0",maxVal="255",description="Bytes in register address field (optional)",get=GetRegisterAddressLength,set=SetRegisterAddressLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RegisterAddress",type="int",units="",minVal="0",maxVal="255",description="Device register starting address (optional)",get=GetRegisterAddress,set=SetRegisterAddress,count=8, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.I2CCheck.Get", Manufacturing_I2CCheck_Get.ID, Manufacturing_I2CCheck_Get)
#    obj/CodeGenerator/Python/Manufacturing/I2CCheck.py
#    Created 27/07/2023 at 10:10:52 from:
#        Messages = messages/Manufacturing/I2CCheck.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_I2CCheck_Status :
    ID = 94643
    SIZE = 65
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 27), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (27, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Status.MSG_OFFSET + Manufacturing_I2CCheck_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_I2CCheck_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_I2CCheck_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_I2CCheck_Status.MSG_OFFSET + Manufacturing_I2CCheck_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_I2CCheck_Status.ID)
            self.hdr.SetDataLength(Manufacturing_I2CCheck_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.I2CCheck.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Status info."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(64)
    def GetStatusQualifier(self, idx):
        """Extra status info."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_I2CCheck_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Status info."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(64)
    def SetStatusQualifier(self, value, idx):
        """Extra status info."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_I2CCheck_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Status info.",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="StatusQualifier",type="int",units="",minVal="0",maxVal="255",description="Extra status info.",get=GetStatusQualifier,set=SetStatusQualifier,count=64, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.I2CCheck.Status", Manufacturing_I2CCheck_Status.ID, Manufacturing_I2CCheck_Status)
