#    obj/CodeGenerator/Python/Manufacturing/FactoryMicTrim.py
#    Created 27/07/2023 at 10:10:51 from:
#        Messages = messages/Manufacturing/FactoryMicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_FactoryMicTrim_SetGet :
    ID = 94402
    SIZE = 42
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FactoryMicTrimCommandIds = OrderedDict([("Start Processing", 0), ("Start Processing with Params", 1), ("Get Status", 2), ("Unload", 3), ("Read Processing Values", 4), ("Load", 5), ("Set Running ON", 6), ("Set Running OFF", 7), ("Load Params", 8)])
    ReverseFactoryMicTrimCommandIds = OrderedDict([(0, "Start Processing"), (1, "Start Processing with Params"), (2, "Get Status"), (3, "Unload"), (4, "Read Processing Values"), (5, "Load"), (6, "Set Running ON"), (7, "Set Running OFF"), (8, "Load Params")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 12), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (12, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + Manufacturing_FactoryMicTrim_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_FactoryMicTrim_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_FactoryMicTrim_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + Manufacturing_FactoryMicTrim_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_FactoryMicTrim_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_FactoryMicTrim_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.FactoryMicTrim.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCommandId(self, enumAsInt=0):
        """Must have at least 1 byte for Command Id."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_FactoryMicTrim_SetGet.ReverseFactoryMicTrimCommandIds.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCommandParams(self):
        """For startProcessingWthParams and Load params this is NumMicTrims 0 - 10. For Read Processing Values this is processing msg 0 - 6."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim1(self):
        """Value for MicTrim1."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim2(self):
        """Value for MicTrim2."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim3(self):
        """Value for MicTrim3."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim4(self):
        """Value for MicTrim4."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim5(self):
        """Value for MicTrim5."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim6(self):
        """Value for MicTrim6."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('26')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim7(self):
        """Value for MicTrim7."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('30')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim8(self):
        """Value for MicTrim8."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 30)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('34')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim9(self):
        """Value for MicTrim9."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 34)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('38')
    @msg.size('4')
    @msg.count(1)
    def GetFMicTrim10(self):
        """Value for MicTrim10."""
        value = struct.unpack_from('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 38)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCommandId(self, value):
        """Must have at least 1 byte for Command Id."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_FactoryMicTrim_SetGet.FactoryMicTrimCommandIds.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCommandParams(self, value):
        """For startProcessingWthParams and Load params this is NumMicTrims 0 - 10. For Read Processing Values this is processing msg 0 - 6."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim1(self, value):
        """Value for MicTrim1."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim2(self, value):
        """Value for MicTrim2."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim3(self, value):
        """Value for MicTrim3."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim4(self, value):
        """Value for MicTrim4."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim5(self, value):
        """Value for MicTrim5."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim6(self, value):
        """Value for MicTrim6."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 22, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('26')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim7(self, value):
        """Value for MicTrim7."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 26, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('30')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim8(self, value):
        """Value for MicTrim8."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 30, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('34')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim9(self, value):
        """Value for MicTrim9."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 34, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('38')
    @msg.size('4')
    @msg.count(1)
    def SetFMicTrim10(self, value):
        """Value for MicTrim10."""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Manufacturing_FactoryMicTrim_SetGet.MSG_OFFSET + 38, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CommandId",type="enumeration",units="",minVal="0",maxVal="255",description="Must have at least 1 byte for Command Id.",get=GetCommandId,set=SetCommandId,count=1, bitfieldInfo = [], enum = [FactoryMicTrimCommandIds, ReverseFactoryMicTrimCommandIds]),\
        FieldInfo(name="CommandParams",type="int",units="",minVal="0",maxVal="255",description="For startProcessingWthParams and Load params this is NumMicTrims 0 - 10. For Read Processing Values this is processing msg 0 - 6.",get=GetCommandParams,set=SetCommandParams,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim1",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim1.",get=GetFMicTrim1,set=SetFMicTrim1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim2",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim2.",get=GetFMicTrim2,set=SetFMicTrim2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim3",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim3.",get=GetFMicTrim3,set=SetFMicTrim3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim4",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim4.",get=GetFMicTrim4,set=SetFMicTrim4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim5",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim5.",get=GetFMicTrim5,set=SetFMicTrim5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim6",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim6.",get=GetFMicTrim6,set=SetFMicTrim6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim7",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim7.",get=GetFMicTrim7,set=SetFMicTrim7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim8",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim8.",get=GetFMicTrim8,set=SetFMicTrim8,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim9",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim9.",get=GetFMicTrim9,set=SetFMicTrim9,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FMicTrim10",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Value for MicTrim10.",get=GetFMicTrim10,set=SetFMicTrim10,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.FactoryMicTrim.SetGet", Manufacturing_FactoryMicTrim_SetGet.ID, Manufacturing_FactoryMicTrim_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/FactoryMicTrim.py
#    Created 27/07/2023 at 10:10:51 from:
#        Messages = messages/Manufacturing/FactoryMicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_FactoryMicTrim_Status :
    ID = 94403
    SIZE = 161
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 12), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (12, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + Manufacturing_FactoryMicTrim_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_FactoryMicTrim_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_FactoryMicTrim_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + Manufacturing_FactoryMicTrim_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_FactoryMicTrim_Status.ID)
            self.hdr.SetDataLength(Manufacturing_FactoryMicTrim_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.FactoryMicTrim.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Response for FactoryMicTrim commands."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(160)
    def GetResponse(self):
        """Values returned from GetStatus or ReadProcessing cmds."""
        count = 160
        if count > len(self.rawBuffer())-(Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Response for FactoryMicTrim commands."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(160)
    def SetResponse(self, value):
        """Values returned from GetStatus or ReadProcessing cmds."""
        tmp = value.encode('utf-8')
        struct.pack_into('160s', self.rawBuffer(), Manufacturing_FactoryMicTrim_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Response for FactoryMicTrim commands.",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Response",type="string",units="ASCII",minVal="0",maxVal="255",description="Values returned from GetStatus or ReadProcessing cmds.",get=GetResponse,set=SetResponse,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.FactoryMicTrim.Status", Manufacturing_FactoryMicTrim_Status.ID, Manufacturing_FactoryMicTrim_Status)
#    obj/CodeGenerator/Python/Manufacturing/FactoryMicTrim.py
#    Created 27/07/2023 at 10:10:51 from:
#        Messages = messages/Manufacturing/FactoryMicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_FactoryMicTrim_Error :
    ID = 94404
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 12), ("Operator", 4)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (12, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_Error.MSG_OFFSET + Manufacturing_FactoryMicTrim_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_FactoryMicTrim_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_FactoryMicTrim_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_FactoryMicTrim_Error.MSG_OFFSET + Manufacturing_FactoryMicTrim_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_FactoryMicTrim_Error.ID)
            self.hdr.SetDataLength(Manufacturing_FactoryMicTrim_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.FactoryMicTrim.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """Error Code."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_FactoryMicTrim_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """Error Code."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_FactoryMicTrim_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_FactoryMicTrim_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="Error Code.",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("Manufacturing.FactoryMicTrim.Error", Manufacturing_FactoryMicTrim_Error.ID, Manufacturing_FactoryMicTrim_Error)
