#    obj/CodeGenerator/Python/Manufacturing/BLEBondableTimeoutEnabled.py
#    Created 27/07/2023 at 10:10:50 from:
#        Messages = messages/Manufacturing/BLEBondableTimeoutEnabled.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_BLEBondableTimeoutEnabled_Get :
    ID = 94433
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 14), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (14, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_Get.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_Get.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_BLEBondableTimeoutEnabled_Get.ID)
            self.hdr.SetDataLength(Manufacturing_BLEBondableTimeoutEnabled_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.BLEBondableTimeoutEnabled.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.BLEBondableTimeoutEnabled.Get", Manufacturing_BLEBondableTimeoutEnabled_Get.ID, Manufacturing_BLEBondableTimeoutEnabled_Get)
#    obj/CodeGenerator/Python/Manufacturing/BLEBondableTimeoutEnabled.py
#    Created 27/07/2023 at 10:10:50 from:
#        Messages = messages/Manufacturing/BLEBondableTimeoutEnabled.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_BLEBondableTimeoutEnabled_SetGet :
    ID = 94434
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Boolean = OrderedDict([("True", 1), ("False", 0)])
    ReverseBoolean = OrderedDict([(1, "True"), (0, "False")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 14), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (14, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_SetGet.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_SetGet.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_BLEBondableTimeoutEnabled_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_BLEBondableTimeoutEnabled_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.BLEBondableTimeoutEnabled.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnabled(self, enumAsInt=0):
        """Enabled."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_BLEBondableTimeoutEnabled_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_BLEBondableTimeoutEnabled_SetGet.ReverseBoolean.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnabled(self, value):
        """Enabled."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_BLEBondableTimeoutEnabled_SetGet.Boolean.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_BLEBondableTimeoutEnabled_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Enabled",type="enumeration",units="",minVal="0",maxVal="255",description="Enabled.",get=GetEnabled,set=SetEnabled,count=1, bitfieldInfo = [], enum = [Boolean, ReverseBoolean])\
    ]

Messaging.Register("Manufacturing.BLEBondableTimeoutEnabled.SetGet", Manufacturing_BLEBondableTimeoutEnabled_SetGet.ID, Manufacturing_BLEBondableTimeoutEnabled_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/BLEBondableTimeoutEnabled.py
#    Created 27/07/2023 at 10:10:50 from:
#        Messages = messages/Manufacturing/BLEBondableTimeoutEnabled.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_BLEBondableTimeoutEnabled_Status :
    ID = 94435
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Boolean = OrderedDict([("True", 1), ("False", 0)])
    ReverseBoolean = OrderedDict([(1, "True"), (0, "False")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 14), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (14, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_Status.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_BLEBondableTimeoutEnabled_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_BLEBondableTimeoutEnabled_Status.MSG_OFFSET + Manufacturing_BLEBondableTimeoutEnabled_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_BLEBondableTimeoutEnabled_Status.ID)
            self.hdr.SetDataLength(Manufacturing_BLEBondableTimeoutEnabled_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.BLEBondableTimeoutEnabled.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnabled(self, enumAsInt=0):
        """Enabled."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_BLEBondableTimeoutEnabled_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_BLEBondableTimeoutEnabled_Status.ReverseBoolean.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnabled(self, value):
        """Enabled."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_BLEBondableTimeoutEnabled_Status.Boolean.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_BLEBondableTimeoutEnabled_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Enabled",type="enumeration",units="",minVal="0",maxVal="255",description="Enabled.",get=GetEnabled,set=SetEnabled,count=1, bitfieldInfo = [], enum = [Boolean, ReverseBoolean])\
    ]

Messaging.Register("Manufacturing.BLEBondableTimeoutEnabled.Status", Manufacturing_BLEBondableTimeoutEnabled_Status.ID, Manufacturing_BLEBondableTimeoutEnabled_Status)
