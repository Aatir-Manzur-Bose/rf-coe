#    obj/CodeGenerator/Python/Manufacturing/TestStation.py
#    Created 27/07/2023 at 10:10:55 from:
#        Messages = messages/Manufacturing/TestStation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_TestStation_Get :
    ID = 94241
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_TestStation_Get.MSG_OFFSET + Manufacturing_TestStation_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_TestStation_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_TestStation_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_TestStation_Get.MSG_OFFSET + Manufacturing_TestStation_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_TestStation_Get.ID)
            self.hdr.SetDataLength(Manufacturing_TestStation_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.TestStation.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.TestStation.Get", Manufacturing_TestStation_Get.ID, Manufacturing_TestStation_Get)
#    obj/CodeGenerator/Python/Manufacturing/TestStation.py
#    Created 27/07/2023 at 10:10:55 from:
#        Messages = messages/Manufacturing/TestStation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_TestStation_SetGet :
    ID = 94242
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    TestStationID = OrderedDict([("TestStation1", 0), ("TestStation2", 1), ("TestStation3", 2), ("TestStation4", 3), ("TestStation5", 4), ("TestStation6", 5), ("TestStation7", 6), ("TestStation8", 7), ("TestStation9", 8), ("TestStation10", 9), ("TestStation11", 10), ("TestStation12", 11), ("TestStation13", 12), ("TestStation14", 13), ("TestStation15", 14), ("TestStation16", 15), ("TestStation17", 16), ("TestStation18", 17), ("TestStation19", 18), ("TestStation20", 19), ("TestStation21", 20), ("TestStation22", 21), ("TestStation23", 22), ("TestStation24", 23)])
    ReverseTestStationID = OrderedDict([(0, "TestStation1"), (1, "TestStation2"), (2, "TestStation3"), (3, "TestStation4"), (4, "TestStation5"), (5, "TestStation6"), (6, "TestStation7"), (7, "TestStation8"), (8, "TestStation9"), (9, "TestStation10"), (10, "TestStation11"), (11, "TestStation12"), (12, "TestStation13"), (13, "TestStation14"), (14, "TestStation15"), (15, "TestStation16"), (16, "TestStation17"), (17, "TestStation18"), (18, "TestStation19"), (19, "TestStation20"), (20, "TestStation21"), (21, "TestStation22"), (22, "TestStation23"), (23, "TestStation24")])
    TestStationStatus = OrderedDict([("None", 0), ("Pass", 1), ("Fail", 2)])
    ReverseTestStationStatus = OrderedDict([(0, "None"), (1, "Pass"), (2, "Fail")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 2), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (2, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_TestStation_SetGet.MSG_OFFSET + Manufacturing_TestStation_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_TestStation_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_TestStation_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_TestStation_SetGet.MSG_OFFSET + Manufacturing_TestStation_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_TestStation_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_TestStation_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.TestStation.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTestStation(self, enumAsInt=0):
        """Test Station ID"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_TestStation_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_TestStation_SetGet.ReverseTestStationID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self, enumAsInt=0):
        """Test Station status."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_TestStation_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Manufacturing_TestStation_SetGet.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTestStation(self, value):
        """Test Station ID"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_SetGet.TestStationID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_TestStation_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Test Station status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_SetGet.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_TestStation_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TestStation",type="enumeration",units="",minVal="0",maxVal="255",description="Test Station ID",get=GetTestStation,set=SetTestStation,count=1, bitfieldInfo = [], enum = [TestStationID, ReverseTestStationID]),\
        FieldInfo(name="Status",type="enumeration",units="",minVal="0",maxVal="255",description="Test Station status.",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [TestStationStatus, ReverseTestStationStatus])\
    ]

Messaging.Register("Manufacturing.TestStation.SetGet", Manufacturing_TestStation_SetGet.ID, Manufacturing_TestStation_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/TestStation.py
#    Created 27/07/2023 at 10:10:55 from:
#        Messages = messages/Manufacturing/TestStation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_TestStation_Status :
    ID = 94243
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    TestStationStatus = OrderedDict([("None", 0), ("Pass", 1), ("Fail", 2)])
    ReverseTestStationStatus = OrderedDict([(0, "None"), (1, "Pass"), (2, "Fail")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_TestStation_Status.MSG_OFFSET + Manufacturing_TestStation_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_TestStation_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_TestStation_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_TestStation_Status.MSG_OFFSET + Manufacturing_TestStation_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_TestStation_Status.ID)
            self.hdr.SetDataLength(Manufacturing_TestStation_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.TestStation.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetStatusPartA(self):
        """Status for Test Stations 1 - 16"""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_TestStation_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation1Status(self, enumAsInt=0):
        """Test Station 1 status."""
        value = (self.GetStatusPartA() >> 0) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation2Status(self, enumAsInt=0):
        """Test Station 2 status."""
        value = (self.GetStatusPartA() >> 2) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation3Status(self, enumAsInt=0):
        """Test Station 3 status."""
        value = (self.GetStatusPartA() >> 4) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation4Status(self, enumAsInt=0):
        """Test Station 4 status."""
        value = (self.GetStatusPartA() >> 6) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation5Status(self, enumAsInt=0):
        """Test Station 5 status."""
        value = (self.GetStatusPartA() >> 8) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation6Status(self, enumAsInt=0):
        """Test Station 6 status."""
        value = (self.GetStatusPartA() >> 10) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation7Status(self, enumAsInt=0):
        """Test Station 7 status."""
        value = (self.GetStatusPartA() >> 12) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation8Status(self, enumAsInt=0):
        """Test Station 8 status."""
        value = (self.GetStatusPartA() >> 14) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation9Status(self, enumAsInt=0):
        """Test Station 9 status."""
        value = (self.GetStatusPartA() >> 16) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation10Status(self, enumAsInt=0):
        """Test Station 10 status."""
        value = (self.GetStatusPartA() >> 18) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation11Status(self, enumAsInt=0):
        """Test Station 11 status."""
        value = (self.GetStatusPartA() >> 20) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation12Status(self, enumAsInt=0):
        """Test Station 12 status."""
        value = (self.GetStatusPartA() >> 22) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation13Status(self, enumAsInt=0):
        """Test Station 13 status."""
        value = (self.GetStatusPartA() >> 24) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation14Status(self, enumAsInt=0):
        """Test Station 14 status."""
        value = (self.GetStatusPartA() >> 26) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation15Status(self, enumAsInt=0):
        """Test Station 15 status."""
        value = (self.GetStatusPartA() >> 28) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStation16Status(self, enumAsInt=0):
        """Test Station 16 status."""
        value = (self.GetStatusPartA() >> 30) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def GetStatusPartB(self):
        """Status for Test Stations 17 - 24"""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_TestStation_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation17Status(self, enumAsInt=0):
        """Test Station 17 status."""
        value = (self.GetStatusPartB() >> 0) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation18Status(self, enumAsInt=0):
        """Test Station 18 status."""
        value = (self.GetStatusPartB() >> 2) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation19Status(self, enumAsInt=0):
        """Test Station 19 status."""
        value = (self.GetStatusPartB() >> 4) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation20Status(self, enumAsInt=0):
        """Test Station 20 status."""
        value = (self.GetStatusPartB() >> 6) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation21Status(self, enumAsInt=0):
        """Test Station 21 status."""
        value = (self.GetStatusPartB() >> 8) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation22Status(self, enumAsInt=0):
        """Test Station 22 status."""
        value = (self.GetStatusPartB() >> 10) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation23Status(self, enumAsInt=0):
        """Test Station 23 status."""
        value = (self.GetStatusPartB() >> 12) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetStation24Status(self, enumAsInt=0):
        """Test Station 24 status."""
        value = (self.GetStatusPartB() >> 14) & 0x3
        if not enumAsInt:
            value = Manufacturing_TestStation_Status.ReverseTestStationStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Reserved Bytes - set to 0."""
        value = (self.GetStatusPartB() >> 16) & 0xffff
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetStatusPartA(self, value):
        """Status for Test Stations 1 - 16"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_TestStation_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation1Status(self, value):
        """Test Station 1 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation2Status(self, value):
        """Test Station 2 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 2)) | ((tmp & 0x3) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation3Status(self, value):
        """Test Station 3 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 4)) | ((tmp & 0x3) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation4Status(self, value):
        """Test Station 4 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation5Status(self, value):
        """Test Station 5 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 8)) | ((tmp & 0x3) << 8))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation6Status(self, value):
        """Test Station 6 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 10)) | ((tmp & 0x3) << 10))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation7Status(self, value):
        """Test Station 7 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 12)) | ((tmp & 0x3) << 12))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation8Status(self, value):
        """Test Station 8 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 14)) | ((tmp & 0x3) << 14))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation9Status(self, value):
        """Test Station 9 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 16)) | ((tmp & 0x3) << 16))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation10Status(self, value):
        """Test Station 10 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 18)) | ((tmp & 0x3) << 18))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation11Status(self, value):
        """Test Station 11 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 20)) | ((tmp & 0x3) << 20))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation12Status(self, value):
        """Test Station 12 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 22)) | ((tmp & 0x3) << 22))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation13Status(self, value):
        """Test Station 13 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 24)) | ((tmp & 0x3) << 24))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation14Status(self, value):
        """Test Station 14 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 26)) | ((tmp & 0x3) << 26))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation15Status(self, value):
        """Test Station 15 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 28)) | ((tmp & 0x3) << 28))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStation16Status(self, value):
        """Test Station 16 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartA((self.GetStatusPartA() & ~(0x3 << 30)) | ((tmp & 0x3) << 30))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def SetStatusPartB(self, value):
        """Status for Test Stations 17 - 24"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_TestStation_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation17Status(self, value):
        """Test Station 17 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation18Status(self, value):
        """Test Station 18 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 2)) | ((tmp & 0x3) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation19Status(self, value):
        """Test Station 19 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 4)) | ((tmp & 0x3) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation20Status(self, value):
        """Test Station 20 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation21Status(self, value):
        """Test Station 21 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 8)) | ((tmp & 0x3) << 8))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation22Status(self, value):
        """Test Station 22 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 10)) | ((tmp & 0x3) << 10))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation23Status(self, value):
        """Test Station 23 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 12)) | ((tmp & 0x3) << 12))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetStation24Status(self, value):
        """Test Station 24 status."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_TestStation_Status.TestStationStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0x3 << 14)) | ((tmp & 0x3) << 14))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Reserved Bytes - set to 0."""
        tmp = min(max(value, 0), 65535)
        self.SetStatusPartB((self.GetStatusPartB() & ~(0xffff << 16)) | ((tmp & 0xffff) << 16))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="StatusPartA",type="int",units="",minVal="0",maxVal="4294967295",description="Status for Test Stations 1 - 16",get=GetStatusPartA,set=SetStatusPartA,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Station1Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 1 status.",get=GetStation1Status,set=SetStation1Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station2Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 2 status.",get=GetStation2Status,set=SetStation2Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station3Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 3 status.",get=GetStation3Status,set=SetStation3Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station4Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 4 status.",get=GetStation4Status,set=SetStation4Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station5Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 5 status.",get=GetStation5Status,set=SetStation5Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station6Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 6 status.",get=GetStation6Status,set=SetStation6Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station7Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 7 status.",get=GetStation7Status,set=SetStation7Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station8Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 8 status.",get=GetStation8Status,set=SetStation8Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station9Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 9 status.",get=GetStation9Status,set=SetStation9Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station10Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 10 status.",get=GetStation10Status,set=SetStation10Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station11Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 11 status.",get=GetStation11Status,set=SetStation11Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station12Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 12 status.",get=GetStation12Status,set=SetStation12Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station13Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 13 status.",get=GetStation13Status,set=SetStation13Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station14Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 14 status.",get=GetStation14Status,set=SetStation14Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station15Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 15 status.",get=GetStation15Status,set=SetStation15Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station16Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 16 status.",get=GetStation16Status,set=SetStation16Status, enum = [TestStationStatus, ReverseTestStationStatus])], enum = []),\
        FieldInfo(name="StatusPartB",type="int",units="",minVal="0",maxVal="4294967295",description="Status for Test Stations 17 - 24",get=GetStatusPartB,set=SetStatusPartB,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Station17Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 17 status.",get=GetStation17Status,set=SetStation17Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station18Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 18 status.",get=GetStation18Status,set=SetStation18Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station19Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 19 status.",get=GetStation19Status,set=SetStation19Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station20Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 20 status.",get=GetStation20Status,set=SetStation20Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station21Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 21 status.",get=GetStation21Status,set=SetStation21Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station22Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 22 status.",get=GetStation22Status,set=SetStation22Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station23Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 23 status.",get=GetStation23Status,set=SetStation23Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Station24Status",type="enumeration",units="",minVal="0",maxVal="3",description="Test Station 24 status.",get=GetStation24Status,set=SetStation24Status, enum = [TestStationStatus, ReverseTestStationStatus]),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="65535",description="Reserved Bytes - set to 0.",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("Manufacturing.TestStation.Status", Manufacturing_TestStation_Status.ID, Manufacturing_TestStation_Status)
