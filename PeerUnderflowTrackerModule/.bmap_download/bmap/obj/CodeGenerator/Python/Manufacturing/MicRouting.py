#    obj/CodeGenerator/Python/Manufacturing/MicRouting.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MicRouting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRouting_SetGet :
    ID = 94498
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MicId = OrderedDict([("Mic0", 0), ("Mic1", 1), ("Mic2", 2), ("Mic3", 3)])
    ReverseMicId = OrderedDict([(0, "Mic0"), (1, "Mic1"), (2, "Mic2"), (3, "Mic3")])
    MicRoutingCmdId = OrderedDict([("UnloadDSP", 0), ("RouteMic", 1)])
    ReverseMicRoutingCmdId = OrderedDict([(0, "UnloadDSP"), (1, "RouteMic")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 18), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (18, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRouting_SetGet.MSG_OFFSET + Manufacturing_MicRouting_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRouting_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRouting_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRouting_SetGet.MSG_OFFSET + Manufacturing_MicRouting_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRouting_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_MicRouting_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRouting.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMicToRouteId(self, enumAsInt=0):
        """Specify Mic ID. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRouting_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_MicRouting_SetGet.ReverseMicId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetProcessCmdId(self, enumAsInt=0):
        """Select to configure DSP for mic routing or to unload the DSP functionality"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRouting_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Manufacturing_MicRouting_SetGet.ReverseMicRoutingCmdId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMicToRouteId(self, value):
        """Specify Mic ID. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRouting_SetGet.MicId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRouting_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetProcessCmdId(self, value):
        """Select to configure DSP for mic routing or to unload the DSP functionality"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRouting_SetGet.MicRoutingCmdId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRouting_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicToRouteId",type="enumeration",units="",minVal="0",maxVal="255",description="Specify Mic ID. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3",get=GetMicToRouteId,set=SetMicToRouteId,count=1, bitfieldInfo = [], enum = [MicId, ReverseMicId]),\
        FieldInfo(name="ProcessCmdId",type="enumeration",units="",minVal="0",maxVal="255",description="Select to configure DSP for mic routing or to unload the DSP functionality",get=GetProcessCmdId,set=SetProcessCmdId,count=1, bitfieldInfo = [], enum = [MicRoutingCmdId, ReverseMicRoutingCmdId])\
    ]

Messaging.Register("Manufacturing.MicRouting.SetGet", Manufacturing_MicRouting_SetGet.ID, Manufacturing_MicRouting_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/MicRouting.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MicRouting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRouting_Get :
    ID = 94497
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 18), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (18, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Get.MSG_OFFSET + Manufacturing_MicRouting_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRouting_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRouting_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Get.MSG_OFFSET + Manufacturing_MicRouting_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRouting_Get.ID)
            self.hdr.SetDataLength(Manufacturing_MicRouting_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRouting.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.MicRouting.Get", Manufacturing_MicRouting_Get.ID, Manufacturing_MicRouting_Get)
#    obj/CodeGenerator/Python/Manufacturing/MicRouting.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MicRouting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRouting_Status :
    ID = 94499
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MicRoutingResp = OrderedDict([("None", 0), ("Mic0", 1), ("Mic1", 2), ("Mic2", 3), ("Mic3", 4)])
    ReverseMicRoutingResp = OrderedDict([(0, "None"), (1, "Mic0"), (2, "Mic1"), (3, "Mic2"), (4, "Mic3")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 18), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (18, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Status.MSG_OFFSET + Manufacturing_MicRouting_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRouting_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRouting_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Status.MSG_OFFSET + Manufacturing_MicRouting_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRouting_Status.ID)
            self.hdr.SetDataLength(Manufacturing_MicRouting_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRouting.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMicToRouteResp(self, enumAsInt=0):
        """MicRouting Configuration - 0 = mic routing not used, 1 = Mic0 to driver, 2 = Mic1 to driver, 3 = Mic2 to driver , 4 = Mic3 to driver"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRouting_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_MicRouting_Status.ReverseMicRoutingResp.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMicToRouteResp(self, value):
        """MicRouting Configuration - 0 = mic routing not used, 1 = Mic0 to driver, 2 = Mic1 to driver, 3 = Mic2 to driver , 4 = Mic3 to driver"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRouting_Status.MicRoutingResp.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRouting_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicToRouteResp",type="enumeration",units="",minVal="0",maxVal="255",description="MicRouting Configuration - 0 = mic routing not used, 1 = Mic0 to driver, 2 = Mic1 to driver, 3 = Mic2 to driver , 4 = Mic3 to driver",get=GetMicToRouteResp,set=SetMicToRouteResp,count=1, bitfieldInfo = [], enum = [MicRoutingResp, ReverseMicRoutingResp])\
    ]

Messaging.Register("Manufacturing.MicRouting.Status", Manufacturing_MicRouting_Status.ID, Manufacturing_MicRouting_Status)
#    obj/CodeGenerator/Python/Manufacturing/MicRouting.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MicRouting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRouting_Start :
    ID = 94501
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MicId = OrderedDict([("Mic0", 0), ("Mic1", 1), ("Mic2", 2), ("Mic3", 3)])
    ReverseMicId = OrderedDict([(0, "Mic0"), (1, "Mic1"), (2, "Mic2"), (3, "Mic3")])
    MicRoutingCmdId = OrderedDict([("UnloadDSP", 0), ("RouteMic", 1)])
    ReverseMicRoutingCmdId = OrderedDict([(0, "UnloadDSP"), (1, "RouteMic")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 18), ("Operator", 5)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (18, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Start.MSG_OFFSET + Manufacturing_MicRouting_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRouting_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRouting_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRouting_Start.MSG_OFFSET + Manufacturing_MicRouting_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRouting_Start.ID)
            self.hdr.SetDataLength(Manufacturing_MicRouting_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRouting.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMicToRouteId(self, enumAsInt=0):
        """Specify Mic ID to be routed to driver. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRouting_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_MicRouting_Start.ReverseMicId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetProcessCmdId(self, enumAsInt=0):
        """Select to configure DSP for mic routing or to unload the DSP functionality"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRouting_Start.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Manufacturing_MicRouting_Start.ReverseMicRoutingCmdId.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMicToRouteId(self, value):
        """Specify Mic ID to be routed to driver. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRouting_Start.MicId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRouting_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetProcessCmdId(self, value):
        """Select to configure DSP for mic routing or to unload the DSP functionality"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRouting_Start.MicRoutingCmdId.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRouting_Start.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicToRouteId",type="enumeration",units="",minVal="0",maxVal="255",description="Specify Mic ID to be routed to driver. 0 = Mic0, 1 - Mic1, 2 - Mic2, 3 - Mic3",get=GetMicToRouteId,set=SetMicToRouteId,count=1, bitfieldInfo = [], enum = [MicId, ReverseMicId]),\
        FieldInfo(name="ProcessCmdId",type="enumeration",units="",minVal="0",maxVal="255",description="Select to configure DSP for mic routing or to unload the DSP functionality",get=GetProcessCmdId,set=SetProcessCmdId,count=1, bitfieldInfo = [], enum = [MicRoutingCmdId, ReverseMicRoutingCmdId])\
    ]

Messaging.Register("Manufacturing.MicRouting.Start", Manufacturing_MicRouting_Start.ID, Manufacturing_MicRouting_Start)
