#    obj/CodeGenerator/Python/Manufacturing/MicTrim.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicTrim_Get :
    ID = 94289
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 5), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (5, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicTrim_Get.MSG_OFFSET + Manufacturing_MicTrim_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicTrim_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicTrim_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicTrim_Get.MSG_OFFSET + Manufacturing_MicTrim_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicTrim_Get.ID)
            self.hdr.SetDataLength(Manufacturing_MicTrim_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicTrim.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.MicTrim.Get", Manufacturing_MicTrim_Get.ID, Manufacturing_MicTrim_Get)
#    obj/CodeGenerator/Python/Manufacturing/MicTrim.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicTrim_SetGet :
    ID = 94290
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MicrophoneID = OrderedDict([("Mic0", 0), ("Mic1", 1), ("Mic2", 2), ("Mic3", 3), ("Mic4", 4), ("Mic5", 5), ("Mic6", 6), ("Mic7", 7)])
    ReverseMicrophoneID = OrderedDict([(0, "Mic0"), (1, "Mic1"), (2, "Mic2"), (3, "Mic3"), (4, "Mic4"), (5, "Mic5"), (6, "Mic6"), (7, "Mic7")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 5), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (5, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicTrim_SetGet.MSG_OFFSET + Manufacturing_MicTrim_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicTrim_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicTrim_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicTrim_SetGet.MSG_OFFSET + Manufacturing_MicTrim_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicTrim_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_MicTrim_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicTrim.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMicrophone(self, enumAsInt=0):
        """Which microphone."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicTrim_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_MicTrim_SetGet.ReverseMicrophoneID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetTrimValue(self):
        """32-bit Microphone Trim value. To set to default use 0."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMicrophone(self, value):
        """Which microphone."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicTrim_SetGet.MicrophoneID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicTrim_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetTrimValue(self, value):
        """32-bit Microphone Trim value. To set to default use 0."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Microphone",type="enumeration",units="",minVal="0",maxVal="255",description="Which microphone.",get=GetMicrophone,set=SetMicrophone,count=1, bitfieldInfo = [], enum = [MicrophoneID, ReverseMicrophoneID]),\
        FieldInfo(name="TrimValue",type="int",units="",minVal="0",maxVal="4294967295",description="32-bit Microphone Trim value. To set to default use 0.",get=GetTrimValue,set=SetTrimValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.MicTrim.SetGet", Manufacturing_MicTrim_SetGet.ID, Manufacturing_MicTrim_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/MicTrim.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicTrim.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicTrim_Status :
    ID = 94291
    SIZE = 32
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 5), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (5, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicTrim_Status.MSG_OFFSET + Manufacturing_MicTrim_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicTrim_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicTrim_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicTrim_Status.MSG_OFFSET + Manufacturing_MicTrim_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicTrim_Status.ID)
            self.hdr.SetDataLength(Manufacturing_MicTrim_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicTrim.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetMic0(self):
        """Trim Value of Microphone0. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def GetMic1(self):
        """Trim Value of Microphone1. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def GetMic2(self):
        """Trim Value of Microphone2. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def GetMic3(self):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def GetMic4(self):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def GetMic5(self):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def GetMic6(self):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def GetMic7(self):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        value = struct.unpack_from('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetMic0(self, value):
        """Trim Value of Microphone0. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def SetMic1(self, value):
        """Trim Value of Microphone1. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def SetMic2(self, value):
        """Trim Value of Microphone2. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def SetMic3(self, value):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def SetMic4(self, value):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def SetMic5(self, value):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def SetMic6(self, value):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 24, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def SetMic7(self, value):
        """Trim Value of Microphone3. 4 bytes for each microphone in the product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Manufacturing_MicTrim_Status.MSG_OFFSET + 28, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Mic0",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone0. 4 bytes for each microphone in the product.",get=GetMic0,set=SetMic0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic1",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone1. 4 bytes for each microphone in the product.",get=GetMic1,set=SetMic1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic2",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone2. 4 bytes for each microphone in the product.",get=GetMic2,set=SetMic2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic3",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone3. 4 bytes for each microphone in the product.",get=GetMic3,set=SetMic3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic4",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone3. 4 bytes for each microphone in the product.",get=GetMic4,set=SetMic4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic5",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone3. 4 bytes for each microphone in the product.",get=GetMic5,set=SetMic5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic6",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone3. 4 bytes for each microphone in the product.",get=GetMic6,set=SetMic6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mic7",type="int",units="",minVal="0",maxVal="4294967295",description="Trim Value of Microphone3. 4 bytes for each microphone in the product.",get=GetMic7,set=SetMic7,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.MicTrim.Status", Manufacturing_MicTrim_Status.ID, Manufacturing_MicTrim_Status)
