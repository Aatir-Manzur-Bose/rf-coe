#    obj/CodeGenerator/Python/Manufacturing/ADCCalibration.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/Manufacturing/ADCCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_ADCCalibration_Start :
    ID = 94757
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Channel = OrderedDict([("BatteryVoltage", 1)])
    ReverseChannel = OrderedDict([(1, "BatteryVoltage")])
    CalibrationSteps = OrderedDict([("Initialized", 0), ("1stMeasured", 1), ("2ndMeasured", 2), ("ValidationMeasured", 3)])
    ReverseCalibrationSteps = OrderedDict([(0, "Initialized"), (1, "1stMeasured"), (2, "2ndMeasured"), (3, "ValidationMeasured")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 34), ("Operator", 5)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (34, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Start.MSG_OFFSET + Manufacturing_ADCCalibration_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_ADCCalibration_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_ADCCalibration_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Start.MSG_OFFSET + Manufacturing_ADCCalibration_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_ADCCalibration_Start.ID)
            self.hdr.SetDataLength(Manufacturing_ADCCalibration_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.ADCCalibration.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self, enumAsInt=0):
        """Channel Number of ADC Device"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Start.ReverseChannel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCalibrationStep(self, enumAsInt=0):
        """Procedure Step Number for ADC Calibration"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Start.ReverseCalibrationSteps.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetVoltageReading(self):
        """Voltage Reading for ADC Calibration Steps in mV"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel Number of ADC Device"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Start.Channel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCalibrationStep(self, value):
        """Procedure Step Number for ADC Calibration"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Start.CalibrationSteps.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetVoltageReading(self, value):
        """Voltage Reading for ADC Calibration Steps in mV"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Start.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="enumeration",units="",minVal="0",maxVal="255",description="Channel Number of ADC Device",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = [Channel, ReverseChannel]),\
        FieldInfo(name="CalibrationStep",type="enumeration",units="",minVal="0",maxVal="255",description="Procedure Step Number for ADC Calibration",get=GetCalibrationStep,set=SetCalibrationStep,count=1, bitfieldInfo = [], enum = [CalibrationSteps, ReverseCalibrationSteps]),\
        FieldInfo(name="VoltageReading",type="int",units="",minVal="0",maxVal="65535",description="Voltage Reading for ADC Calibration Steps in mV",get=GetVoltageReading,set=SetVoltageReading,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.ADCCalibration.Start", Manufacturing_ADCCalibration_Start.ID, Manufacturing_ADCCalibration_Start)
#    obj/CodeGenerator/Python/Manufacturing/ADCCalibration.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/Manufacturing/ADCCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_ADCCalibration_Result :
    ID = 94758
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    CalibrationSteps = OrderedDict([("Initialized", 0), ("1stMeasured", 1), ("2ndMeasured", 2), ("ValidationMeasured", 3)])
    ReverseCalibrationSteps = OrderedDict([(0, "Initialized"), (1, "1stMeasured"), (2, "2ndMeasured"), (3, "ValidationMeasured")])
    PassFail = OrderedDict([("Pass", 0), ("Fail", 1)])
    ReversePassFail = OrderedDict([(0, "Pass"), (1, "Fail")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 34), ("Operator", 6)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (34, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Result.MSG_OFFSET + Manufacturing_ADCCalibration_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_ADCCalibration_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_ADCCalibration_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Result.MSG_OFFSET + Manufacturing_ADCCalibration_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_ADCCalibration_Result.ID)
            self.hdr.SetDataLength(Manufacturing_ADCCalibration_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.ADCCalibration.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCalibrationStep(self, enumAsInt=0):
        """Procedure Step Number for ADC Calibration"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Result.ReverseCalibrationSteps.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetPassFail(self, enumAsInt=0):
        """Status of the Validation Step 3"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Result.ReversePassFail.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetVoltageRaw(self):
        """Voltage Reading of the ADC in mV"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetVoltageCalibrated(self):
        """Calculated Voltage resulting from the calibration process in mV"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCalibrationStep(self, value):
        """Procedure Step Number for ADC Calibration"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Result.CalibrationSteps.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetPassFail(self, value):
        """Status of the Validation Step 3"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Result.PassFail.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetVoltageRaw(self, value):
        """Voltage Reading of the ADC in mV"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetVoltageCalibrated(self, value):
        """Calculated Voltage resulting from the calibration process in mV"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Result.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CalibrationStep",type="enumeration",units="",minVal="0",maxVal="255",description="Procedure Step Number for ADC Calibration",get=GetCalibrationStep,set=SetCalibrationStep,count=1, bitfieldInfo = [], enum = [CalibrationSteps, ReverseCalibrationSteps]),\
        FieldInfo(name="PassFail",type="enumeration",units="",minVal="0",maxVal="255",description="Status of the Validation Step 3",get=GetPassFail,set=SetPassFail,count=1, bitfieldInfo = [], enum = [PassFail, ReversePassFail]),\
        FieldInfo(name="VoltageRaw",type="int",units="",minVal="0",maxVal="65535",description="Voltage Reading of the ADC in mV",get=GetVoltageRaw,set=SetVoltageRaw,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VoltageCalibrated",type="int",units="",minVal="0",maxVal="65535",description="Calculated Voltage resulting from the calibration process in mV",get=GetVoltageCalibrated,set=SetVoltageCalibrated,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.ADCCalibration.Result", Manufacturing_ADCCalibration_Result.ID, Manufacturing_ADCCalibration_Result)
#    obj/CodeGenerator/Python/Manufacturing/ADCCalibration.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/Manufacturing/ADCCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_ADCCalibration_Get :
    ID = 94753
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Channel = OrderedDict([("BatteryVoltage", 1)])
    ReverseChannel = OrderedDict([(1, "BatteryVoltage")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 34), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (34, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Get.MSG_OFFSET + Manufacturing_ADCCalibration_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_ADCCalibration_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_ADCCalibration_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Get.MSG_OFFSET + Manufacturing_ADCCalibration_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_ADCCalibration_Get.ID)
            self.hdr.SetDataLength(Manufacturing_ADCCalibration_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.ADCCalibration.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannelOptional(self, enumAsInt=0):
        """Channel Number of ADC Device, If Channel number is omitted, report the status for all supported channels"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Get.ReverseChannel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannelOptional(self, value):
        """Channel Number of ADC Device, If Channel number is omitted, report the status for all supported channels"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Get.Channel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChannelOptional",type="enumeration",units="",minVal="0",maxVal="255",description="Channel Number of ADC Device, If Channel number is omitted, report the status for all supported channels",get=GetChannelOptional,set=SetChannelOptional,count=1, bitfieldInfo = [], enum = [Channel, ReverseChannel])\
    ]

Messaging.Register("Manufacturing.ADCCalibration.Get", Manufacturing_ADCCalibration_Get.ID, Manufacturing_ADCCalibration_Get)
#    obj/CodeGenerator/Python/Manufacturing/ADCCalibration.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/Manufacturing/ADCCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_ADCCalibration_Status :
    ID = 94755
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Channel = OrderedDict([("BatteryVoltage", 1)])
    ReverseChannel = OrderedDict([(1, "BatteryVoltage")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 34), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (34, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Status.MSG_OFFSET + Manufacturing_ADCCalibration_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_ADCCalibration_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_ADCCalibration_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Status.MSG_OFFSET + Manufacturing_ADCCalibration_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_ADCCalibration_Status.ID)
            self.hdr.SetDataLength(Manufacturing_ADCCalibration_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.ADCCalibration.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self, enumAsInt=0):
        """Channel Number of ADC Device"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Status.ReverseChannel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetGain(self):
        """Calculated Gain for ADC Calibration"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetOffset(self):
        """Calculated Offset for ADC Calibration in 1mV increments"""
        value = struct.unpack_from('>h', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel Number of ADC Device"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Status.Channel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetGain(self, value):
        """Calculated Gain for ADC Calibration"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetOffset(self, value):
        """Calculated Offset for ADC Calibration in 1mV increments"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Manufacturing_ADCCalibration_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="enumeration",units="",minVal="0",maxVal="255",description="Channel Number of ADC Device",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = [Channel, ReverseChannel]),\
        FieldInfo(name="Gain",type="int",units="",minVal="0",maxVal="65535",description="Calculated Gain for ADC Calibration",get=GetGain,set=SetGain,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Offset",type="int",units="",minVal="-32768",maxVal="32767",description="Calculated Offset for ADC Calibration in 1mV increments",get=GetOffset,set=SetOffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.ADCCalibration.Status", Manufacturing_ADCCalibration_Status.ID, Manufacturing_ADCCalibration_Status)
#    obj/CodeGenerator/Python/Manufacturing/ADCCalibration.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/Manufacturing/ADCCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_ADCCalibration_Error :
    ID = 94756
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 34), ("Operator", 4)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (34, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Error.MSG_OFFSET + Manufacturing_ADCCalibration_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_ADCCalibration_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_ADCCalibration_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_ADCCalibration_Error.MSG_OFFSET + Manufacturing_ADCCalibration_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_ADCCalibration_Error.ID)
            self.hdr.SetDataLength(Manufacturing_ADCCalibration_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.ADCCalibration.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetError(self, enumAsInt=0):
        """Error Response"""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_ADCCalibration_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_ADCCalibration_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetError(self, value):
        """Error Response"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_ADCCalibration_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_ADCCalibration_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Error",type="enumeration",units="",minVal="0",maxVal="255",description="Error Response",get=GetError,set=SetError,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("Manufacturing.ADCCalibration.Error", Manufacturing_ADCCalibration_Error.ID, Manufacturing_ADCCalibration_Error)
