#    obj/CodeGenerator/Python/Manufacturing/MicRoutingBT.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicRoutingBT.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRoutingBT_SetGet :
    ID = 94546
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 21), ("Operator", 2)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (21, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_SetGet.MSG_OFFSET + Manufacturing_MicRoutingBT_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRoutingBT_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRoutingBT_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_SetGet.MSG_OFFSET + Manufacturing_MicRoutingBT_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRoutingBT_SetGet.ID)
            self.hdr.SetDataLength(Manufacturing_MicRoutingBT_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRoutingBT.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetMicToRouteId(self):
        """Specify microphone"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetMicToRouteId(self, value):
        """Specify microphone"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicToRouteId",type="int",units="",minVal="0",maxVal="65535",description="Specify microphone",get=GetMicToRouteId,set=SetMicToRouteId,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.MicRoutingBT.SetGet", Manufacturing_MicRoutingBT_SetGet.ID, Manufacturing_MicRoutingBT_SetGet)
#    obj/CodeGenerator/Python/Manufacturing/MicRoutingBT.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicRoutingBT.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRoutingBT_Get :
    ID = 94545
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 21), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (21, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Get.MSG_OFFSET + Manufacturing_MicRoutingBT_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRoutingBT_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRoutingBT_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Get.MSG_OFFSET + Manufacturing_MicRoutingBT_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRoutingBT_Get.ID)
            self.hdr.SetDataLength(Manufacturing_MicRoutingBT_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRoutingBT.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.MicRoutingBT.Get", Manufacturing_MicRoutingBT_Get.ID, Manufacturing_MicRoutingBT_Get)
#    obj/CodeGenerator/Python/Manufacturing/MicRoutingBT.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicRoutingBT.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRoutingBT_Status :
    ID = 94547
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 21), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (21, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Status.MSG_OFFSET + Manufacturing_MicRoutingBT_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRoutingBT_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRoutingBT_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Status.MSG_OFFSET + Manufacturing_MicRoutingBT_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRoutingBT_Status.ID)
            self.hdr.SetDataLength(Manufacturing_MicRoutingBT_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRoutingBT.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetMicRouteId(self):
        """MicRouteId - current microphone routing selected"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetMicNum(self):
        """MicNum - total number of physical microphones"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetCoreSignalNum(self):
        """CoreSignalNum - total number of virtual DSP microphone outputs"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetTotalSignalNum(self):
        """TotalSignalNum - total number of outputs (MicNum + CoreSignalNum)"""
        value = struct.unpack_from('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetMicRouteId(self, value):
        """MicRouteId - current microphone routing selected"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetMicNum(self, value):
        """MicNum - total number of physical microphones"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetCoreSignalNum(self, value):
        """CoreSignalNum - total number of virtual DSP microphone outputs"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetTotalSignalNum(self, value):
        """TotalSignalNum - total number of outputs (MicNum + CoreSignalNum)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Manufacturing_MicRoutingBT_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicRouteId",type="int",units="",minVal="0",maxVal="65535",description="MicRouteId - current microphone routing selected",get=GetMicRouteId,set=SetMicRouteId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MicNum",type="int",units="",minVal="0",maxVal="65535",description="MicNum - total number of physical microphones",get=GetMicNum,set=SetMicNum,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoreSignalNum",type="int",units="",minVal="0",maxVal="65535",description="CoreSignalNum - total number of virtual DSP microphone outputs",get=GetCoreSignalNum,set=SetCoreSignalNum,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TotalSignalNum",type="int",units="",minVal="0",maxVal="65535",description="TotalSignalNum - total number of outputs (MicNum + CoreSignalNum)",get=GetTotalSignalNum,set=SetTotalSignalNum,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.MicRoutingBT.Status", Manufacturing_MicRoutingBT_Status.ID, Manufacturing_MicRoutingBT_Status)
#    obj/CodeGenerator/Python/Manufacturing/MicRoutingBT.py
#    Created 27/07/2023 at 10:10:54 from:
#        Messages = messages/Manufacturing/MicRoutingBT.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MicRoutingBT_Error :
    ID = 94548
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MicRoutingBTErrors = OrderedDict([("InvalidLength", 1), ("OperatorNotSupported", 5), ("InvalidData", 6), ("InvalidState", 10)])
    ReverseMicRoutingBTErrors = OrderedDict([(1, "InvalidLength"), (5, "OperatorNotSupported"), (6, "InvalidData"), (10, "InvalidState")])
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 21), ("Operator", 4)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (21, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Error.MSG_OFFSET + Manufacturing_MicRoutingBT_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MicRoutingBT_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MicRoutingBT_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MicRoutingBT_Error.MSG_OFFSET + Manufacturing_MicRoutingBT_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MicRoutingBT_Error.ID)
            self.hdr.SetDataLength(Manufacturing_MicRoutingBT_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MicRoutingBT.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """Error Code."""
        value = struct.unpack_from('B', self.rawBuffer(), Manufacturing_MicRoutingBT_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Manufacturing_MicRoutingBT_Error.ReverseMicRoutingBTErrors.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """Error Code."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Manufacturing_MicRoutingBT_Error.MicRoutingBTErrors.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Manufacturing_MicRoutingBT_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="Error Code.",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [MicRoutingBTErrors, ReverseMicRoutingBTErrors])\
    ]

Messaging.Register("Manufacturing.MicRoutingBT.Error", Manufacturing_MicRoutingBT_Error.ID, Manufacturing_MicRoutingBT_Error)
