#    obj/CodeGenerator/Python/Manufacturing/MFIVersion.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MFIVersion.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MFIVersion_Get :
    ID = 94561
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 22), ("Operator", 1)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (22, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MFIVersion_Get.MSG_OFFSET + Manufacturing_MFIVersion_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MFIVersion_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MFIVersion_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MFIVersion_Get.MSG_OFFSET + Manufacturing_MFIVersion_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MFIVersion_Get.ID)
            self.hdr.SetDataLength(Manufacturing_MFIVersion_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MFIVersion.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Manufacturing.MFIVersion.Get", Manufacturing_MFIVersion_Get.ID, Manufacturing_MFIVersion_Get)
#    obj/CodeGenerator/Python/Manufacturing/MFIVersion.py
#    Created 27/07/2023 at 10:10:53 from:
#        Messages = messages/Manufacturing/MFIVersion.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Manufacturing_MFIVersion_Status :
    ID = 94563
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 23), ("Function", 22), ("Operator", 3)])
    ReverseIDs = OrderedDict([(23, "FunctionBlock"), (22, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Manufacturing_MFIVersion_Status.MSG_OFFSET + Manufacturing_MFIVersion_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Manufacturing_MFIVersion_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Manufacturing_MFIVersion_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Manufacturing_MFIVersion_Status.MSG_OFFSET + Manufacturing_MFIVersion_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Manufacturing_MFIVersion_Status.ID)
            self.hdr.SetDataLength(Manufacturing_MFIVersion_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Manufacturing.MFIVersion.Status"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def GetVersion(self):
        """MFI Version (UTF-8 String)"""
        count = 60
        if count > len(self.rawBuffer())-(Manufacturing_MFIVersion_Status.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(Manufacturing_MFIVersion_Status.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Manufacturing_MFIVersion_Status.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def SetVersion(self, value):
        """MFI Version (UTF-8 String)"""
        tmp = value.encode('utf-8')
        struct.pack_into('60s', self.rawBuffer(), Manufacturing_MFIVersion_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Version",type="string",units="ASCII",minVal="0",maxVal="255",description="MFI Version (UTF-8 String)",get=GetVersion,set=SetVersion,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Manufacturing.MFIVersion.Status", Manufacturing_MFIVersion_Status.ID, Manufacturing_MFIVersion_Status)
