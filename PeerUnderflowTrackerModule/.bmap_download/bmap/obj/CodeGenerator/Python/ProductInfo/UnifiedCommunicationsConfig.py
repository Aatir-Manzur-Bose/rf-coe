#    obj/CodeGenerator/Python/ProductInfo/UnifiedCommunicationsConfig.py
#    Created 27/07/2023 at 10:11:02 from:
#        Messages = messages/ProductInfo/UnifiedCommunicationsConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_UnifiedCommunicationsConfig_Get :
    ID = 257
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 16), ("Operator", 1)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (16, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_UnifiedCommunicationsConfig_Get.MSG_OFFSET + ProductInfo_UnifiedCommunicationsConfig_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_UnifiedCommunicationsConfig_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_UnifiedCommunicationsConfig_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_UnifiedCommunicationsConfig_Get.MSG_OFFSET + ProductInfo_UnifiedCommunicationsConfig_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_UnifiedCommunicationsConfig_Get.ID)
            self.hdr.SetDataLength(ProductInfo_UnifiedCommunicationsConfig_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.UnifiedCommunicationsConfig.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("ProductInfo.UnifiedCommunicationsConfig.Get", ProductInfo_UnifiedCommunicationsConfig_Get.ID, ProductInfo_UnifiedCommunicationsConfig_Get)
#    obj/CodeGenerator/Python/ProductInfo/UnifiedCommunicationsConfig.py
#    Created 27/07/2023 at 10:11:02 from:
#        Messages = messages/ProductInfo/UnifiedCommunicationsConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_UnifiedCommunicationsConfig_Status :
    ID = 259
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_UnifiedCommunicationsConfig_Status.MSG_OFFSET + ProductInfo_UnifiedCommunicationsConfig_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_UnifiedCommunicationsConfig_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_UnifiedCommunicationsConfig_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_UnifiedCommunicationsConfig_Status.MSG_OFFSET + ProductInfo_UnifiedCommunicationsConfig_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_UnifiedCommunicationsConfig_Status.ID)
            self.hdr.SetDataLength(ProductInfo_UnifiedCommunicationsConfig_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.UnifiedCommunicationsConfig.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetUnifiedCommunicationsConfig(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_UnifiedCommunicationsConfig_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetConfiguredForUC(self):
        """Configured for UC (0 == not configured, 1 == configured)"""
        value = (self.GetUnifiedCommunicationsConfig() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetUnifiedCommunicationsConfig() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetUnifiedCommunicationsConfig(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_UnifiedCommunicationsConfig_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetConfiguredForUC(self, value):
        """Configured for UC (0 == not configured, 1 == configured)"""
        tmp = min(max(value, 0), 1)
        self.SetUnifiedCommunicationsConfig((self.GetUnifiedCommunicationsConfig() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetUnifiedCommunicationsConfig((self.GetUnifiedCommunicationsConfig() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="UnifiedCommunicationsConfig",type="int",units="",minVal="0",maxVal="255",description="",get=GetUnifiedCommunicationsConfig,set=SetUnifiedCommunicationsConfig,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ConfiguredForUC",type="int",units="",minVal="0",maxVal="1",description="Configured for UC (0 == not configured, 1 == configured)",get=GetConfiguredForUC,set=SetConfiguredForUC, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("ProductInfo.UnifiedCommunicationsConfig.Status", ProductInfo_UnifiedCommunicationsConfig_Status.ID, ProductInfo_UnifiedCommunicationsConfig_Status)
