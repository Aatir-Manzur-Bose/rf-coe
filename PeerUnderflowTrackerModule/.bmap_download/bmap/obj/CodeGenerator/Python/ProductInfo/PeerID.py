#    obj/CodeGenerator/Python/ProductInfo/PeerID.py
#    Created 27/07/2023 at 10:11:01 from:
#        Messages = messages/ProductInfo/PeerID.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_PeerID_Get :
    ID = 305
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 19), ("Operator", 1)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (19, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_PeerID_Get.MSG_OFFSET + ProductInfo_PeerID_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_PeerID_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_PeerID_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_PeerID_Get.MSG_OFFSET + ProductInfo_PeerID_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_PeerID_Get.ID)
            self.hdr.SetDataLength(ProductInfo_PeerID_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.PeerID.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("ProductInfo.PeerID.Get", ProductInfo_PeerID_Get.ID, ProductInfo_PeerID_Get)
#    obj/CodeGenerator/Python/ProductInfo/PeerID.py
#    Created 27/07/2023 at 10:11:01 from:
#        Messages = messages/ProductInfo/PeerID.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_PeerID_Status :
    ID = 307
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 19), ("Operator", 3)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (19, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_PeerID_Status.MSG_OFFSET + ProductInfo_PeerID_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_PeerID_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_PeerID_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_PeerID_Status.MSG_OFFSET + ProductInfo_PeerID_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_PeerID_Status.ID)
            self.hdr.SetDataLength(ProductInfo_PeerID_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.PeerID.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def GetPeerID(self, idx):
        """Identifier that can be used to associate one product with another."""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_PeerID_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def SetPeerID(self, value, idx):
        """Identifier that can be used to associate one product with another."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_PeerID_Status.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PeerID",type="int",units="",minVal="0",maxVal="255",description="Identifier that can be used to associate one product with another.",get=GetPeerID,set=SetPeerID,count=60, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("ProductInfo.PeerID.Status", ProductInfo_PeerID_Status.ID, ProductInfo_PeerID_Status)
