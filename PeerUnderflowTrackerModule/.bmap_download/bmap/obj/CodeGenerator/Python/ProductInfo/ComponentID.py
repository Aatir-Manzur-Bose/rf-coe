#    obj/CodeGenerator/Python/ProductInfo/ComponentID.py
#    Created 27/07/2023 at 10:11:00 from:
#        Messages = messages/ProductInfo/ComponentID.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_ComponentID_Get :
    ID = 273
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 17), ("Operator", 1)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (17, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_ComponentID_Get.MSG_OFFSET + ProductInfo_ComponentID_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_ComponentID_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_ComponentID_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_ComponentID_Get.MSG_OFFSET + ProductInfo_ComponentID_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_ComponentID_Get.ID)
            self.hdr.SetDataLength(ProductInfo_ComponentID_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.ComponentID.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("ProductInfo.ComponentID.Get", ProductInfo_ComponentID_Get.ID, ProductInfo_ComponentID_Get)
#    obj/CodeGenerator/Python/ProductInfo/ComponentID.py
#    Created 27/07/2023 at 10:11:00 from:
#        Messages = messages/ProductInfo/ComponentID.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_ComponentID_Status :
    ID = 275
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ComponentID = OrderedDict([("COMPONENT_SINGLE", 0), ("COMPONENT_RIGHTBUD", 1), ("COMPONENT_LEFTBUD", 2), ("COMPONENT_CHARGING_CASE", 3)])
    ReverseComponentID = OrderedDict([(0, "COMPONENT_SINGLE"), (1, "COMPONENT_RIGHTBUD"), (2, "COMPONENT_LEFTBUD"), (3, "COMPONENT_CHARGING_CASE")])
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_ComponentID_Status.MSG_OFFSET + ProductInfo_ComponentID_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_ComponentID_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_ComponentID_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_ComponentID_Status.MSG_OFFSET + ProductInfo_ComponentID_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_ComponentID_Status.ID)
            self.hdr.SetDataLength(ProductInfo_ComponentID_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.ComponentID.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetComponentID(self, enumAsInt=0):
        """Component identifier"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_ComponentID_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = ProductInfo_ComponentID_Status.ReverseComponentID.get(value, value)
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMacAddress(self, idx):
        """Optional Bose Product Fixed Mac address"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_ComponentID_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetComponentID(self, value):
        """Component identifier"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = ProductInfo_ComponentID_Status.ComponentID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_ComponentID_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMacAddress(self, value, idx):
        """Optional Bose Product Fixed Mac address"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_ComponentID_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ComponentID",type="enumeration",units="",minVal="0",maxVal="255",description="Component identifier",get=GetComponentID,set=SetComponentID,count=1, bitfieldInfo = [], enum = [ComponentID, ReverseComponentID]),\
        FieldInfo(name="MacAddress",type="int",units="HEX",minVal="0",maxVal="255",description="Optional Bose Product Fixed Mac address",get=GetMacAddress,set=SetMacAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("ProductInfo.ComponentID.Status", ProductInfo_ComponentID_Status.ID, ProductInfo_ComponentID_Status)
