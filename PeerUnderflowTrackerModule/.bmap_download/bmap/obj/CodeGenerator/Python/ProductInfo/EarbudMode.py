#    obj/CodeGenerator/Python/ProductInfo/EarbudMode.py
#    Created 27/07/2023 at 10:11:00 from:
#        Messages = messages/ProductInfo/EarbudMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_EarbudMode_Get :
    ID = 289
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 18), ("Operator", 1)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (18, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_EarbudMode_Get.MSG_OFFSET + ProductInfo_EarbudMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_EarbudMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_EarbudMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_EarbudMode_Get.MSG_OFFSET + ProductInfo_EarbudMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_EarbudMode_Get.ID)
            self.hdr.SetDataLength(ProductInfo_EarbudMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.EarbudMode.Get"
    # Accessors
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMacAddress(self, idx):
        """Optional Bose Product Role-based Mac address"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_EarbudMode_Get.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('HEX')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMacAddress(self, value, idx):
        """Optional Bose Product Role-based Mac address"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_EarbudMode_Get.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MacAddress",type="int",units="HEX",minVal="0",maxVal="255",description="Optional Bose Product Role-based Mac address",get=GetMacAddress,set=SetMacAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("ProductInfo.EarbudMode.Get", ProductInfo_EarbudMode_Get.ID, ProductInfo_EarbudMode_Get)
#    obj/CodeGenerator/Python/ProductInfo/EarbudMode.py
#    Created 27/07/2023 at 10:11:00 from:
#        Messages = messages/ProductInfo/EarbudMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_EarbudMode_Status :
    ID = 291
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    EarbudMode = OrderedDict([("Unknown", 0), ("Master", 1), ("Puppet", 2)])
    ReverseEarbudMode = OrderedDict([(0, "Unknown"), (1, "Master"), (2, "Puppet")])
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 18), ("Operator", 3)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (18, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_EarbudMode_Status.MSG_OFFSET + ProductInfo_EarbudMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_EarbudMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_EarbudMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_EarbudMode_Status.MSG_OFFSET + ProductInfo_EarbudMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_EarbudMode_Status.ID)
            self.hdr.SetDataLength(ProductInfo_EarbudMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.EarbudMode.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEarbudMode(self, enumAsInt=0):
        """Earbud mode"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_EarbudMode_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = ProductInfo_EarbudMode_Status.ReverseEarbudMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEarbudMode(self, value):
        """Earbud mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = ProductInfo_EarbudMode_Status.EarbudMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_EarbudMode_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EarbudMode",type="enumeration",units="",minVal="0",maxVal="255",description="Earbud mode",get=GetEarbudMode,set=SetEarbudMode,count=1, bitfieldInfo = [], enum = [EarbudMode, ReverseEarbudMode])\
    ]

Messaging.Register("ProductInfo.EarbudMode.Status", ProductInfo_EarbudMode_Status.ID, ProductInfo_EarbudMode_Status)
