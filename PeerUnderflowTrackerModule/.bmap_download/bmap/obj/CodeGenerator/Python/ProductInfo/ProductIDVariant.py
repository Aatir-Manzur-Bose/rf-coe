#    obj/CodeGenerator/Python/ProductInfo/ProductIDVariant.py
#    Created 27/07/2023 at 10:11:02 from:
#        Messages = messages/ProductInfo/ProductIDVariant.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_ProductIDVariant_Get :
    ID = 49
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_ProductIDVariant_Get.MSG_OFFSET + ProductInfo_ProductIDVariant_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_ProductIDVariant_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_ProductIDVariant_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_ProductIDVariant_Get.MSG_OFFSET + ProductInfo_ProductIDVariant_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_ProductIDVariant_Get.ID)
            self.hdr.SetDataLength(ProductInfo_ProductIDVariant_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.ProductIDVariant.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("ProductInfo.ProductIDVariant.Get", ProductInfo_ProductIDVariant_Get.ID, ProductInfo_ProductIDVariant_Get)
#    obj/CodeGenerator/Python/ProductInfo/ProductIDVariant.py
#    Created 27/07/2023 at 10:11:02 from:
#        Messages = messages/ProductInfo/ProductIDVariant.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class ProductInfo_ProductIDVariant_Status :
    ID = 51
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ProductID = OrderedDict([("Drowsy", 2384), ("Bosebuild_1", 6249), ("Bosebuild_2", 6258), ("Champ", 16390), ("Moonraker", 16392), ("K-Cup", 16393), ("Isaac", 16394), ("Wolfcastle", 16396), ("Foreman", 16397), ("Cleopatra_Helios", 16398), ("Cleopatra_Selene", 16399), ("Folgers", 16400), ("Harvey", 16401), ("Ice", 16402), ("Flurry", 16403), ("Powder", 16404), ("Trapper", 16405), ("Kleos", 16407), ("Levi", 16408), ("Reserved_1", 16409), ("BayWolf", 16416), ("Atlas", 16417), ("Minnow", 16418), ("Goodyear", 16420), ("Eddie", 16422), ("Professor", 16423), ("Ginger-Cheevers", 16424), ("Woobie", 16425), ("Flipper", 16426), ("Beanie_Dev", 16427), ("Celine", 16428), ("Revel", 16429), ("Revel_Charging_Case", 16430), ("Lando", 16431), ("Lando_Charging_Case", 16432), ("Eddie_Club", 16433), ("BudLite", 16434), ("Taylor", 16435), ("BudLite_Dev", 16436), ("BudLite_Charging_Case", 16437), ("Beanie", 16438), ("Indy_1", 16439), ("Indy_2", 16440), ("Duran", 16441), ("Celine-2", 16460), ("Chibi", 41489), ("Baby_Yoda", 41491), ("GrandPrix", 41728), ("Reserved_2", 41729), ("Reserved_3", 41730), ("Williams", 41731), ("Mercedes", 41732), ("Gwen", 16442), ("Bullseye", 41735), ("Linus", 16444), ("SanDiego", 16445), ("Exeter", 16446), ("Lipton", 16447), ("Olivia", 16480), ("Vedder", 16481), ("Lizzo", 16482), ("Lizzo_Charging_Case", 16483), ("Smalls", 16484), ("Smalls_Charging_Case", 16485), ("LoneStarr", 16486), ("Serena_Charging_Case", 16487), ("Serena", 16488), ("Angus", 2381), ("Angus China", 6259), ("Phelps", 48217), ("Phelps-2", 48224), ("Cascade", 16640), ("Zakim", 2380), ("Malcolm", 2382), ("Malcolm China", 6260), ("Malcolm Club", 6261), ("Denzel", 2389), ("Stevie", 16489), ("Stevie Club", 16496), ("Stevie China", 16497), ("Scotty", 16498), ("Scotty_Charging_Case", 16499), ("Prince", 16501), ("Edelman", 2383), ("Gansbaai", 16502)])
    ReverseProductID = OrderedDict([(2384, "Drowsy"), (6249, "Bosebuild_1"), (6258, "Bosebuild_2"), (16390, "Champ"), (16392, "Moonraker"), (16393, "K-Cup"), (16394, "Isaac"), (16396, "Wolfcastle"), (16397, "Foreman"), (16398, "Cleopatra_Helios"), (16399, "Cleopatra_Selene"), (16400, "Folgers"), (16401, "Harvey"), (16402, "Ice"), (16403, "Flurry"), (16404, "Powder"), (16405, "Trapper"), (16407, "Kleos"), (16408, "Levi"), (16409, "Reserved_1"), (16416, "BayWolf"), (16417, "Atlas"), (16418, "Minnow"), (16420, "Goodyear"), (16422, "Eddie"), (16423, "Professor"), (16424, "Ginger-Cheevers"), (16425, "Woobie"), (16426, "Flipper"), (16427, "Beanie_Dev"), (16428, "Celine"), (16429, "Revel"), (16430, "Revel_Charging_Case"), (16431, "Lando"), (16432, "Lando_Charging_Case"), (16433, "Eddie_Club"), (16434, "BudLite"), (16435, "Taylor"), (16436, "BudLite_Dev"), (16437, "BudLite_Charging_Case"), (16438, "Beanie"), (16439, "Indy_1"), (16440, "Indy_2"), (16441, "Duran"), (16460, "Celine-2"), (41489, "Chibi"), (41491, "Baby_Yoda"), (41728, "GrandPrix"), (41729, "Reserved_2"), (41730, "Reserved_3"), (41731, "Williams"), (41732, "Mercedes"), (16442, "Gwen"), (41735, "Bullseye"), (16444, "Linus"), (16445, "SanDiego"), (16446, "Exeter"), (16447, "Lipton"), (16480, "Olivia"), (16481, "Vedder"), (16482, "Lizzo"), (16483, "Lizzo_Charging_Case"), (16484, "Smalls"), (16485, "Smalls_Charging_Case"), (16486, "LoneStarr"), (16487, "Serena_Charging_Case"), (16488, "Serena"), (2381, "Angus"), (6259, "Angus China"), (48217, "Phelps"), (48224, "Phelps-2"), (16640, "Cascade"), (2380, "Zakim"), (2382, "Malcolm"), (6260, "Malcolm China"), (6261, "Malcolm Club"), (2389, "Denzel"), (16489, "Stevie"), (16496, "Stevie Club"), (16497, "Stevie China"), (16498, "Scotty"), (16499, "Scotty_Charging_Case"), (16501, "Prince"), (2383, "Edelman"), (16502, "Gansbaai")])
    IDs = OrderedDict([("FunctionBlock", 0), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(0, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(ProductInfo_ProductIDVariant_Status.MSG_OFFSET + ProductInfo_ProductIDVariant_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, ProductInfo_ProductIDVariant_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, ProductInfo_ProductIDVariant_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(ProductInfo_ProductIDVariant_Status.MSG_OFFSET + ProductInfo_ProductIDVariant_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(ProductInfo_ProductIDVariant_Status.ID)
            self.hdr.SetDataLength(ProductInfo_ProductIDVariant_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "ProductInfo.ProductIDVariant.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetProductID(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), ProductInfo_ProductIDVariant_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = ProductInfo_ProductIDVariant_Status.ReverseProductID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetVariantID(self):
        """Product-specific variant id"""
        value = struct.unpack_from('B', self.rawBuffer(), ProductInfo_ProductIDVariant_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetProductID(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = ProductInfo_ProductIDVariant_Status.ProductID.get(value, defaultValue)
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), ProductInfo_ProductIDVariant_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetVariantID(self, value):
        """Product-specific variant id"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), ProductInfo_ProductIDVariant_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ProductID",type="enumeration",units="Enum",minVal="0",maxVal="65535",description="",get=GetProductID,set=SetProductID,count=1, bitfieldInfo = [], enum = [ProductID, ReverseProductID]),\
        FieldInfo(name="VariantID",type="int",units="",minVal="0",maxVal="255",description="Product-specific variant id",get=GetVariantID,set=SetVariantID,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("ProductInfo.ProductIDVariant.Status", ProductInfo_ProductIDVariant_Status.ID, ProductInfo_ProductIDVariant_Status)
