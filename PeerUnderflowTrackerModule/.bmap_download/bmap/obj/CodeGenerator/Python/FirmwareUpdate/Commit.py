#    obj/CodeGenerator/Python/FirmwareUpdate/Commit.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/Commit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Commit_Get :
    ID = 12465
    SIZE = 80
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Get.MSG_OFFSET + FirmwareUpdate_Commit_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Commit_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Commit_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Get.MSG_OFFSET + FirmwareUpdate_Commit_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Commit_Get.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Commit_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Commit.Get"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(80)
    def GetBuildIdentifer(self):
        """Optional string to identify the image to be committed."""
        count = 80
        if count > len(self.rawBuffer())-(FirmwareUpdate_Commit_Get.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(FirmwareUpdate_Commit_Get.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), FirmwareUpdate_Commit_Get.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(80)
    def SetBuildIdentifer(self, value):
        """Optional string to identify the image to be committed."""
        tmp = value.encode('utf-8')
        struct.pack_into('80s', self.rawBuffer(), FirmwareUpdate_Commit_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BuildIdentifer",type="string",units="ASCII",minVal="0",maxVal="255",description="Optional string to identify the image to be committed.",get=GetBuildIdentifer,set=SetBuildIdentifer,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("FirmwareUpdate.Commit.Get", FirmwareUpdate_Commit_Get.ID, FirmwareUpdate_Commit_Get)
#    obj/CodeGenerator/Python/FirmwareUpdate/Commit.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/Commit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Commit_Start :
    ID = 12469
    SIZE = 80
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 11), ("Operator", 5)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (11, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Start.MSG_OFFSET + FirmwareUpdate_Commit_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Commit_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Commit_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Start.MSG_OFFSET + FirmwareUpdate_Commit_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Commit_Start.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Commit_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Commit.Start"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(80)
    def GetBuildIdentifer(self):
        """Optional string to identify the image to be committed."""
        count = 80
        if count > len(self.rawBuffer())-(FirmwareUpdate_Commit_Start.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(FirmwareUpdate_Commit_Start.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), FirmwareUpdate_Commit_Start.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(80)
    def SetBuildIdentifer(self, value):
        """Optional string to identify the image to be committed."""
        tmp = value.encode('utf-8')
        struct.pack_into('80s', self.rawBuffer(), FirmwareUpdate_Commit_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BuildIdentifer",type="string",units="ASCII",minVal="0",maxVal="255",description="Optional string to identify the image to be committed.",get=GetBuildIdentifer,set=SetBuildIdentifer,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("FirmwareUpdate.Commit.Start", FirmwareUpdate_Commit_Start.ID, FirmwareUpdate_Commit_Start)
#    obj/CodeGenerator/Python/FirmwareUpdate/Commit.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/Commit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Commit_Status :
    ID = 12467
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Status.MSG_OFFSET + FirmwareUpdate_Commit_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Commit_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Commit_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Status.MSG_OFFSET + FirmwareUpdate_Commit_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Commit_Status.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Commit_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Commit.Status"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Commit.Status", FirmwareUpdate_Commit_Status.ID, FirmwareUpdate_Commit_Status)
#    obj/CodeGenerator/Python/FirmwareUpdate/Commit.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/Commit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Commit_Result :
    ID = 12470
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 11), ("Operator", 6)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (11, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Result.MSG_OFFSET + FirmwareUpdate_Commit_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Commit_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Commit_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Result.MSG_OFFSET + FirmwareUpdate_Commit_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Commit_Result.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Commit_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Commit.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Commit.Result", FirmwareUpdate_Commit_Result.ID, FirmwareUpdate_Commit_Result)
#    obj/CodeGenerator/Python/FirmwareUpdate/Commit.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/Commit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Commit_Error :
    ID = 12468
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 11), ("Operator", 4)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (11, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Error.MSG_OFFSET + FirmwareUpdate_Commit_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Commit_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Commit_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Commit_Error.MSG_OFFSET + FirmwareUpdate_Commit_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Commit_Error.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Commit_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Commit.Error"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Commit.Error", FirmwareUpdate_Commit_Error.ID, FirmwareUpdate_Commit_Error)
