#    obj/CodeGenerator/Python/FirmwareUpdate/DataTransferProgress.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/DataTransferProgress.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_DataTransferProgress_Get :
    ID = 12545
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 16), ("Operator", 1)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (16, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_DataTransferProgress_Get.MSG_OFFSET + FirmwareUpdate_DataTransferProgress_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_DataTransferProgress_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_DataTransferProgress_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_DataTransferProgress_Get.MSG_OFFSET + FirmwareUpdate_DataTransferProgress_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_DataTransferProgress_Get.ID)
            self.hdr.SetDataLength(FirmwareUpdate_DataTransferProgress_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.DataTransferProgress.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.DataTransferProgress.Get", FirmwareUpdate_DataTransferProgress_Get.ID, FirmwareUpdate_DataTransferProgress_Get)
#    obj/CodeGenerator/Python/FirmwareUpdate/DataTransferProgress.py
#    Created 27/07/2023 at 10:10:43 from:
#        Messages = messages/FirmwareUpdate/DataTransferProgress.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_DataTransferProgress_Status :
    ID = 12547
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_DataTransferProgress_Status.MSG_OFFSET + FirmwareUpdate_DataTransferProgress_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_DataTransferProgress_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_DataTransferProgress_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_DataTransferProgress_Status.MSG_OFFSET + FirmwareUpdate_DataTransferProgress_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_DataTransferProgress_Status.ID)
            self.hdr.SetDataLength(FirmwareUpdate_DataTransferProgress_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.DataTransferProgress.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetoverallOtaUpdateDataTransferProgressPercentage(self):
        """Overall OTA update data transfer progress status in percentage including data transfer to the primary device and all the sub-components. It will not report 100 percent until all subcomponents have received the update data (that is, it will not round up to 100 percent). When the data transfer to the primary device or the subcomponent is not active, this will return the overall progress made so far in percentage."""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_DataTransferProgress_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetoverallOtaUpdateDataTransferProgressPercentage(self, value):
        """Overall OTA update data transfer progress status in percentage including data transfer to the primary device and all the sub-components. It will not report 100 percent until all subcomponents have received the update data (that is, it will not round up to 100 percent). When the data transfer to the primary device or the subcomponent is not active, this will return the overall progress made so far in percentage."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_DataTransferProgress_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="overallOtaUpdateDataTransferProgressPercentage",type="int",units="",minVal="0",maxVal="255",description="Overall OTA update data transfer progress status in percentage including data transfer to the primary device and all the sub-components. It will not report 100 percent until all subcomponents have received the update data (that is, it will not round up to 100 percent). When the data transfer to the primary device or the subcomponent is not active, this will return the overall progress made so far in percentage.",get=GetoverallOtaUpdateDataTransferProgressPercentage,set=SetoverallOtaUpdateDataTransferProgressPercentage,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("FirmwareUpdate.DataTransferProgress.Status", FirmwareUpdate_DataTransferProgress_Status.ID, FirmwareUpdate_DataTransferProgress_Status)
