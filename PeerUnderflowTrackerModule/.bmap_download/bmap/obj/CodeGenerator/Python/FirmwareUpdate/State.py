#    obj/CodeGenerator/Python/FirmwareUpdate/State.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_State_Get :
    ID = 12305
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 1), ("Operator", 1)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (1, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_State_Get.MSG_OFFSET + FirmwareUpdate_State_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_State_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_State_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_State_Get.MSG_OFFSET + FirmwareUpdate_State_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_State_Get.ID)
            self.hdr.SetDataLength(FirmwareUpdate_State_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.State.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.State.Get", FirmwareUpdate_State_Get.ID, FirmwareUpdate_State_Get)
#    obj/CodeGenerator/Python/FirmwareUpdate/State.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_State_Status :
    ID = 12307
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FirmwareUpdateStates = OrderedDict([("Error", 0), ("Idle", 1), ("DataTx", 2), ("Validate", 3), ("RunUpdate", 4), ("ValidatePending", 5), ("PeripheralUpdatePending", 6)])
    ReverseFirmwareUpdateStates = OrderedDict([(0, "Error"), (1, "Idle"), (2, "DataTx"), (3, "Validate"), (4, "RunUpdate"), (5, "ValidatePending"), (6, "PeripheralUpdatePending")])
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 1), ("Operator", 3)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (1, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_State_Status.MSG_OFFSET + FirmwareUpdate_State_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_State_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_State_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_State_Status.MSG_OFFSET + FirmwareUpdate_State_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_State_Status.ID)
            self.hdr.SetDataLength(FirmwareUpdate_State_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.State.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetcurrentFwuState(self, enumAsInt=0):
        """Current FWU state of device"""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_State_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = FirmwareUpdate_State_Status.ReverseFirmwareUpdateStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetcurrentFwuState(self, value):
        """Current FWU state of device"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = FirmwareUpdate_State_Status.FirmwareUpdateStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_State_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="currentFwuState",type="enumeration",units="",minVal="0",maxVal="255",description="Current FWU state of device",get=GetcurrentFwuState,set=SetcurrentFwuState,count=1, bitfieldInfo = [], enum = [FirmwareUpdateStates, ReverseFirmwareUpdateStates])\
    ]

Messaging.Register("FirmwareUpdate.State.Status", FirmwareUpdate_State_Status.ID, FirmwareUpdate_State_Status)
