#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Start :
    ID = 12325
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FirmwareImageTargets = OrderedDict([("InternalFlash", 0), ("ExternalFlash", 1), ("InvalidFlashSource", 255)])
    ReverseFirmwareImageTargets = OrderedDict([(0, "InternalFlash"), (1, "ExternalFlash"), (255, "InvalidFlashSource")])
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 5)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Start.MSG_OFFSET + FirmwareUpdate_Init_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Start.MSG_OFFSET + FirmwareUpdate_Init_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Start.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFirmwareImageTarget(self, enumAsInt=0):
        """Firmware image target"""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = FirmwareUpdate_Init_Start.ReverseFirmwareImageTargets.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetBytesWritten(self):
        """Number of bytes successfully written."""
        value = struct.unpack_from('>L', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def GetImageSize(self):
        """Image size in bytes."""
        value = struct.unpack_from('>L', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(51)
    def GetFirmwareVersion(self):
        """Update image firmware version"""
        count = 51
        if count > len(self.rawBuffer())-(FirmwareUpdate_Init_Start.MSG_OFFSET + 9):
            count = len(self.rawBuffer())-(FirmwareUpdate_Init_Start.MSG_OFFSET + 9)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 9)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFirmwareImageTarget(self, value):
        """Firmware image target"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = FirmwareUpdate_Init_Start.FirmwareImageTargets.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetBytesWritten(self, value):
        """Number of bytes successfully written."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def SetImageSize(self, value):
        """Image size in bytes."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 5, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(51)
    def SetFirmwareVersion(self, value):
        """Update image firmware version"""
        tmp = value.encode('utf-8')
        struct.pack_into('51s', self.rawBuffer(), FirmwareUpdate_Init_Start.MSG_OFFSET + 9, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FirmwareImageTarget",type="enumeration",units="",minVal="0",maxVal="255",description="Firmware image target",get=GetFirmwareImageTarget,set=SetFirmwareImageTarget,count=1, bitfieldInfo = [], enum = [FirmwareImageTargets, ReverseFirmwareImageTargets]),\
        FieldInfo(name="BytesWritten",type="int",units="",minVal="0",maxVal="4294967295",description="Number of bytes successfully written.",get=GetBytesWritten,set=SetBytesWritten,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ImageSize",type="int",units="",minVal="0",maxVal="4294967295",description="Image size in bytes.",get=GetImageSize,set=SetImageSize,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FirmwareVersion",type="string",units="ASCII",minVal="0",maxVal="255",description="Update image firmware version",get=GetFirmwareVersion,set=SetFirmwareVersion,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("FirmwareUpdate.Init.Start", FirmwareUpdate_Init_Start.ID, FirmwareUpdate_Init_Start)
#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Processing :
    ID = 12327
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 7)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Processing.MSG_OFFSET + FirmwareUpdate_Init_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Processing.MSG_OFFSET + FirmwareUpdate_Init_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Processing.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Init.Processing", FirmwareUpdate_Init_Processing.ID, FirmwareUpdate_Init_Processing)
#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Result :
    ID = 12326
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 6)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Result.MSG_OFFSET + FirmwareUpdate_Init_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Result.MSG_OFFSET + FirmwareUpdate_Init_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Result.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Init.Result", FirmwareUpdate_Init_Result.ID, FirmwareUpdate_Init_Result)
#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Get :
    ID = 12321
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Get.MSG_OFFSET + FirmwareUpdate_Init_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Get.MSG_OFFSET + FirmwareUpdate_Init_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Get.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Init.Get", FirmwareUpdate_Init_Get.ID, FirmwareUpdate_Init_Get)
#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Status :
    ID = 12323
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    InitReadyStatus = OrderedDict([("Ready", 0), ("Not Ready", 1), ("Peer Not Connected", 2), ("Peer Not On Charger", 4)])
    ReverseInitReadyStatus = OrderedDict([(0, "Ready"), (1, "Not Ready"), (2, "Peer Not Connected"), (4, "Peer Not On Charger")])
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Status.MSG_OFFSET + FirmwareUpdate_Init_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Status.MSG_OFFSET + FirmwareUpdate_Init_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Status.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFwuStatus(self, enumAsInt=0):
        """0x00 if product is ready to start update and all conditions are met to perform operation (i.e. battery level is sufficiently high, etc.). Any bit set indicates that the product is not ready to start the update.  The update process can send FirmwareUpdate.Init.Start if the ready status is 0x00. More status info is available for some of the products."""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_Init_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = FirmwareUpdate_Init_Status.ReverseInitReadyStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFwuStatus(self, value):
        """0x00 if product is ready to start update and all conditions are met to perform operation (i.e. battery level is sufficiently high, etc.). Any bit set indicates that the product is not ready to start the update.  The update process can send FirmwareUpdate.Init.Start if the ready status is 0x00. More status info is available for some of the products."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = FirmwareUpdate_Init_Status.InitReadyStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_Init_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FwuStatus",type="enumeration",units="",minVal="0",maxVal="255",description="0x00 if product is ready to start update and all conditions are met to perform operation (i.e. battery level is sufficiently high, etc.). Any bit set indicates that the product is not ready to start the update.  The update process can send FirmwareUpdate.Init.Start if the ready status is 0x00. More status info is available for some of the products.",get=GetFwuStatus,set=SetFwuStatus,count=1, bitfieldInfo = [], enum = [InitReadyStatus, ReverseInitReadyStatus])\
    ]

Messaging.Register("FirmwareUpdate.Init.Status", FirmwareUpdate_Init_Status.ID, FirmwareUpdate_Init_Status)
#    obj/CodeGenerator/Python/FirmwareUpdate/Init.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Init.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Init_Error :
    ID = 12324
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 2), ("Operator", 4)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (2, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Error.MSG_OFFSET + FirmwareUpdate_Init_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Init_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Init_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Init_Error.MSG_OFFSET + FirmwareUpdate_Init_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Init_Error.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Init_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Init.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCodes(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_Init_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = FirmwareUpdate_Init_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCodes(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = FirmwareUpdate_Init_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_Init_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCodes",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCodes,set=SetErrorCodes,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("FirmwareUpdate.Init.Error", FirmwareUpdate_Init_Error.ID, FirmwareUpdate_Init_Error)
