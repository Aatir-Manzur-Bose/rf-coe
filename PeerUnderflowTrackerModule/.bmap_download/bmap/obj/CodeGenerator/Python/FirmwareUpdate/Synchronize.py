#    obj/CodeGenerator/Python/FirmwareUpdate/Synchronize.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Synchronize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Synchronize_Get :
    ID = 12353
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Synchronize_Get.MSG_OFFSET + FirmwareUpdate_Synchronize_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Synchronize_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Synchronize_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Synchronize_Get.MSG_OFFSET + FirmwareUpdate_Synchronize_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Synchronize_Get.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Synchronize_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Synchronize.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("FirmwareUpdate.Synchronize.Get", FirmwareUpdate_Synchronize_Get.ID, FirmwareUpdate_Synchronize_Get)
#    obj/CodeGenerator/Python/FirmwareUpdate/Synchronize.py
#    Created 27/07/2023 at 10:10:44 from:
#        Messages = messages/FirmwareUpdate/Synchronize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FirmwareUpdate_Synchronize_Status :
    ID = 12355
    SIZE = 56
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FirmwareImageTargets = OrderedDict([("InternalFlash", 0), ("ExternalFlash", 1), ("InvalidFlashSource", 255)])
    ReverseFirmwareImageTargets = OrderedDict([(0, "InternalFlash"), (1, "ExternalFlash"), (255, "InvalidFlashSource")])
    IDs = OrderedDict([("FunctionBlock", 3), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(3, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(FirmwareUpdate_Synchronize_Status.MSG_OFFSET + FirmwareUpdate_Synchronize_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, FirmwareUpdate_Synchronize_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, FirmwareUpdate_Synchronize_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FirmwareUpdate_Synchronize_Status.MSG_OFFSET + FirmwareUpdate_Synchronize_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(FirmwareUpdate_Synchronize_Status.ID)
            self.hdr.SetDataLength(FirmwareUpdate_Synchronize_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FirmwareUpdate.Synchronize.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFirmwareImageTarget(self, enumAsInt=0):
        """Firmware image target"""
        value = struct.unpack_from('B', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = FirmwareUpdate_Synchronize_Status.ReverseFirmwareImageTargets.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetBytesWritten(self):
        """Number of bytes successfully written."""
        value = struct.unpack_from('>L', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(51)
    def GetFirmwareVersion(self):
        """Update image firmware version"""
        count = 51
        if count > len(self.rawBuffer())-(FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 5):
            count = len(self.rawBuffer())-(FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 5)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 5)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFirmwareImageTarget(self, value):
        """Firmware image target"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = FirmwareUpdate_Synchronize_Status.FirmwareImageTargets.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetBytesWritten(self, value):
        """Number of bytes successfully written."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(51)
    def SetFirmwareVersion(self, value):
        """Update image firmware version"""
        tmp = value.encode('utf-8')
        struct.pack_into('51s', self.rawBuffer(), FirmwareUpdate_Synchronize_Status.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FirmwareImageTarget",type="enumeration",units="",minVal="0",maxVal="255",description="Firmware image target",get=GetFirmwareImageTarget,set=SetFirmwareImageTarget,count=1, bitfieldInfo = [], enum = [FirmwareImageTargets, ReverseFirmwareImageTargets]),\
        FieldInfo(name="BytesWritten",type="int",units="",minVal="0",maxVal="4294967295",description="Number of bytes successfully written.",get=GetBytesWritten,set=SetBytesWritten,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FirmwareVersion",type="string",units="ASCII",minVal="0",maxVal="255",description="Update image firmware version",get=GetFirmwareVersion,set=SetFirmwareVersion,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("FirmwareUpdate.Synchronize.Status", FirmwareUpdate_Synchronize_Status.ID, FirmwareUpdate_Synchronize_Status)
