#    obj/CodeGenerator/Python/AugmentedReality/ARAnalytics.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AugmentedReality/ARAnalytics.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AugmentedReality_ARAnalytics_Get :
    ID = 86065
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 21), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(21, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_Get.MSG_OFFSET + AugmentedReality_ARAnalytics_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AugmentedReality_ARAnalytics_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AugmentedReality_ARAnalytics_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_Get.MSG_OFFSET + AugmentedReality_ARAnalytics_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AugmentedReality_ARAnalytics_Get.ID)
            self.hdr.SetDataLength(AugmentedReality_ARAnalytics_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AugmentedReality.ARAnalytics.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AugmentedReality.ARAnalytics.Get", AugmentedReality_ARAnalytics_Get.ID, AugmentedReality_ARAnalytics_Get)
#    obj/CodeGenerator/Python/AugmentedReality/ARAnalytics.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AugmentedReality/ARAnalytics.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AugmentedReality_ARAnalytics_SetGet :
    ID = 86066
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 21), ("Function", 3), ("Operator", 2)])
    ReverseIDs = OrderedDict([(21, "FunctionBlock"), (3, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_SetGet.MSG_OFFSET + AugmentedReality_ARAnalytics_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AugmentedReality_ARAnalytics_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AugmentedReality_ARAnalytics_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_SetGet.MSG_OFFSET + AugmentedReality_ARAnalytics_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AugmentedReality_ARAnalytics_SetGet.ID)
            self.hdr.SetDataLength(AugmentedReality_ARAnalytics_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AugmentedReality.ARAnalytics.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResetSensorLogInfo(self):
        """Reset sensor related log information (0 == no action, 1 == reset)."""
        value = struct.unpack_from('B', self.rawBuffer(), AugmentedReality_ARAnalytics_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResetSensorLogInfo(self, value):
        """Reset sensor related log information (0 == no action, 1 == reset)."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AugmentedReality_ARAnalytics_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ResetSensorLogInfo",type="int",units="",minVal="0",maxVal="255",description="Reset sensor related log information (0 == no action, 1 == reset).",get=GetResetSensorLogInfo,set=SetResetSensorLogInfo,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AugmentedReality.ARAnalytics.SetGet", AugmentedReality_ARAnalytics_SetGet.ID, AugmentedReality_ARAnalytics_SetGet)
#    obj/CodeGenerator/Python/AugmentedReality/ARAnalytics.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AugmentedReality/ARAnalytics.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AugmentedReality_ARAnalytics_Status :
    ID = 86067
    SIZE = 254
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 21), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(21, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_Status.MSG_OFFSET + AugmentedReality_ARAnalytics_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AugmentedReality_ARAnalytics_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AugmentedReality_ARAnalytics_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AugmentedReality_ARAnalytics_Status.MSG_OFFSET + AugmentedReality_ARAnalytics_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AugmentedReality_ARAnalytics_Status.ID)
            self.hdr.SetDataLength(AugmentedReality_ARAnalytics_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AugmentedReality.ARAnalytics.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetIMUVolumeControlCounter1(self):
        """IMUVolumeControl usage count in A2dp mode"""
        value = struct.unpack_from('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetIMUVolumeControlCounter2(self):
        """IMUVolumeControl usage count in Hfp mode"""
        value = struct.unpack_from('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetIMUVolumeControlCounter3(self):
        """IMUVolumeControl usage count in Idle mode"""
        value = struct.unpack_from('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetVoiceDialCounter(self):
        """VoiceDial usage count"""
        value = struct.unpack_from('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(246)
    def GetReserved(self, idx):
        """Reserved for future use"""
        value = struct.unpack_from('B', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 8+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetIMUVolumeControlCounter1(self, value):
        """IMUVolumeControl usage count in A2dp mode"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetIMUVolumeControlCounter2(self, value):
        """IMUVolumeControl usage count in Hfp mode"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetIMUVolumeControlCounter3(self, value):
        """IMUVolumeControl usage count in Idle mode"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetVoiceDialCounter(self, value):
        """VoiceDial usage count"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(246)
    def SetReserved(self, value, idx):
        """Reserved for future use"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AugmentedReality_ARAnalytics_Status.MSG_OFFSET + 8+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="IMUVolumeControlCounter1",type="int",units="",minVal="0",maxVal="65535",description="IMUVolumeControl usage count in A2dp mode",get=GetIMUVolumeControlCounter1,set=SetIMUVolumeControlCounter1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="IMUVolumeControlCounter2",type="int",units="",minVal="0",maxVal="65535",description="IMUVolumeControl usage count in Hfp mode",get=GetIMUVolumeControlCounter2,set=SetIMUVolumeControlCounter2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="IMUVolumeControlCounter3",type="int",units="",minVal="0",maxVal="65535",description="IMUVolumeControl usage count in Idle mode",get=GetIMUVolumeControlCounter3,set=SetIMUVolumeControlCounter3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VoiceDialCounter",type="int",units="",minVal="0",maxVal="65535",description="VoiceDial usage count",get=GetVoiceDialCounter,set=SetVoiceDialCounter,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="255",description="Reserved for future use",get=GetReserved,set=SetReserved,count=246, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AugmentedReality.ARAnalytics.Status", AugmentedReality_ARAnalytics_Status.ID, AugmentedReality_ARAnalytics_Status)
