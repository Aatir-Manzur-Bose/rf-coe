#    obj/CodeGenerator/Python/Control/FitQuality.py
#    Created 27/07/2023 at 10:10:01 from:
#        Messages = messages/Control/FitQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_FitQuality_Start :
    ID = 28917
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 15), ("Operator", 5)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (15, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_FitQuality_Start.MSG_OFFSET + Control_FitQuality_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_FitQuality_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_FitQuality_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_FitQuality_Start.MSG_OFFSET + Control_FitQuality_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_FitQuality_Start.ID)
            self.hdr.SetDataLength(Control_FitQuality_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.FitQuality.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.FitQuality.Start", Control_FitQuality_Start.ID, Control_FitQuality_Start)
#    obj/CodeGenerator/Python/Control/FitQuality.py
#    Created 27/07/2023 at 10:10:01 from:
#        Messages = messages/Control/FitQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_FitQuality_Processing :
    ID = 28919
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 15), ("Operator", 7)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (15, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_FitQuality_Processing.MSG_OFFSET + Control_FitQuality_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_FitQuality_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_FitQuality_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_FitQuality_Processing.MSG_OFFSET + Control_FitQuality_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_FitQuality_Processing.ID)
            self.hdr.SetDataLength(Control_FitQuality_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.FitQuality.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.FitQuality.Processing", Control_FitQuality_Processing.ID, Control_FitQuality_Processing)
#    obj/CodeGenerator/Python/Control/FitQuality.py
#    Created 27/07/2023 at 10:10:01 from:
#        Messages = messages/Control/FitQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_FitQuality_Status :
    ID = 28915
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FitQualityLevel = OrderedDict([("fit_quality_free_air", 0), ("fit_quality_non_customizable", 1), ("fit_quality_customizable", 2)])
    ReverseFitQualityLevel = OrderedDict([(0, "fit_quality_free_air"), (1, "fit_quality_non_customizable"), (2, "fit_quality_customizable")])
    PersonalizationResult = OrderedDict([("personalization_complete", 0), ("error_not_donned", 1), ("error_in_call", 2), ("error_audio_streaming", 3), ("error_disconnected", 4), ("error_timeout", 5), ("error_busy", 6), ("error_not_suported", 7)])
    ReversePersonalizationResult = OrderedDict([(0, "personalization_complete"), (1, "error_not_donned"), (2, "error_in_call"), (3, "error_audio_streaming"), (4, "error_disconnected"), (5, "error_timeout"), (6, "error_busy"), (7, "error_not_suported")])
    PersonalizationDebugInfo = OrderedDict([("success", 0), ("error", 1)])
    ReversePersonalizationDebugInfo = OrderedDict([(0, "success"), (1, "error")])
    BudOrientation = OrderedDict([("Unspecified", 0), ("Left", 1), ("Right", 2)])
    ReverseBudOrientation = OrderedDict([(0, "Unspecified"), (1, "Left"), (2, "Right")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 15), ("Operator", 3)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (15, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_FitQuality_Status.MSG_OFFSET + Control_FitQuality_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_FitQuality_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_FitQuality_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_FitQuality_Status.MSG_OFFSET + Control_FitQuality_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_FitQuality_Status.ID)
            self.hdr.SetDataLength(Control_FitQuality_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.FitQuality.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBudOrientation(self, enumAsInt=0):
        """Bud Orientation"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_FitQuality_Status.ReverseBudOrientation.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetBudPersonalizationStatus(self, enumAsInt=0):
        """Bud Personalization status"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Control_FitQuality_Status.ReversePersonalizationResult.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetPersonalizationDebugInfo(self, enumAsInt=0):
        """ANR Personalization result"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Control_FitQuality_Status.ReversePersonalizationDebugInfo.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetFitQualityLevel(self, enumAsInt=0):
        """Bud Fit Quality level"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Control_FitQuality_Status.ReverseFitQualityLevel.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBudOrientation(self, value):
        """Bud Orientation"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_FitQuality_Status.BudOrientation.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetBudPersonalizationStatus(self, value):
        """Bud Personalization status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_FitQuality_Status.PersonalizationResult.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetPersonalizationDebugInfo(self, value):
        """ANR Personalization result"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_FitQuality_Status.PersonalizationDebugInfo.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetFitQualityLevel(self, value):
        """Bud Fit Quality level"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_FitQuality_Status.FitQualityLevel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_FitQuality_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BudOrientation",type="enumeration",units="",minVal="0",maxVal="255",description="Bud Orientation",get=GetBudOrientation,set=SetBudOrientation,count=1, bitfieldInfo = [], enum = [BudOrientation, ReverseBudOrientation]),\
        FieldInfo(name="BudPersonalizationStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Bud Personalization status",get=GetBudPersonalizationStatus,set=SetBudPersonalizationStatus,count=1, bitfieldInfo = [], enum = [PersonalizationResult, ReversePersonalizationResult]),\
        FieldInfo(name="PersonalizationDebugInfo",type="enumeration",units="",minVal="0",maxVal="255",description="ANR Personalization result",get=GetPersonalizationDebugInfo,set=SetPersonalizationDebugInfo,count=1, bitfieldInfo = [], enum = [PersonalizationDebugInfo, ReversePersonalizationDebugInfo]),\
        FieldInfo(name="FitQualityLevel",type="enumeration",units="",minVal="0",maxVal="255",description="Bud Fit Quality level",get=GetFitQualityLevel,set=SetFitQualityLevel,count=1, bitfieldInfo = [], enum = [FitQualityLevel, ReverseFitQualityLevel])\
    ]

Messaging.Register("Control.FitQuality.Status", Control_FitQuality_Status.ID, Control_FitQuality_Status)
#    obj/CodeGenerator/Python/Control/FitQuality.py
#    Created 27/07/2023 at 10:10:01 from:
#        Messages = messages/Control/FitQuality.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_FitQuality_Result :
    ID = 28918
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 15), ("Operator", 6)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (15, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_FitQuality_Result.MSG_OFFSET + Control_FitQuality_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_FitQuality_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_FitQuality_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_FitQuality_Result.MSG_OFFSET + Control_FitQuality_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_FitQuality_Result.ID)
            self.hdr.SetDataLength(Control_FitQuality_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.FitQuality.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.FitQuality.Result", Control_FitQuality_Result.ID, Control_FitQuality_Result)
