#    obj/CodeGenerator/Python/Control/Chirp.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/Chirp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_Chirp_Get :
    ID = 28705
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_Chirp_Get.MSG_OFFSET + Control_Chirp_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_Chirp_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_Chirp_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_Chirp_Get.MSG_OFFSET + Control_Chirp_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_Chirp_Get.ID)
            self.hdr.SetDataLength(Control_Chirp_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.Chirp.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.Chirp.Get", Control_Chirp_Get.ID, Control_Chirp_Get)
#    obj/CodeGenerator/Python/Control/Chirp.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/Chirp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_Chirp_Start :
    ID = 28709
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ChirpValue = OrderedDict([("End", 0), ("Begin", 1), ("Continue", 2)])
    ReverseChirpValue = OrderedDict([(0, "End"), (1, "Begin"), (2, "Continue")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 2), ("Operator", 5)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (2, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_Chirp_Start.MSG_OFFSET + Control_Chirp_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_Chirp_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_Chirp_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_Chirp_Start.MSG_OFFSET + Control_Chirp_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_Chirp_Start.ID)
            self.hdr.SetDataLength(Control_Chirp_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.Chirp.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCommand(self, enumAsInt=0):
        """Chirp command"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_Chirp_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_Chirp_Start.ReverseChirpValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCommand(self, value):
        """Chirp command"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_Chirp_Start.ChirpValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_Chirp_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Command",type="enumeration",units="",minVal="0",maxVal="255",description="Chirp command",get=GetCommand,set=SetCommand,count=1, bitfieldInfo = [], enum = [ChirpValue, ReverseChirpValue])\
    ]

Messaging.Register("Control.Chirp.Start", Control_Chirp_Start.ID, Control_Chirp_Start)
#    obj/CodeGenerator/Python/Control/Chirp.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/Chirp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_Chirp_Result :
    ID = 28710
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 2), ("Operator", 6)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (2, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_Chirp_Result.MSG_OFFSET + Control_Chirp_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_Chirp_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_Chirp_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_Chirp_Result.MSG_OFFSET + Control_Chirp_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_Chirp_Result.ID)
            self.hdr.SetDataLength(Control_Chirp_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.Chirp.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTimeDuration(self):
        """The time-duration of the Chirp sequence is greater than the payload value in seconds"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_Chirp_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTimeDuration(self, value):
        """The time-duration of the Chirp sequence is greater than the payload value in seconds"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_Chirp_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TimeDuration",type="int",units="",minVal="0",maxVal="255",description="The time-duration of the Chirp sequence is greater than the payload value in seconds",get=GetTimeDuration,set=SetTimeDuration,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Control.Chirp.Result", Control_Chirp_Result.ID, Control_Chirp_Result)
#    obj/CodeGenerator/Python/Control/Chirp.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/Chirp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_Chirp_Error :
    ID = 28708
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 2), ("Operator", 4)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (2, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_Chirp_Error.MSG_OFFSET + Control_Chirp_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_Chirp_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_Chirp_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_Chirp_Error.MSG_OFFSET + Control_Chirp_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_Chirp_Error.ID)
            self.hdr.SetDataLength(Control_Chirp_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.Chirp.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorResponseCodes(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_Chirp_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_Chirp_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorResponseCodes(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_Chirp_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_Chirp_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorResponseCodes",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorResponseCodes,set=SetErrorResponseCodes,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("Control.Chirp.Error", Control_Chirp_Error.ID, Control_Chirp_Error)
#    obj/CodeGenerator/Python/Control/Chirp.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/Chirp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_Chirp_Status :
    ID = 28707
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ChirpEndReason = OrderedDict([("CHIRP_NO_END", 0), ("CHRIP_DEVICE_END", 1), ("CHIRP_TIMER_END", 2), ("CHIRP_APP_END", 3), ("CHIRP_CRADLE_END", 4)])
    ReverseChirpEndReason = OrderedDict([(0, "CHIRP_NO_END"), (1, "CHRIP_DEVICE_END"), (2, "CHIRP_TIMER_END"), (3, "CHIRP_APP_END"), (4, "CHIRP_CRADLE_END")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_Chirp_Status.MSG_OFFSET + Control_Chirp_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_Chirp_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_Chirp_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_Chirp_Status.MSG_OFFSET + Control_Chirp_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_Chirp_Status.ID)
            self.hdr.SetDataLength(Control_Chirp_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.Chirp.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Status of chirp"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_Chirp_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetChirpCurrentStatus(self):
        """Chirp is currently in progress [1 == yes, 0 == no]"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetChirpEndReason(self, enumAsInt=0):
        """"""
        value = (self.GetStatus() >> 1) & 0x7
        if not enumAsInt:
            value = Control_Chirp_Status.ReverseChirpEndReason.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """UnusedBits"""
        value = (self.GetStatus() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Status of chirp"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_Chirp_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetChirpCurrentStatus(self, value):
        """Chirp is currently in progress [1 == yes, 0 == no]"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetChirpEndReason(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_Chirp_Status.ChirpEndReason.get(value, defaultValue)
        tmp = min(max(value, 0), 7)
        self.SetStatus((self.GetStatus() & ~(0x7 << 1)) | ((tmp & 0x7) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """UnusedBits"""
        tmp = min(max(value, 0), 15)
        self.SetStatus((self.GetStatus() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Status of chirp",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ChirpCurrentStatus",type="int",units="",minVal="0",maxVal="1",description="Chirp is currently in progress [1 == yes, 0 == no]",get=GetChirpCurrentStatus,set=SetChirpCurrentStatus, enum = []),\
            BitFieldInfo(name="ChirpEndReason",type="enumeration",units="",minVal="0",maxVal="7",description="",get=GetChirpEndReason,set=SetChirpEndReason, enum = [ChirpEndReason, ReverseChirpEndReason]),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="15",description="UnusedBits",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("Control.Chirp.Status", Control_Chirp_Status.ID, Control_Chirp_Status)
