#    obj/CodeGenerator/Python/Control/ClientInteraction.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/ClientInteraction.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_ClientInteraction_Start :
    ID = 28837
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ClientInteractionEvents = OrderedDict([("Unavailable", 0), ("Authorizing", 1), ("MediaResponsePending", 2), ("Rendering", 3), ("End", 4)])
    ReverseClientInteractionEvents = OrderedDict([(0, "Unavailable"), (1, "Authorizing"), (2, "MediaResponsePending"), (3, "Rendering"), (4, "End")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 10), ("Operator", 5)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (10, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_ClientInteraction_Start.MSG_OFFSET + Control_ClientInteraction_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_ClientInteraction_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_ClientInteraction_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_ClientInteraction_Start.MSG_OFFSET + Control_ClientInteraction_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_ClientInteraction_Start.ID)
            self.hdr.SetDataLength(Control_ClientInteraction_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.ClientInteraction.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEvent(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_ClientInteraction_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_ClientInteraction_Start.ReverseClientInteractionEvents.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetTimeout(self):
        """Timeout value in milliseconds, Clients can provide a timeout value for the event handling. The product will handle a value of 0 by using a hard coded default value for the event."""
        value = struct.unpack_from('>L', self.rawBuffer(), Control_ClientInteraction_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEvent(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_ClientInteraction_Start.ClientInteractionEvents.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_ClientInteraction_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetTimeout(self, value):
        """Timeout value in milliseconds, Clients can provide a timeout value for the event handling. The product will handle a value of 0 by using a hard coded default value for the event."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Control_ClientInteraction_Start.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Event",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetEvent,set=SetEvent,count=1, bitfieldInfo = [], enum = [ClientInteractionEvents, ReverseClientInteractionEvents]),\
        FieldInfo(name="Timeout",type="int",units="",minVal="0",maxVal="4294967295",description="Timeout value in milliseconds, Clients can provide a timeout value for the event handling. The product will handle a value of 0 by using a hard coded default value for the event.",get=GetTimeout,set=SetTimeout,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Control.ClientInteraction.Start", Control_ClientInteraction_Start.ID, Control_ClientInteraction_Start)
#    obj/CodeGenerator/Python/Control/ClientInteraction.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/ClientInteraction.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_ClientInteraction_Processing :
    ID = 28839
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 10), ("Operator", 7)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (10, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_ClientInteraction_Processing.MSG_OFFSET + Control_ClientInteraction_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_ClientInteraction_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_ClientInteraction_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_ClientInteraction_Processing.MSG_OFFSET + Control_ClientInteraction_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_ClientInteraction_Processing.ID)
            self.hdr.SetDataLength(Control_ClientInteraction_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.ClientInteraction.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.ClientInteraction.Processing", Control_ClientInteraction_Processing.ID, Control_ClientInteraction_Processing)
#    obj/CodeGenerator/Python/Control/ClientInteraction.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/ClientInteraction.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_ClientInteraction_Result :
    ID = 28838
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ClientInteractionStates = OrderedDict([("Idle", 0), ("LocalActivity", 1), ("RequestPending", 2), ("AuthorizationPending", 3), ("MediaResponsePending", 4), ("Rendering", 5)])
    ReverseClientInteractionStates = OrderedDict([(0, "Idle"), (1, "LocalActivity"), (2, "RequestPending"), (3, "AuthorizationPending"), (4, "MediaResponsePending"), (5, "Rendering")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 10), ("Operator", 6)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (10, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_ClientInteraction_Result.MSG_OFFSET + Control_ClientInteraction_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_ClientInteraction_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_ClientInteraction_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_ClientInteraction_Result.MSG_OFFSET + Control_ClientInteraction_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_ClientInteraction_Result.ID)
            self.hdr.SetDataLength(Control_ClientInteraction_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.ClientInteraction.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetState(self, enumAsInt=0):
        """Resulting state for the provided event"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_ClientInteraction_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_ClientInteraction_Result.ReverseClientInteractionStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetState(self, value):
        """Resulting state for the provided event"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_ClientInteraction_Result.ClientInteractionStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_ClientInteraction_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="State",type="enumeration",units="",minVal="0",maxVal="255",description="Resulting state for the provided event",get=GetState,set=SetState,count=1, bitfieldInfo = [], enum = [ClientInteractionStates, ReverseClientInteractionStates])\
    ]

Messaging.Register("Control.ClientInteraction.Result", Control_ClientInteraction_Result.ID, Control_ClientInteraction_Result)
#    obj/CodeGenerator/Python/Control/ClientInteraction.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/ClientInteraction.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_ClientInteraction_Error :
    ID = 28836
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ControlErrorResponseCodes = OrderedDict([("ClientInteractionBadState", 0)])
    ReverseControlErrorResponseCodes = OrderedDict([(0, "ClientInteractionBadState")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 10), ("Operator", 4)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (10, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_ClientInteraction_Error.MSG_OFFSET + Control_ClientInteraction_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_ClientInteraction_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_ClientInteraction_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_ClientInteraction_Error.MSG_OFFSET + Control_ClientInteraction_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_ClientInteraction_Error.ID)
            self.hdr.SetDataLength(Control_ClientInteraction_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.ClientInteraction.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Control_ClientInteraction_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_ClientInteraction_Error.ReverseControlErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_ClientInteraction_Error.ControlErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Control_ClientInteraction_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="65535",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ControlErrorResponseCodes, ReverseControlErrorResponseCodes])\
    ]

Messaging.Register("Control.ClientInteraction.Error", Control_ClientInteraction_Error.ID, Control_ClientInteraction_Error)
#    obj/CodeGenerator/Python/Control/ClientInteraction.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/ClientInteraction.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_ClientInteraction_Status :
    ID = 28835
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ClientInteractionAsyncEvent = OrderedDict([("TimedOut", 0), ("Interrupted", 1)])
    ReverseClientInteractionAsyncEvent = OrderedDict([(0, "TimedOut"), (1, "Interrupted")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 10), ("Operator", 3)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (10, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_ClientInteraction_Status.MSG_OFFSET + Control_ClientInteraction_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_ClientInteraction_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_ClientInteraction_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_ClientInteraction_Status.MSG_OFFSET + Control_ClientInteraction_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_ClientInteraction_Status.ID)
            self.hdr.SetDataLength(Control_ClientInteraction_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.ClientInteraction.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAsnycEvent(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_ClientInteraction_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_ClientInteraction_Status.ReverseClientInteractionAsyncEvent.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAsnycEvent(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_ClientInteraction_Status.ClientInteractionAsyncEvent.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_ClientInteraction_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AsnycEvent",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAsnycEvent,set=SetAsnycEvent,count=1, bitfieldInfo = [], enum = [ClientInteractionAsyncEvent, ReverseClientInteractionAsyncEvent])\
    ]

Messaging.Register("Control.ClientInteraction.Status", Control_ClientInteraction_Status.ID, Control_ClientInteraction_Status)
