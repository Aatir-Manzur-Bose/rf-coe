#    obj/CodeGenerator/Python/Control/BMAPRole.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/BMAPRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_BMAPRole_Get :
    ID = 28721
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_BMAPRole_Get.MSG_OFFSET + Control_BMAPRole_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_BMAPRole_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_BMAPRole_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_BMAPRole_Get.MSG_OFFSET + Control_BMAPRole_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_BMAPRole_Get.ID)
            self.hdr.SetDataLength(Control_BMAPRole_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.BMAPRole.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.BMAPRole.Get", Control_BMAPRole_Get.ID, Control_BMAPRole_Get)
#    obj/CodeGenerator/Python/Control/BMAPRole.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/BMAPRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_BMAPRole_Status :
    ID = 28723
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BmapRole = OrderedDict([("BMAP_ROLE_MASTER", 0), ("BMAP_ROLE_PUPPET", 1)])
    ReverseBmapRole = OrderedDict([(0, "BMAP_ROLE_MASTER"), (1, "BMAP_ROLE_PUPPET")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_BMAPRole_Status.MSG_OFFSET + Control_BMAPRole_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_BMAPRole_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_BMAPRole_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_BMAPRole_Status.MSG_OFFSET + Control_BMAPRole_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_BMAPRole_Status.ID)
            self.hdr.SetDataLength(Control_BMAPRole_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.BMAPRole.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_BMAPRole_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_BMAPRole_Status.ReverseBmapRole.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_BMAPRole_Status.BmapRole.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_BMAPRole_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [BmapRole, ReverseBmapRole])\
    ]

Messaging.Register("Control.BMAPRole.Status", Control_BMAPRole_Status.ID, Control_BMAPRole_Status)
#    obj/CodeGenerator/Python/Control/BMAPRole.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/BMAPRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_BMAPRole_Start :
    ID = 28725
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BmapRole = OrderedDict([("BMAP_ROLE_MASTER", 0), ("BMAP_ROLE_PUPPET", 1)])
    ReverseBmapRole = OrderedDict([(0, "BMAP_ROLE_MASTER"), (1, "BMAP_ROLE_PUPPET")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 3), ("Operator", 5)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (3, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_BMAPRole_Start.MSG_OFFSET + Control_BMAPRole_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_BMAPRole_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_BMAPRole_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_BMAPRole_Start.MSG_OFFSET + Control_BMAPRole_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_BMAPRole_Start.ID)
            self.hdr.SetDataLength(Control_BMAPRole_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.BMAPRole.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStart(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_BMAPRole_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_BMAPRole_Start.ReverseBmapRole.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStart(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_BMAPRole_Start.BmapRole.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_BMAPRole_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Start",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetStart,set=SetStart,count=1, bitfieldInfo = [], enum = [BmapRole, ReverseBmapRole])\
    ]

Messaging.Register("Control.BMAPRole.Start", Control_BMAPRole_Start.ID, Control_BMAPRole_Start)
#    obj/CodeGenerator/Python/Control/BMAPRole.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/BMAPRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_BMAPRole_Processing :
    ID = 28727
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 3), ("Operator", 7)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (3, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_BMAPRole_Processing.MSG_OFFSET + Control_BMAPRole_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_BMAPRole_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_BMAPRole_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_BMAPRole_Processing.MSG_OFFSET + Control_BMAPRole_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_BMAPRole_Processing.ID)
            self.hdr.SetDataLength(Control_BMAPRole_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.BMAPRole.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Control.BMAPRole.Processing", Control_BMAPRole_Processing.ID, Control_BMAPRole_Processing)
#    obj/CodeGenerator/Python/Control/BMAPRole.py
#    Created 27/07/2023 at 10:10:00 from:
#        Messages = messages/Control/BMAPRole.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Control_BMAPRole_Result :
    ID = 28726
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BmapRole = OrderedDict([("BMAP_ROLE_MASTER", 0), ("BMAP_ROLE_PUPPET", 1)])
    ReverseBmapRole = OrderedDict([(0, "BMAP_ROLE_MASTER"), (1, "BMAP_ROLE_PUPPET")])
    IDs = OrderedDict([("FunctionBlock", 7), ("Function", 3), ("Operator", 6)])
    ReverseIDs = OrderedDict([(7, "FunctionBlock"), (3, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Control_BMAPRole_Result.MSG_OFFSET + Control_BMAPRole_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Control_BMAPRole_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Control_BMAPRole_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Control_BMAPRole_Result.MSG_OFFSET + Control_BMAPRole_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Control_BMAPRole_Result.ID)
            self.hdr.SetDataLength(Control_BMAPRole_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Control.BMAPRole.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResult(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Control_BMAPRole_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Control_BMAPRole_Result.ReverseBmapRole.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResult(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Control_BMAPRole_Result.BmapRole.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Control_BMAPRole_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Result",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetResult,set=SetResult,count=1, bitfieldInfo = [], enum = [BmapRole, ReverseBmapRole])\
    ]

Messaging.Register("Control.BMAPRole.Result", Control_BMAPRole_Result.ID, Control_BMAPRole_Result)
