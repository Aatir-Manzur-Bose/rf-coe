#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Get :
    ID = 114753
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioStreamDirections = OrderedDict([("PhoneToDevice", 0), ("DeviceToPhone", 1)])
    ReverseAudioStreamDirections = OrderedDict([(0, "PhoneToDevice"), (1, "DeviceToPhone")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Get.MSG_OFFSET + AudioStream_Config_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Get.MSG_OFFSET + AudioStream_Config_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Get.ID)
            self.hdr.SetDataLength(AudioStream_Config_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of stream to get config of"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Config_Get.ReverseAudioStreamDirections.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of stream to get config of"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Get.AudioStreamDirections.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of stream to get config of",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [AudioStreamDirections, ReverseAudioStreamDirections])\
    ]

Messaging.Register("AudioStream.Config.Get", AudioStream_Config_Get.ID, AudioStream_Config_Get)
#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Status :
    ID = 114755
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioStreamDirections = OrderedDict([("PhoneToDevice", 0), ("DeviceToPhone", 1)])
    ReverseAudioStreamDirections = OrderedDict([(0, "PhoneToDevice"), (1, "DeviceToPhone")])
    AudioStreamCodecs = OrderedDict([("SBC", 0), ("mSBC", 1), ("AAC", 2), ("CELT", 3), ("Opus", 4)])
    ReverseAudioStreamCodecs = OrderedDict([(0, "SBC"), (1, "mSBC"), (2, "AAC"), (3, "CELT"), (4, "Opus")])
    AudioStreamChannelModes = OrderedDict([("Mono", 0), ("Stereo", 1), ("DualChannel", 2), ("JointStereo", 3)])
    ReverseAudioStreamChannelModes = OrderedDict([(0, "Mono"), (1, "Stereo"), (2, "DualChannel"), (3, "JointStereo")])
    AudioStreamAllocationMethods = OrderedDict([("None", 0), ("Loudness", 1), ("SNR", 2)])
    ReverseAudioStreamAllocationMethods = OrderedDict([(0, "None"), (1, "Loudness"), (2, "SNR")])
    AudioStreamBitRateModes = OrderedDict([("None", 0), ("Constant", 1), ("Variable", 2)])
    ReverseAudioStreamBitRateModes = OrderedDict([(0, "None"), (1, "Constant"), (2, "Variable")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Status.MSG_OFFSET + AudioStream_Config_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Status.MSG_OFFSET + AudioStream_Config_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Status.ID)
            self.hdr.SetDataLength(AudioStream_Config_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of streaming audio"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Config_Status.ReverseAudioStreamDirections.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCodec(self, enumAsInt=0):
        """Audio codec"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioStream_Config_Status.ReverseAudioStreamCodecs.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetSamplingRate(self):
        """Sampling rate"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetChannelMode(self, enumAsInt=0):
        """Channel mode"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = AudioStream_Config_Status.ReverseAudioStreamChannelModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetNumSubbands(self):
        """Number of subbands (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetNumBlocks(self):
        """Number of blocks (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetBitpoolSize(self):
        """Bitpool size (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetAllocationMethod(self, enumAsInt=0):
        """Bit allocation method (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 8)[0]
        if not enumAsInt:
            value = AudioStream_Config_Status.ReverseAudioStreamAllocationMethods.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetBitRateMode(self, enumAsInt=0):
        """Bit rate mode (AAC and Opus codecs)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = AudioStream_Config_Status.ReverseAudioStreamBitRateModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetFrameSize(self):
        """Frame size (CELT and Opus codecs)"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of streaming audio"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Status.AudioStreamDirections.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCodec(self, value):
        """Audio codec"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Status.AudioStreamCodecs.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetSamplingRate(self, value):
        """Sampling rate"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetChannelMode(self, value):
        """Channel mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Status.AudioStreamChannelModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetNumSubbands(self, value):
        """Number of subbands (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetNumBlocks(self, value):
        """Number of blocks (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetBitpoolSize(self, value):
        """Bitpool size (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetAllocationMethod(self, value):
        """Bit allocation method (SBC codec only)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Status.AudioStreamAllocationMethods.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetBitRateMode(self, value):
        """Bit rate mode (AAC and Opus codecs)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Status.AudioStreamBitRateModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetFrameSize(self, value):
        """Frame size (CELT and Opus codecs)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_Config_Status.MSG_OFFSET + 10, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of streaming audio",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [AudioStreamDirections, ReverseAudioStreamDirections]),\
        FieldInfo(name="Codec",type="enumeration",units="",minVal="0",maxVal="255",description="Audio codec",get=GetCodec,set=SetCodec,count=1, bitfieldInfo = [], enum = [AudioStreamCodecs, ReverseAudioStreamCodecs]),\
        FieldInfo(name="SamplingRate",type="int",units="",minVal="0",maxVal="65535",description="Sampling rate",get=GetSamplingRate,set=SetSamplingRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ChannelMode",type="enumeration",units="",minVal="0",maxVal="255",description="Channel mode",get=GetChannelMode,set=SetChannelMode,count=1, bitfieldInfo = [], enum = [AudioStreamChannelModes, ReverseAudioStreamChannelModes]),\
        FieldInfo(name="NumSubbands",type="int",units="",minVal="0",maxVal="255",description="Number of subbands (SBC codec only)",get=GetNumSubbands,set=SetNumSubbands,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumBlocks",type="int",units="",minVal="0",maxVal="255",description="Number of blocks (SBC codec only)",get=GetNumBlocks,set=SetNumBlocks,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BitpoolSize",type="int",units="",minVal="0",maxVal="255",description="Bitpool size (SBC codec only)",get=GetBitpoolSize,set=SetBitpoolSize,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AllocationMethod",type="enumeration",units="",minVal="0",maxVal="255",description="Bit allocation method (SBC codec only)",get=GetAllocationMethod,set=SetAllocationMethod,count=1, bitfieldInfo = [], enum = [AudioStreamAllocationMethods, ReverseAudioStreamAllocationMethods]),\
        FieldInfo(name="BitRateMode",type="enumeration",units="",minVal="0",maxVal="255",description="Bit rate mode (AAC and Opus codecs)",get=GetBitRateMode,set=SetBitRateMode,count=1, bitfieldInfo = [], enum = [AudioStreamBitRateModes, ReverseAudioStreamBitRateModes]),\
        FieldInfo(name="FrameSize",type="int",units="",minVal="0",maxVal="65535",description="Frame size (CELT and Opus codecs)",get=GetFrameSize,set=SetFrameSize,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioStream.Config.Status", AudioStream_Config_Status.ID, AudioStream_Config_Status)
#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Start :
    ID = 114757
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioStreamDirections = OrderedDict([("PhoneToDevice", 0), ("DeviceToPhone", 1)])
    ReverseAudioStreamDirections = OrderedDict([(0, "PhoneToDevice"), (1, "DeviceToPhone")])
    AudioStreamCodecs = OrderedDict([("SBC", 0), ("mSBC", 1), ("AAC", 2), ("CELT", 3), ("Opus", 4)])
    ReverseAudioStreamCodecs = OrderedDict([(0, "SBC"), (1, "mSBC"), (2, "AAC"), (3, "CELT"), (4, "Opus")])
    AudioStreamChannelModes = OrderedDict([("Mono", 0), ("Stereo", 1), ("DualChannel", 2), ("JointStereo", 3)])
    ReverseAudioStreamChannelModes = OrderedDict([(0, "Mono"), (1, "Stereo"), (2, "DualChannel"), (3, "JointStereo")])
    AudioStreamAllocationMethods = OrderedDict([("None", 0), ("Loudness", 1), ("SNR", 2)])
    ReverseAudioStreamAllocationMethods = OrderedDict([(0, "None"), (1, "Loudness"), (2, "SNR")])
    AudioStreamBitRateModes = OrderedDict([("None", 0), ("Constant", 1), ("Variable", 2)])
    ReverseAudioStreamBitRateModes = OrderedDict([(0, "None"), (1, "Constant"), (2, "Variable")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 5)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Start.MSG_OFFSET + AudioStream_Config_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Start.MSG_OFFSET + AudioStream_Config_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Start.ID)
            self.hdr.SetDataLength(AudioStream_Config_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of streaming audio"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Config_Start.ReverseAudioStreamDirections.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCodec(self, enumAsInt=0):
        """Audio codec"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioStream_Config_Start.ReverseAudioStreamCodecs.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetSamplingRate(self):
        """Sampling rate"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetChannelMode(self, enumAsInt=0):
        """Channel mode"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = AudioStream_Config_Start.ReverseAudioStreamChannelModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetNumSubbands(self):
        """Number of subbands (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetNumBlocks(self):
        """Number of blocks (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetBitpoolSize(self):
        """Bitpool size (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetAllocationMethod(self, enumAsInt=0):
        """Bit allocation method (SBC codec only)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 8)[0]
        if not enumAsInt:
            value = AudioStream_Config_Start.ReverseAudioStreamAllocationMethods.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetBitRateMode(self, enumAsInt=0):
        """Bit rate mode (AAC and Opus codecs)"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = AudioStream_Config_Start.ReverseAudioStreamBitRateModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetFrameSize(self):
        """Frame size (CELT and Opus codecs)"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of streaming audio"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Start.AudioStreamDirections.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCodec(self, value):
        """Audio codec"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Start.AudioStreamCodecs.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetSamplingRate(self, value):
        """Sampling rate"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetChannelMode(self, value):
        """Channel mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Start.AudioStreamChannelModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetNumSubbands(self, value):
        """Number of subbands (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetNumBlocks(self, value):
        """Number of blocks (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetBitpoolSize(self, value):
        """Bitpool size (SBC codec only)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetAllocationMethod(self, value):
        """Bit allocation method (SBC codec only)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Start.AudioStreamAllocationMethods.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetBitRateMode(self, value):
        """Bit rate mode (AAC and Opus codecs)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Start.AudioStreamBitRateModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetFrameSize(self, value):
        """Frame size (CELT and Opus codecs)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_Config_Start.MSG_OFFSET + 10, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of streaming audio",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [AudioStreamDirections, ReverseAudioStreamDirections]),\
        FieldInfo(name="Codec",type="enumeration",units="",minVal="0",maxVal="255",description="Audio codec",get=GetCodec,set=SetCodec,count=1, bitfieldInfo = [], enum = [AudioStreamCodecs, ReverseAudioStreamCodecs]),\
        FieldInfo(name="SamplingRate",type="int",units="",minVal="0",maxVal="65535",description="Sampling rate",get=GetSamplingRate,set=SetSamplingRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ChannelMode",type="enumeration",units="",minVal="0",maxVal="255",description="Channel mode",get=GetChannelMode,set=SetChannelMode,count=1, bitfieldInfo = [], enum = [AudioStreamChannelModes, ReverseAudioStreamChannelModes]),\
        FieldInfo(name="NumSubbands",type="int",units="",minVal="0",maxVal="255",description="Number of subbands (SBC codec only)",get=GetNumSubbands,set=SetNumSubbands,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumBlocks",type="int",units="",minVal="0",maxVal="255",description="Number of blocks (SBC codec only)",get=GetNumBlocks,set=SetNumBlocks,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BitpoolSize",type="int",units="",minVal="0",maxVal="255",description="Bitpool size (SBC codec only)",get=GetBitpoolSize,set=SetBitpoolSize,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AllocationMethod",type="enumeration",units="",minVal="0",maxVal="255",description="Bit allocation method (SBC codec only)",get=GetAllocationMethod,set=SetAllocationMethod,count=1, bitfieldInfo = [], enum = [AudioStreamAllocationMethods, ReverseAudioStreamAllocationMethods]),\
        FieldInfo(name="BitRateMode",type="enumeration",units="",minVal="0",maxVal="255",description="Bit rate mode (AAC and Opus codecs)",get=GetBitRateMode,set=SetBitRateMode,count=1, bitfieldInfo = [], enum = [AudioStreamBitRateModes, ReverseAudioStreamBitRateModes]),\
        FieldInfo(name="FrameSize",type="int",units="",minVal="0",maxVal="65535",description="Frame size (CELT and Opus codecs)",get=GetFrameSize,set=SetFrameSize,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioStream.Config.Start", AudioStream_Config_Start.ID, AudioStream_Config_Start)
#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Processing :
    ID = 114759
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 7)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Processing.MSG_OFFSET + AudioStream_Config_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Processing.MSG_OFFSET + AudioStream_Config_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Processing.ID)
            self.hdr.SetDataLength(AudioStream_Config_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioStream.Config.Processing", AudioStream_Config_Processing.ID, AudioStream_Config_Processing)
#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Result :
    ID = 114758
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 6)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Result.MSG_OFFSET + AudioStream_Config_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Result.MSG_OFFSET + AudioStream_Config_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Result.ID)
            self.hdr.SetDataLength(AudioStream_Config_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioStream.Config.Result", AudioStream_Config_Result.ID, AudioStream_Config_Result)
#    obj/CodeGenerator/Python/AudioStream/Config.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Config.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Config_Error :
    ID = 114756
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 4), ("Operator", 4)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (4, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Config_Error.MSG_OFFSET + AudioStream_Config_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Config_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Config_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Config_Error.MSG_OFFSET + AudioStream_Config_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Config_Error.ID)
            self.hdr.SetDataLength(AudioStream_Config_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Config.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Config_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Config_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Config_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Config_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("AudioStream.Config.Error", AudioStream_Config_Error.ID, AudioStream_Config_Error)
