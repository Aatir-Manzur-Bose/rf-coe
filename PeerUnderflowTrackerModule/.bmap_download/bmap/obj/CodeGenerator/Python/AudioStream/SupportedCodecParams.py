#    obj/CodeGenerator/Python/AudioStream/SupportedCodecParams.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AudioStream/SupportedCodecParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_SupportedCodecParams_Get :
    ID = 114737
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioStreamDirections = OrderedDict([("PhoneToDevice", 0), ("DeviceToPhone", 1)])
    ReverseAudioStreamDirections = OrderedDict([(0, "PhoneToDevice"), (1, "DeviceToPhone")])
    AudioStreamCodecs = OrderedDict([("SBC", 0), ("mSBC", 1), ("AAC", 2), ("CELT", 3), ("Opus", 4)])
    ReverseAudioStreamCodecs = OrderedDict([(0, "SBC"), (1, "mSBC"), (2, "AAC"), (3, "CELT"), (4, "Opus")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Get.MSG_OFFSET + AudioStream_SupportedCodecParams_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_SupportedCodecParams_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_SupportedCodecParams_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Get.MSG_OFFSET + AudioStream_SupportedCodecParams_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_SupportedCodecParams_Get.ID)
            self.hdr.SetDataLength(AudioStream_SupportedCodecParams_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.SupportedCodecParams.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCodec(self, enumAsInt=0):
        """Codec to get supported values for"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_SupportedCodecParams_Get.ReverseAudioStreamCodecs.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of audio stream"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioStream_SupportedCodecParams_Get.ReverseAudioStreamDirections.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCodec(self, value):
        """Codec to get supported values for"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_SupportedCodecParams_Get.AudioStreamCodecs.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of audio stream"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_SupportedCodecParams_Get.AudioStreamDirections.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Get.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Codec",type="enumeration",units="",minVal="0",maxVal="255",description="Codec to get supported values for",get=GetCodec,set=SetCodec,count=1, bitfieldInfo = [], enum = [AudioStreamCodecs, ReverseAudioStreamCodecs]),\
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of audio stream",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [AudioStreamDirections, ReverseAudioStreamDirections])\
    ]

Messaging.Register("AudioStream.SupportedCodecParams.Get", AudioStream_SupportedCodecParams_Get.ID, AudioStream_SupportedCodecParams_Get)
#    obj/CodeGenerator/Python/AudioStream/SupportedCodecParams.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AudioStream/SupportedCodecParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_SupportedCodecParams_Status :
    ID = 114739
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Status.MSG_OFFSET + AudioStream_SupportedCodecParams_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_SupportedCodecParams_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_SupportedCodecParams_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Status.MSG_OFFSET + AudioStream_SupportedCodecParams_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_SupportedCodecParams_Status.ID)
            self.hdr.SetDataLength(AudioStream_SupportedCodecParams_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.SupportedCodecParams.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSamplingRates(self):
        """Bitfield of supported sampling rates"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Get8kHz(self):
        """True if 8kHz sampling rate is supported"""
        value = (self.GetSamplingRates() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Get16kHz(self):
        """True if 16kHz sampling rate is supported"""
        value = (self.GetSamplingRates() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Get32kHz(self):
        """True if 32kHz sampling rate is supported"""
        value = (self.GetSamplingRates() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Get44_1kHz(self):
        """True if 44.1kHz sampling rate is supported"""
        value = (self.GetSamplingRates() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Get48kHz(self):
        """True if 48kHz sampling rate is supported"""
        value = (self.GetSamplingRates() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedSamplingRates(self):
        """Reserved"""
        value = (self.GetSamplingRates() >> 5) & 0x7
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetChannelModes(self):
        """Bitfield of supported channel modes"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetMono(self):
        """True if mono is supported"""
        value = (self.GetChannelModes() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetStereo(self):
        """True if stereo is supported"""
        value = (self.GetChannelModes() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetDualChannel(self):
        """True if dual channel is supported"""
        value = (self.GetChannelModes() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetJointStereo(self):
        """True if joint stereo is supported"""
        value = (self.GetChannelModes() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedChannelModes(self):
        """Reserved"""
        value = (self.GetChannelModes() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetNumSubbands(self):
        """Bitfield of supported number of subbands"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetFourSubbands(self):
        """True if four subbands are supported"""
        value = (self.GetNumSubbands() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetEightSubbands(self):
        """True if eight subbands are supported"""
        value = (self.GetNumSubbands() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedNumSubbands(self):
        """Reserved"""
        value = (self.GetNumSubbands() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetNumBlocks(self):
        """Bitfield of supported number of blocks per frame"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetFourBlocks(self):
        """True if 4 blocks are supported"""
        value = (self.GetNumBlocks() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetEightBlocks(self):
        """True if 8 blocks are supported"""
        value = (self.GetNumBlocks() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetTwelveBlocks(self):
        """True if 12 blocks are supported"""
        value = (self.GetNumBlocks() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetSixteenBlocks(self):
        """True if 16 blocks are supported"""
        value = (self.GetNumBlocks() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedNumBlocks(self):
        """Reserved"""
        value = (self.GetNumBlocks() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetBitpoolSizeMin(self):
        """Minimum bitpool size supported"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetBitpoolSizeMax(self):
        """Maximum bitpool size supported"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetAllocationMethods(self):
        """Bitfield of supported allocation methods"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetLoudness(self):
        """True if Loudness method is supported"""
        value = (self.GetAllocationMethods() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetSNR(self):
        """True if SNR method is supported"""
        value = (self.GetAllocationMethods() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedAllocationMethods(self):
        """Reserved"""
        value = (self.GetAllocationMethods() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetBitRateModes(self):
        """Bitfield of supported bit rate modes"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConstant(self):
        """True if Constant bit rate mode is supported"""
        value = (self.GetBitRateModes() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetVariable(self):
        """True if Variable bit rate mode is supported"""
        value = (self.GetBitRateModes() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBitRateModes(self):
        """Reserved"""
        value = (self.GetBitRateModes() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetFrameSizeMin(self):
        """Minimum frame size supported"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetFrameSizeMax(self):
        """Maximum frame size supported"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSamplingRates(self, value):
        """Bitfield of supported sampling rates"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Set8kHz(self, value):
        """True if 8kHz sampling rate is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Set16kHz(self, value):
        """True if 16kHz sampling rate is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Set32kHz(self, value):
        """True if 32kHz sampling rate is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Set44_1kHz(self, value):
        """True if 44.1kHz sampling rate is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Set48kHz(self, value):
        """True if 48kHz sampling rate is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedSamplingRates(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 7)
        self.SetSamplingRates((self.GetSamplingRates() & ~(0x7 << 5)) | ((tmp & 0x7) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetChannelModes(self, value):
        """Bitfield of supported channel modes"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetMono(self, value):
        """True if mono is supported"""
        tmp = min(max(value, 0), 1)
        self.SetChannelModes((self.GetChannelModes() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetStereo(self, value):
        """True if stereo is supported"""
        tmp = min(max(value, 0), 1)
        self.SetChannelModes((self.GetChannelModes() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetDualChannel(self, value):
        """True if dual channel is supported"""
        tmp = min(max(value, 0), 1)
        self.SetChannelModes((self.GetChannelModes() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetJointStereo(self, value):
        """True if joint stereo is supported"""
        tmp = min(max(value, 0), 1)
        self.SetChannelModes((self.GetChannelModes() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedChannelModes(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 15)
        self.SetChannelModes((self.GetChannelModes() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetNumSubbands(self, value):
        """Bitfield of supported number of subbands"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetFourSubbands(self, value):
        """True if four subbands are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumSubbands((self.GetNumSubbands() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetEightSubbands(self, value):
        """True if eight subbands are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumSubbands((self.GetNumSubbands() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedNumSubbands(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 63)
        self.SetNumSubbands((self.GetNumSubbands() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetNumBlocks(self, value):
        """Bitfield of supported number of blocks per frame"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetFourBlocks(self, value):
        """True if 4 blocks are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumBlocks((self.GetNumBlocks() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetEightBlocks(self, value):
        """True if 8 blocks are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumBlocks((self.GetNumBlocks() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetTwelveBlocks(self, value):
        """True if 12 blocks are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumBlocks((self.GetNumBlocks() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetSixteenBlocks(self, value):
        """True if 16 blocks are supported"""
        tmp = min(max(value, 0), 1)
        self.SetNumBlocks((self.GetNumBlocks() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedNumBlocks(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 15)
        self.SetNumBlocks((self.GetNumBlocks() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetBitpoolSizeMin(self, value):
        """Minimum bitpool size supported"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetBitpoolSizeMax(self, value):
        """Maximum bitpool size supported"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetAllocationMethods(self, value):
        """Bitfield of supported allocation methods"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetLoudness(self, value):
        """True if Loudness method is supported"""
        tmp = min(max(value, 0), 1)
        self.SetAllocationMethods((self.GetAllocationMethods() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetSNR(self, value):
        """True if SNR method is supported"""
        tmp = min(max(value, 0), 1)
        self.SetAllocationMethods((self.GetAllocationMethods() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedAllocationMethods(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 63)
        self.SetAllocationMethods((self.GetAllocationMethods() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetBitRateModes(self, value):
        """Bitfield of supported bit rate modes"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConstant(self, value):
        """True if Constant bit rate mode is supported"""
        tmp = min(max(value, 0), 1)
        self.SetBitRateModes((self.GetBitRateModes() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetVariable(self, value):
        """True if Variable bit rate mode is supported"""
        tmp = min(max(value, 0), 1)
        self.SetBitRateModes((self.GetBitRateModes() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBitRateModes(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 63)
        self.SetBitRateModes((self.GetBitRateModes() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetFrameSizeMin(self, value):
        """Minimum frame size supported"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetFrameSizeMax(self, value):
        """Maximum frame size supported"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_SupportedCodecParams_Status.MSG_OFFSET + 10, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SamplingRates",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported sampling rates",get=GetSamplingRates,set=SetSamplingRates,count=1, bitfieldInfo = [\
            BitFieldInfo(name="8kHz",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 8kHz sampling rate is supported",get=Get8kHz,set=Set8kHz, enum = []),\
            BitFieldInfo(name="16kHz",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 16kHz sampling rate is supported",get=Get16kHz,set=Set16kHz, enum = []),\
            BitFieldInfo(name="32kHz",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 32kHz sampling rate is supported",get=Get32kHz,set=Set32kHz, enum = []),\
            BitFieldInfo(name="44_1kHz",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 44.1kHz sampling rate is supported",get=Get44_1kHz,set=Set44_1kHz, enum = []),\
            BitFieldInfo(name="48kHz",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 48kHz sampling rate is supported",get=Get48kHz,set=Set48kHz, enum = []),\
            BitFieldInfo(name="UnusedSamplingRates",type="int",units="",minVal="0",maxVal="7",description="Reserved",get=GetUnusedSamplingRates,set=SetUnusedSamplingRates, enum = [])], enum = []),\
        FieldInfo(name="ChannelModes",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported channel modes",get=GetChannelModes,set=SetChannelModes,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Mono",type="int",units="Boolean",minVal="0",maxVal="1",description="True if mono is supported",get=GetMono,set=SetMono, enum = []),\
            BitFieldInfo(name="Stereo",type="int",units="Boolean",minVal="0",maxVal="1",description="True if stereo is supported",get=GetStereo,set=SetStereo, enum = []),\
            BitFieldInfo(name="DualChannel",type="int",units="Boolean",minVal="0",maxVal="1",description="True if dual channel is supported",get=GetDualChannel,set=SetDualChannel, enum = []),\
            BitFieldInfo(name="JointStereo",type="int",units="Boolean",minVal="0",maxVal="1",description="True if joint stereo is supported",get=GetJointStereo,set=SetJointStereo, enum = []),\
            BitFieldInfo(name="UnusedChannelModes",type="int",units="",minVal="0",maxVal="15",description="Reserved",get=GetUnusedChannelModes,set=SetUnusedChannelModes, enum = [])], enum = []),\
        FieldInfo(name="NumSubbands",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported number of subbands",get=GetNumSubbands,set=SetNumSubbands,count=1, bitfieldInfo = [\
            BitFieldInfo(name="FourSubbands",type="int",units="Boolean",minVal="0",maxVal="1",description="True if four subbands are supported",get=GetFourSubbands,set=SetFourSubbands, enum = []),\
            BitFieldInfo(name="EightSubbands",type="int",units="",minVal="0",maxVal="1",description="True if eight subbands are supported",get=GetEightSubbands,set=SetEightSubbands, enum = []),\
            BitFieldInfo(name="UnusedNumSubbands",type="int",units="",minVal="0",maxVal="63",description="Reserved",get=GetUnusedNumSubbands,set=SetUnusedNumSubbands, enum = [])], enum = []),\
        FieldInfo(name="NumBlocks",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported number of blocks per frame",get=GetNumBlocks,set=SetNumBlocks,count=1, bitfieldInfo = [\
            BitFieldInfo(name="FourBlocks",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 4 blocks are supported",get=GetFourBlocks,set=SetFourBlocks, enum = []),\
            BitFieldInfo(name="EightBlocks",type="int",units="",minVal="0",maxVal="1",description="True if 8 blocks are supported",get=GetEightBlocks,set=SetEightBlocks, enum = []),\
            BitFieldInfo(name="TwelveBlocks",type="int",units="Boolean",minVal="0",maxVal="1",description="True if 12 blocks are supported",get=GetTwelveBlocks,set=SetTwelveBlocks, enum = []),\
            BitFieldInfo(name="SixteenBlocks",type="int",units="",minVal="0",maxVal="1",description="True if 16 blocks are supported",get=GetSixteenBlocks,set=SetSixteenBlocks, enum = []),\
            BitFieldInfo(name="UnusedNumBlocks",type="int",units="",minVal="0",maxVal="15",description="Reserved",get=GetUnusedNumBlocks,set=SetUnusedNumBlocks, enum = [])], enum = []),\
        FieldInfo(name="BitpoolSizeMin",type="int",units="",minVal="0",maxVal="255",description="Minimum bitpool size supported",get=GetBitpoolSizeMin,set=SetBitpoolSizeMin,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BitpoolSizeMax",type="int",units="",minVal="0",maxVal="255",description="Maximum bitpool size supported",get=GetBitpoolSizeMax,set=SetBitpoolSizeMax,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AllocationMethods",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported allocation methods",get=GetAllocationMethods,set=SetAllocationMethods,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Loudness",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Loudness method is supported",get=GetLoudness,set=SetLoudness, enum = []),\
            BitFieldInfo(name="SNR",type="int",units="",minVal="0",maxVal="1",description="True if SNR method is supported",get=GetSNR,set=SetSNR, enum = []),\
            BitFieldInfo(name="UnusedAllocationMethods",type="int",units="",minVal="0",maxVal="63",description="Reserved",get=GetUnusedAllocationMethods,set=SetUnusedAllocationMethods, enum = [])], enum = []),\
        FieldInfo(name="BitRateModes",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported bit rate modes",get=GetBitRateModes,set=SetBitRateModes,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Constant",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Constant bit rate mode is supported",get=GetConstant,set=SetConstant, enum = []),\
            BitFieldInfo(name="Variable",type="int",units="",minVal="0",maxVal="1",description="True if Variable bit rate mode is supported",get=GetVariable,set=SetVariable, enum = []),\
            BitFieldInfo(name="UnusedBitRateModes",type="int",units="",minVal="0",maxVal="63",description="Reserved",get=GetUnusedBitRateModes,set=SetUnusedBitRateModes, enum = [])], enum = []),\
        FieldInfo(name="FrameSizeMin",type="int",units="",minVal="0",maxVal="65535",description="Minimum frame size supported",get=GetFrameSizeMin,set=SetFrameSizeMin,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FrameSizeMax",type="int",units="",minVal="0",maxVal="65535",description="Maximum frame size supported",get=GetFrameSizeMax,set=SetFrameSizeMax,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioStream.SupportedCodecParams.Status", AudioStream_SupportedCodecParams_Status.ID, AudioStream_SupportedCodecParams_Status)
#    obj/CodeGenerator/Python/AudioStream/SupportedCodecParams.py
#    Created 27/07/2023 at 10:09:41 from:
#        Messages = messages/AudioStream/SupportedCodecParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_SupportedCodecParams_Error :
    ID = 114740
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 3), ("Operator", 4)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (3, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Error.MSG_OFFSET + AudioStream_SupportedCodecParams_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_SupportedCodecParams_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_SupportedCodecParams_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_SupportedCodecParams_Error.MSG_OFFSET + AudioStream_SupportedCodecParams_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_SupportedCodecParams_Error.ID)
            self.hdr.SetDataLength(AudioStream_SupportedCodecParams_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.SupportedCodecParams.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_SupportedCodecParams_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_SupportedCodecParams_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_SupportedCodecParams_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("AudioStream.SupportedCodecParams.Error", AudioStream_SupportedCodecParams_Error.ID, AudioStream_SupportedCodecParams_Error)
