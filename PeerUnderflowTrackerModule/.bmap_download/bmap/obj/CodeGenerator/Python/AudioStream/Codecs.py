#    obj/CodeGenerator/Python/AudioStream/Codecs.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Codecs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Codecs_Get :
    ID = 114721
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AudioStreamDirections = OrderedDict([("PhoneToDevice", 0), ("DeviceToPhone", 1)])
    ReverseAudioStreamDirections = OrderedDict([(0, "PhoneToDevice"), (1, "DeviceToPhone")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Codecs_Get.MSG_OFFSET + AudioStream_Codecs_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Codecs_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Codecs_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Codecs_Get.MSG_OFFSET + AudioStream_Codecs_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Codecs_Get.ID)
            self.hdr.SetDataLength(AudioStream_Codecs_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Codecs.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDirection(self, enumAsInt=0):
        """Direction of the audio stream"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Codecs_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Codecs_Get.ReverseAudioStreamDirections.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDirection(self, value):
        """Direction of the audio stream"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Codecs_Get.AudioStreamDirections.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Codecs_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Direction",type="enumeration",units="",minVal="0",maxVal="255",description="Direction of the audio stream",get=GetDirection,set=SetDirection,count=1, bitfieldInfo = [], enum = [AudioStreamDirections, ReverseAudioStreamDirections])\
    ]

Messaging.Register("AudioStream.Codecs.Get", AudioStream_Codecs_Get.ID, AudioStream_Codecs_Get)
#    obj/CodeGenerator/Python/AudioStream/Codecs.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Codecs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Codecs_Status :
    ID = 114723
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Codecs_Status.MSG_OFFSET + AudioStream_Codecs_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Codecs_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Codecs_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Codecs_Status.MSG_OFFSET + AudioStream_Codecs_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Codecs_Status.ID)
            self.hdr.SetDataLength(AudioStream_Codecs_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Codecs.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetSupportedCodecs(self):
        """Bitfield of supported codecs"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioStream_Codecs_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSBC(self):
        """True if SBC is supported"""
        value = (self.GetSupportedCodecs() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetmSBC(self):
        """True if mSBC is supported"""
        value = (self.GetSupportedCodecs() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAAC(self):
        """True if AAC is supported"""
        value = (self.GetSupportedCodecs() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetCELT(self):
        """True if CELT is supported"""
        value = (self.GetSupportedCodecs() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOpus(self):
        """True if Opus is supported"""
        value = (self.GetSupportedCodecs() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('2047')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Reserved for future codecs"""
        value = (self.GetSupportedCodecs() >> 5) & 0x7ff
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetSupportedCodecs(self, value):
        """Bitfield of supported codecs"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioStream_Codecs_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSBC(self, value):
        """True if SBC is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetmSBC(self, value):
        """True if mSBC is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAAC(self, value):
        """True if AAC is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetCELT(self, value):
        """True if CELT is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOpus(self, value):
        """True if Opus is supported"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('2047')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Reserved for future codecs"""
        tmp = min(max(value, 0), 2047)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x7ff << 5)) | ((tmp & 0x7ff) << 5))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SupportedCodecs",type="int",units="",minVal="0",maxVal="65535",description="Bitfield of supported codecs",get=GetSupportedCodecs,set=SetSupportedCodecs,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SBC",type="int",units="Boolean",minVal="0",maxVal="1",description="True if SBC is supported",get=GetSBC,set=SetSBC, enum = []),\
            BitFieldInfo(name="mSBC",type="int",units="Boolean",minVal="0",maxVal="1",description="True if mSBC is supported",get=GetmSBC,set=SetmSBC, enum = []),\
            BitFieldInfo(name="AAC",type="int",units="Boolean",minVal="0",maxVal="1",description="True if AAC is supported",get=GetAAC,set=SetAAC, enum = []),\
            BitFieldInfo(name="CELT",type="int",units="Boolean",minVal="0",maxVal="1",description="True if CELT is supported",get=GetCELT,set=SetCELT, enum = []),\
            BitFieldInfo(name="Opus",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Opus is supported",get=GetOpus,set=SetOpus, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="2047",description="Reserved for future codecs",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("AudioStream.Codecs.Status", AudioStream_Codecs_Status.ID, AudioStream_Codecs_Status)
#    obj/CodeGenerator/Python/AudioStream/Codecs.py
#    Created 27/07/2023 at 10:09:40 from:
#        Messages = messages/AudioStream/Codecs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioStream_Codecs_Error :
    ID = 114724
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 28), ("Function", 2), ("Operator", 4)])
    ReverseIDs = OrderedDict([(28, "FunctionBlock"), (2, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioStream_Codecs_Error.MSG_OFFSET + AudioStream_Codecs_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioStream_Codecs_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioStream_Codecs_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioStream_Codecs_Error.MSG_OFFSET + AudioStream_Codecs_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioStream_Codecs_Error.ID)
            self.hdr.SetDataLength(AudioStream_Codecs_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioStream.Codecs.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioStream_Codecs_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioStream_Codecs_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioStream_Codecs_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioStream_Codecs_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("AudioStream.Codecs.Error", AudioStream_Codecs_Error.ID, AudioStream_Codecs_Error)
