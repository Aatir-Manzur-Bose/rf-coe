#    obj/CodeGenerator/Python/Experimental/PeregrineSDSPSafeLoad.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/PeregrineSDSPSafeLoad.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineSDSPSafeLoad_Set :
    ID = 78832
    SIZE = 144
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 63), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (63, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineSDSPSafeLoad_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineSDSPSafeLoad_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineSDSPSafeLoad_Set.ID)
            self.hdr.SetDataLength(Experimental_PeregrineSDSPSafeLoad_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineSDSPSafeLoad.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """id of Peregrine to access"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(120)
    def Getsymbolic_name(self):
        """The name of the symbol"""
        count = 120
        if count > len(self.rawBuffer())-(Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('5')
    @msg.offset('121')
    @msg.size('1')
    @msg.count(1)
    def Getwordcnt(self):
        """Word count"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 121)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('122')
    @msg.size('2')
    @msg.count(1)
    def Getoffset(self):
        """offset word to start from"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 122)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('124')
    @msg.size('4')
    @msg.count(5)
    def Getdata(self, idx):
        """data, 1 to 5 uint32s"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 124+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """id of Peregrine to access"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(120)
    def Setsymbolic_name(self, value):
        """The name of the symbol"""
        tmp = value.encode('utf-8')
        struct.pack_into('120s', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('5')
    @msg.offset('121')
    @msg.size('1')
    @msg.count(1)
    def Setwordcnt(self, value):
        """Word count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 121, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('122')
    @msg.size('2')
    @msg.count(1)
    def Setoffset(self, value):
        """offset word to start from"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 122, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('124')
    @msg.size('4')
    @msg.count(5)
    def Setdata(self, value, idx):
        """data, 1 to 5 uint32s"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Set.MSG_OFFSET + 124+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="id of Peregrine to access",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="symbolic_name",type="string",units="ASCII",minVal="0",maxVal="255",description="The name of the symbol",get=Getsymbolic_name,set=Setsymbolic_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="wordcnt",type="int",units="",minVal="0",maxVal="5",description="Word count",get=Getwordcnt,set=Setwordcnt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="offset",type="int",units="",minVal="-32768",maxVal="32767",description="offset word to start from",get=Getoffset,set=Setoffset,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="4294967295",description="data, 1 to 5 uint32s",get=Getdata,set=Setdata,count=5, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.PeregrineSDSPSafeLoad.Set", Experimental_PeregrineSDSPSafeLoad_Set.ID, Experimental_PeregrineSDSPSafeLoad_Set)
#    obj/CodeGenerator/Python/Experimental/PeregrineSDSPSafeLoad.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/PeregrineSDSPSafeLoad.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineSDSPSafeLoad_Status :
    ID = 78835
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 63), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (63, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Status.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineSDSPSafeLoad_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineSDSPSafeLoad_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Status.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineSDSPSafeLoad_Status.ID)
            self.hdr.SetDataLength(Experimental_PeregrineSDSPSafeLoad_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineSDSPSafeLoad.Status"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.PeregrineSDSPSafeLoad.Status", Experimental_PeregrineSDSPSafeLoad_Status.ID, Experimental_PeregrineSDSPSafeLoad_Status)
#    obj/CodeGenerator/Python/Experimental/PeregrineSDSPSafeLoad.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/PeregrineSDSPSafeLoad.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineSDSPSafeLoad_Error :
    ID = 78836
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 63), ("Operator", 4)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (63, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Error.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineSDSPSafeLoad_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineSDSPSafeLoad_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineSDSPSafeLoad_Error.MSG_OFFSET + Experimental_PeregrineSDSPSafeLoad_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineSDSPSafeLoad_Error.ID)
            self.hdr.SetDataLength(Experimental_PeregrineSDSPSafeLoad_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineSDSPSafeLoad.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_PeregrineSDSPSafeLoad_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_PeregrineSDSPSafeLoad_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineSDSPSafeLoad_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("Experimental.PeregrineSDSPSafeLoad.Error", Experimental_PeregrineSDSPSafeLoad_Error.ID, Experimental_PeregrineSDSPSafeLoad_Error)
