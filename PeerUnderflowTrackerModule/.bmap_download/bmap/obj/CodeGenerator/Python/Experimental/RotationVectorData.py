#    obj/CodeGenerator/Python/Experimental/RotationVectorData.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/RotationVectorData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_RotationVectorData_Status :
    ID = 78387
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 35), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (35, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_RotationVectorData_Status.MSG_OFFSET + Experimental_RotationVectorData_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_RotationVectorData_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_RotationVectorData_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_RotationVectorData_Status.MSG_OFFSET + Experimental_RotationVectorData_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_RotationVectorData_Status.ID)
            self.hdr.SetDataLength(Experimental_RotationVectorData_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.RotationVectorData.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetX(self):
        """X"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetY(self):
        """Y"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetZ(self):
        """Z"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetW(self):
        """W"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetAccuracy(self):
        """Estimated Accuracy"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp(self):
        """Validity time of data, milliseconds"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetX(self, value):
        """X"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetY(self, value):
        """Y"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetZ(self, value):
        """Z"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetW(self, value):
        """W"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetAccuracy(self, value):
        """Estimated Accuracy"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Validity time of data, milliseconds"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_RotationVectorData_Status.MSG_OFFSET + 10, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="X",type="int",units="",minVal="-32768",maxVal="32767",description="X",get=GetX,set=SetX,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Y",type="int",units="",minVal="-32768",maxVal="32767",description="Y",get=GetY,set=SetY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Z",type="int",units="",minVal="-32768",maxVal="32767",description="Z",get=GetZ,set=SetZ,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="W",type="int",units="",minVal="-32768",maxVal="32767",description="W",get=GetW,set=SetW,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Accuracy",type="int",units="",minVal="-32768",maxVal="32767",description="Estimated Accuracy",get=GetAccuracy,set=SetAccuracy,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp",type="int",units="milliseconds",minVal="0",maxVal="65535",description="Validity time of data, milliseconds",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.RotationVectorData.Status", Experimental_RotationVectorData_Status.ID, Experimental_RotationVectorData_Status)
#    obj/CodeGenerator/Python/Experimental/RotationVectorData.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/RotationVectorData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_RotationVectorData_SetGet :
    ID = 78386
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 35), ("Operator", 2)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (35, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_RotationVectorData_SetGet.MSG_OFFSET + Experimental_RotationVectorData_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_RotationVectorData_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_RotationVectorData_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_RotationVectorData_SetGet.MSG_OFFSET + Experimental_RotationVectorData_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_RotationVectorData_SetGet.ID)
            self.hdr.SetDataLength(Experimental_RotationVectorData_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.RotationVectorData.SetGet"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetRate(self):
        """Report rate"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetRate(self, value):
        """Report rate"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Rate",type="int",units="Hz",minVal="-32768",maxVal="32767",description="Report rate",get=GetRate,set=SetRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.RotationVectorData.SetGet", Experimental_RotationVectorData_SetGet.ID, Experimental_RotationVectorData_SetGet)
#    obj/CodeGenerator/Python/Experimental/RotationVectorData.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/RotationVectorData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_RotationVectorData_Result :
    ID = 78390
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 35), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (35, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_RotationVectorData_Result.MSG_OFFSET + Experimental_RotationVectorData_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_RotationVectorData_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_RotationVectorData_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_RotationVectorData_Result.MSG_OFFSET + Experimental_RotationVectorData_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_RotationVectorData_Result.ID)
            self.hdr.SetDataLength(Experimental_RotationVectorData_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.RotationVectorData.Result"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetRate(self):
        """Report rate"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_RotationVectorData_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetRate(self, value):
        """Report rate"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_RotationVectorData_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Rate",type="int",units="Hz",minVal="-32768",maxVal="32767",description="Report rate",get=GetRate,set=SetRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.RotationVectorData.Result", Experimental_RotationVectorData_Result.ID, Experimental_RotationVectorData_Result)
