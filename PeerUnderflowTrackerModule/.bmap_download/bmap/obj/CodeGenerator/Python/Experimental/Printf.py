#    obj/CodeGenerator/Python/Experimental/Printf.py
#    Created 27/07/2023 at 10:10:39 from:
#        Messages = messages/Experimental/Printf.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_Printf_Status :
    ID = 77987
    SIZE = 121
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Priorities = OrderedDict([("Error", 0), ("Warning", 1), ("Info", 2)])
    ReversePriorities = OrderedDict([(0, "Error"), (1, "Warning"), (2, "Info")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 10), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (10, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_Printf_Status.MSG_OFFSET + Experimental_Printf_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_Printf_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_Printf_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_Printf_Status.MSG_OFFSET + Experimental_Printf_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_Printf_Status.ID)
            self.hdr.SetDataLength(Experimental_Printf_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.Printf.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetContainer(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Printf_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('PlatformSpecific')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStreamID(self):
        """Some sort of identifier for the thread printing the message."""
        value = (self.GetContainer() >> 0) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPriority(self, enumAsInt=0):
        """How important the debug message is."""
        value = (self.GetContainer() >> 6) & 0x3
        if not enumAsInt:
            value = Experimental_Printf_Status.ReversePriorities.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(120)
    def GetBuffer(self):
        """The string to display."""
        count = 120
        if count > len(self.rawBuffer())-(Experimental_Printf_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Experimental_Printf_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Printf_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetContainer(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Printf_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('PlatformSpecific')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStreamID(self, value):
        """Some sort of identifier for the thread printing the message."""
        tmp = min(max(value, 0), 63)
        self.SetContainer((self.GetContainer() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPriority(self, value):
        """How important the debug message is."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_Printf_Status.Priorities.get(value, defaultValue)
        tmp = min(max(value, 0), 3)
        self.SetContainer((self.GetContainer() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(120)
    def SetBuffer(self, value):
        """The string to display."""
        tmp = value.encode('utf-8')
        struct.pack_into('120s', self.rawBuffer(), Experimental_Printf_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="255",description="",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="StreamID",type="int",units="PlatformSpecific",minVal="0",maxVal="63",description="Some sort of identifier for the thread printing the message.",get=GetStreamID,set=SetStreamID, enum = []),\
            BitFieldInfo(name="Priority",type="enumeration",units="",minVal="0",maxVal="3",description="How important the debug message is.",get=GetPriority,set=SetPriority, enum = [Priorities, ReversePriorities])], enum = []),\
        FieldInfo(name="Buffer",type="string",units="ASCII",minVal="0",maxVal="255",description="The string to display.",get=GetBuffer,set=SetBuffer,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.Printf.Status", Experimental_Printf_Status.ID, Experimental_Printf_Status)
Messaging.AddAlias("DebugPrintf", Experimental_Printf_Status.ID, Experimental_Printf_Status)
