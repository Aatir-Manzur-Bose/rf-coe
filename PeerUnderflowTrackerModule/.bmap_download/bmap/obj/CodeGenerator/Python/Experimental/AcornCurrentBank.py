#    obj/CodeGenerator/Python/Experimental/AcornCurrentBank.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCurrentBank.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCurrentBank_Get :
    ID = 78129
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 19), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (19, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Get.MSG_OFFSET + Experimental_AcornCurrentBank_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCurrentBank_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCurrentBank_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Get.MSG_OFFSET + Experimental_AcornCurrentBank_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCurrentBank_Get.ID)
            self.hdr.SetDataLength(Experimental_AcornCurrentBank_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCurrentBank.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornSelect(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCurrentBank_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCurrentBank_Get.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornSelect(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCurrentBank_Get.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCurrentBank_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornSelect",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornSelect,set=SetAcornSelect,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector])\
    ]

Messaging.Register("Experimental.AcornCurrentBank.Get", Experimental_AcornCurrentBank_Get.ID, Experimental_AcornCurrentBank_Get)
#    obj/CodeGenerator/Python/Experimental/AcornCurrentBank.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCurrentBank.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCurrentBank_Set :
    ID = 78128
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    BankSelector = OrderedDict([("BankA", 0), ("BankB", 1), ("BankC", 2)])
    ReverseBankSelector = OrderedDict([(0, "BankA"), (1, "BankB"), (2, "BankC")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 19), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (19, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Set.MSG_OFFSET + Experimental_AcornCurrentBank_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCurrentBank_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCurrentBank_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Set.MSG_OFFSET + Experimental_AcornCurrentBank_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCurrentBank_Set.ID)
            self.hdr.SetDataLength(Experimental_AcornCurrentBank_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCurrentBank.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornSelect(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCurrentBank_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCurrentBank_Set.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAcornBank(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCurrentBank_Set.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Experimental_AcornCurrentBank_Set.ReverseBankSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornSelect(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCurrentBank_Set.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCurrentBank_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAcornBank(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCurrentBank_Set.BankSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCurrentBank_Set.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornSelect",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornSelect,set=SetAcornSelect,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="AcornBank",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornBank,set=SetAcornBank,count=1, bitfieldInfo = [], enum = [BankSelector, ReverseBankSelector])\
    ]

Messaging.Register("Experimental.AcornCurrentBank.Set", Experimental_AcornCurrentBank_Set.ID, Experimental_AcornCurrentBank_Set)
#    obj/CodeGenerator/Python/Experimental/AcornCurrentBank.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCurrentBank.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCurrentBank_Result :
    ID = 78134
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 19), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (19, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Result.MSG_OFFSET + Experimental_AcornCurrentBank_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCurrentBank_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCurrentBank_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Result.MSG_OFFSET + Experimental_AcornCurrentBank_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCurrentBank_Result.ID)
            self.hdr.SetDataLength(Experimental_AcornCurrentBank_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCurrentBank.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.AcornCurrentBank.Result", Experimental_AcornCurrentBank_Result.ID, Experimental_AcornCurrentBank_Result)
#    obj/CodeGenerator/Python/Experimental/AcornCurrentBank.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCurrentBank.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCurrentBank_Status :
    ID = 78131
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 19), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (19, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Status.MSG_OFFSET + Experimental_AcornCurrentBank_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCurrentBank_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCurrentBank_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCurrentBank_Status.MSG_OFFSET + Experimental_AcornCurrentBank_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCurrentBank_Status.ID)
            self.hdr.SetDataLength(Experimental_AcornCurrentBank_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCurrentBank.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetData(self):
        """Data"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCurrentBank_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetData(self, value):
        """Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCurrentBank_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data",get=GetData,set=SetData,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCurrentBank.Status", Experimental_AcornCurrentBank_Status.ID, Experimental_AcornCurrentBank_Status)
