#    obj/CodeGenerator/Python/Experimental/GestureRecognition.py
#    Created 27/07/2023 at 10:10:33 from:
#        Messages = messages/Experimental/GestureRecognition.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GestureRecognition_Status :
    ID = 77955
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    Gestures = OrderedDict([("Wakeup", 0), ("Pickup", 1), ("Glance", 2)])
    ReverseGestures = OrderedDict([(0, "Wakeup"), (1, "Pickup"), (2, "Glance")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GestureRecognition_Status.MSG_OFFSET + Experimental_GestureRecognition_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GestureRecognition_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GestureRecognition_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GestureRecognition_Status.MSG_OFFSET + Experimental_GestureRecognition_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GestureRecognition_Status.ID)
            self.hdr.SetDataLength(Experimental_GestureRecognition_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GestureRecognition.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetGesture(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_GestureRecognition_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_GestureRecognition_Status.ReverseGestures.get(value, value)
        return value
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp(self):
        """Validity time of data, in milliseconds"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_GestureRecognition_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetGesture(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_GestureRecognition_Status.Gestures.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_GestureRecognition_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Validity time of data, in milliseconds"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_GestureRecognition_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Gesture",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetGesture,set=SetGesture,count=1, bitfieldInfo = [], enum = [Gestures, ReverseGestures]),\
        FieldInfo(name="Timestamp",type="int",units="milliseconds",minVal="0",maxVal="65535",description="Validity time of data, in milliseconds",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.GestureRecognition.Status", Experimental_GestureRecognition_Status.ID, Experimental_GestureRecognition_Status)
