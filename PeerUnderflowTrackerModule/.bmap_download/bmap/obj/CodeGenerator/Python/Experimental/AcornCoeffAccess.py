#    obj/CodeGenerator/Python/Experimental/AcornCoeffAccess.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCoeffAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCoeffAccess_Get :
    ID = 78065
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    BankSelector = OrderedDict([("BankA", 0), ("BankB", 1), ("BankC", 2)])
    ReverseBankSelector = OrderedDict([(0, "BankA"), (1, "BankB"), (2, "BankC")])
    CoeffType = OrderedDict([("B0", 0), ("B1", 1), ("B2", 2), ("A1", 3), ("A2", 4)])
    ReverseCoeffType = OrderedDict([(0, "B0"), (1, "B1"), (2, "B2"), (3, "A1"), (4, "A2")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 15), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (15, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Get.MSG_OFFSET + Experimental_AcornCoeffAccess_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCoeffAccess_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCoeffAccess_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Get.MSG_OFFSET + Experimental_AcornCoeffAccess_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCoeffAccess_Get.ID)
            self.hdr.SetDataLength(Experimental_AcornCoeffAccess_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCoeffAccess.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getacorn_select(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Get.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Getbank_select(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Get.ReverseBankSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Getcoeff_type(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Get.ReverseCoeffType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def Getcoeff_sequence_num(self):
        """coeff_sequence_num"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def Getcoeff_cnt(self):
        """coeff_cnt"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setacorn_select(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Get.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Setbank_select(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Get.BankSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Setcoeff_type(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Get.CoeffType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def Setcoeff_sequence_num(self, value):
        """coeff_sequence_num"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def Setcoeff_cnt(self, value):
        """coeff_cnt"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Get.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="acorn_select",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getacorn_select,set=Setacorn_select,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="bank_select",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getbank_select,set=Setbank_select,count=1, bitfieldInfo = [], enum = [BankSelector, ReverseBankSelector]),\
        FieldInfo(name="coeff_type",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getcoeff_type,set=Setcoeff_type,count=1, bitfieldInfo = [], enum = [CoeffType, ReverseCoeffType]),\
        FieldInfo(name="coeff_sequence_num",type="int",units="",minVal="0",maxVal="65535",description="coeff_sequence_num",get=Getcoeff_sequence_num,set=Setcoeff_sequence_num,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="coeff_cnt",type="int",units="",minVal="0",maxVal="32",description="coeff_cnt",get=Getcoeff_cnt,set=Setcoeff_cnt,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCoeffAccess.Get", Experimental_AcornCoeffAccess_Get.ID, Experimental_AcornCoeffAccess_Get)
#    obj/CodeGenerator/Python/Experimental/AcornCoeffAccess.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCoeffAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCoeffAccess_Set :
    ID = 78064
    SIZE = 71
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    BankSelector = OrderedDict([("BankA", 0), ("BankB", 1), ("BankC", 2)])
    ReverseBankSelector = OrderedDict([(0, "BankA"), (1, "BankB"), (2, "BankC")])
    CoeffType = OrderedDict([("B0", 0), ("B1", 1), ("B2", 2), ("A1", 3), ("A2", 4)])
    ReverseCoeffType = OrderedDict([(0, "B0"), (1, "B1"), (2, "B2"), (3, "A1"), (4, "A2")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 15), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (15, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Set.MSG_OFFSET + Experimental_AcornCoeffAccess_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCoeffAccess_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCoeffAccess_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Set.MSG_OFFSET + Experimental_AcornCoeffAccess_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCoeffAccess_Set.ID)
            self.hdr.SetDataLength(Experimental_AcornCoeffAccess_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCoeffAccess.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getacorn_select(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Set.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Getbank_select(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Set.ReverseBankSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Getcoeff_type(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Experimental_AcornCoeffAccess_Set.ReverseCoeffType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def Getcoeff_sequence_num(self):
        """coeff_sequence_num"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def Getcoeff_cnt(self):
        """coeff_cnt"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(16)
    def Getcoeff_value(self, idx):
        """coeff_value"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 7+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setacorn_select(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Set.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Setbank_select(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Set.BankSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Setcoeff_type(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCoeffAccess_Set.CoeffType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def Setcoeff_sequence_num(self, value):
        """coeff_sequence_num"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def Setcoeff_cnt(self, value):
        """coeff_cnt"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(16)
    def Setcoeff_value(self, value, idx):
        """coeff_value"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AcornCoeffAccess_Set.MSG_OFFSET + 7+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="acorn_select",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getacorn_select,set=Setacorn_select,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="bank_select",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getbank_select,set=Setbank_select,count=1, bitfieldInfo = [], enum = [BankSelector, ReverseBankSelector]),\
        FieldInfo(name="coeff_type",type="enumeration",units="",minVal="0",maxVal="255",description="",get=Getcoeff_type,set=Setcoeff_type,count=1, bitfieldInfo = [], enum = [CoeffType, ReverseCoeffType]),\
        FieldInfo(name="coeff_sequence_num",type="int",units="",minVal="0",maxVal="65535",description="coeff_sequence_num",get=Getcoeff_sequence_num,set=Setcoeff_sequence_num,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="coeff_cnt",type="int",units="",minVal="0",maxVal="65535",description="coeff_cnt",get=Getcoeff_cnt,set=Setcoeff_cnt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="coeff_value",type="int",units="",minVal="0",maxVal="4294967295",description="coeff_value",get=Getcoeff_value,set=Setcoeff_value,count=16, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCoeffAccess.Set", Experimental_AcornCoeffAccess_Set.ID, Experimental_AcornCoeffAccess_Set)
#    obj/CodeGenerator/Python/Experimental/AcornCoeffAccess.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCoeffAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCoeffAccess_Status :
    ID = 78067
    SIZE = 128
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 15), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (15, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Status.MSG_OFFSET + Experimental_AcornCoeffAccess_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCoeffAccess_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCoeffAccess_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCoeffAccess_Status.MSG_OFFSET + Experimental_AcornCoeffAccess_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCoeffAccess_Status.ID)
            self.hdr.SetDataLength(Experimental_AcornCoeffAccess_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCoeffAccess.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(32)
    def GetData(self, idx):
        """Data"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AcornCoeffAccess_Status.MSG_OFFSET + 0+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(32)
    def SetData(self, value, idx):
        """Data"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AcornCoeffAccess_Status.MSG_OFFSET + 0+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="4294967295",description="Data",get=GetData,set=SetData,count=32, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCoeffAccess.Status", Experimental_AcornCoeffAccess_Status.ID, Experimental_AcornCoeffAccess_Status)
