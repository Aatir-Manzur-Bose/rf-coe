#    obj/CodeGenerator/Python/Experimental/AcornFwupdate.py
#    Created 27/07/2023 at 10:10:27 from:
#        Messages = messages/Experimental/AcornFwupdate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornFwupdate_Get :
    ID = 78033
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 13), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (13, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Get.MSG_OFFSET + Experimental_AcornFwupdate_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornFwupdate_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornFwupdate_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Get.MSG_OFFSET + Experimental_AcornFwupdate_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornFwupdate_Get.ID)
            self.hdr.SetDataLength(Experimental_AcornFwupdate_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornFwupdate.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.AcornFwupdate.Get", Experimental_AcornFwupdate_Get.ID, Experimental_AcornFwupdate_Get)
#    obj/CodeGenerator/Python/Experimental/AcornFwupdate.py
#    Created 27/07/2023 at 10:10:27 from:
#        Messages = messages/Experimental/AcornFwupdate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornFwupdate_Set :
    ID = 78032
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornTarget = OrderedDict([("AcornAll", 0), ("AcornA", 1), ("AcornB", 2), ("AcornC", 3), ("AcornD", 4), ("AcornInvalid", 255)])
    ReverseAcornTarget = OrderedDict([(0, "AcornAll"), (1, "AcornA"), (2, "AcornB"), (3, "AcornC"), (4, "AcornD"), (255, "AcornInvalid")])
    AcornBank = OrderedDict([("BankA", 0), ("BankB", 1), ("BankC", 2), ("BankCnt", 3), ("BankInvalid", 255)])
    ReverseAcornBank = OrderedDict([(0, "BankA"), (1, "BankB"), (2, "BankC"), (3, "BankCnt"), (255, "BankInvalid")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 13), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (13, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Set.MSG_OFFSET + Experimental_AcornFwupdate_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornFwupdate_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornFwupdate_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Set.MSG_OFFSET + Experimental_AcornFwupdate_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornFwupdate_Set.ID)
            self.hdr.SetDataLength(Experimental_AcornFwupdate_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornFwupdate.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornFwupdate_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornFwupdate_Set.ReverseAcornTarget.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAcornBankSelect(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornFwupdate_Set.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Experimental_AcornFwupdate_Set.ReverseAcornBank.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornFwupdate_Set.AcornTarget.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornFwupdate_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAcornBankSelect(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornFwupdate_Set.AcornBank.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornFwupdate_Set.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornTarget, ReverseAcornTarget]),\
        FieldInfo(name="AcornBankSelect",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornBankSelect,set=SetAcornBankSelect,count=1, bitfieldInfo = [], enum = [AcornBank, ReverseAcornBank])\
    ]

Messaging.Register("Experimental.AcornFwupdate.Set", Experimental_AcornFwupdate_Set.ID, Experimental_AcornFwupdate_Set)
#    obj/CodeGenerator/Python/Experimental/AcornFwupdate.py
#    Created 27/07/2023 at 10:10:27 from:
#        Messages = messages/Experimental/AcornFwupdate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornFwupdate_Status :
    ID = 78035
    SIZE = 21
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 13), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (13, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Status.MSG_OFFSET + Experimental_AcornFwupdate_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornFwupdate_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornFwupdate_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornFwupdate_Status.MSG_OFFSET + Experimental_AcornFwupdate_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornFwupdate_Status.ID)
            self.hdr.SetDataLength(Experimental_AcornFwupdate_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornFwupdate.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornCount(self):
        """AcornCount"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornFwupdate_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(20)
    def GetAcornData(self, idx):
        """The Acorn Data"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornFwupdate_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornCount(self, value):
        """AcornCount"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornFwupdate_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(20)
    def SetAcornData(self, value, idx):
        """The Acorn Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornFwupdate_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornCount",type="int",units="",minVal="0",maxVal="255",description="AcornCount",get=GetAcornCount,set=SetAcornCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AcornData",type="int",units="",minVal="0",maxVal="255",description="The Acorn Data",get=GetAcornData,set=SetAcornData,count=20, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornFwupdate.Status", Experimental_AcornFwupdate_Status.ID, Experimental_AcornFwupdate_Status)
