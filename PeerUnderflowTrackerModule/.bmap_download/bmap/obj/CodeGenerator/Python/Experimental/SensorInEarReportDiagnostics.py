#    obj/CodeGenerator/Python/Experimental/SensorInEarReportDiagnostics.py
#    Created 27/07/2023 at 10:10:40 from:
#        Messages = messages/Experimental/SensorInEarReportDiagnostics.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_SensorInEarReportDiagnostics_Get :
    ID = 79185
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 85), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (85, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_SensorInEarReportDiagnostics_Get.MSG_OFFSET + Experimental_SensorInEarReportDiagnostics_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_SensorInEarReportDiagnostics_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_SensorInEarReportDiagnostics_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_SensorInEarReportDiagnostics_Get.MSG_OFFSET + Experimental_SensorInEarReportDiagnostics_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_SensorInEarReportDiagnostics_Get.ID)
            self.hdr.SetDataLength(Experimental_SensorInEarReportDiagnostics_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.SensorInEarReportDiagnostics.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.SensorInEarReportDiagnostics.Get", Experimental_SensorInEarReportDiagnostics_Get.ID, Experimental_SensorInEarReportDiagnostics_Get)
#    obj/CodeGenerator/Python/Experimental/SensorInEarReportDiagnostics.py
#    Created 27/07/2023 at 10:10:40 from:
#        Messages = messages/Experimental/SensorInEarReportDiagnostics.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_SensorInEarReportDiagnostics_Status :
    ID = 79187
    SIZE = 50
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    InEarStateEnum = OrderedDict([("DIAG_IN_EAR_STATE_UNKNOWN", 0), ("DIAG_OUT_OF_EAR", 1), ("DIAG_IN_EAR_INSERTION_PENDING", 2), ("DIAG_FINAL_START_OF_DON", 3), ("DIAG_OUT_OF_EAR_REMOVAL_PENDING", 4)])
    ReverseInEarStateEnum = OrderedDict([(0, "DIAG_IN_EAR_STATE_UNKNOWN"), (1, "DIAG_OUT_OF_EAR"), (2, "DIAG_IN_EAR_INSERTION_PENDING"), (3, "DIAG_FINAL_START_OF_DON"), (4, "DIAG_OUT_OF_EAR_REMOVAL_PENDING")])
    AccOrientationStateEnum = OrderedDict([("ACC_ORIENTATION_INVALID", 0), ("ACC_ORIENTATION_VALID", 1)])
    ReverseAccOrientationStateEnum = OrderedDict([(0, "ACC_ORIENTATION_INVALID"), (1, "ACC_ORIENTATION_VALID")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 85), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (85, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + Experimental_SensorInEarReportDiagnostics_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_SensorInEarReportDiagnostics_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_SensorInEarReportDiagnostics_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + Experimental_SensorInEarReportDiagnostics_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_SensorInEarReportDiagnostics_Status.ID)
            self.hdr.SetDataLength(Experimental_SensorInEarReportDiagnostics_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.SensorInEarReportDiagnostics.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState(self, enumAsInt=0):
        """In-ear algorithm state"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetIrLastBits(self):
        """IR sensors state"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetConchaIRValue(self):
        """Concha IR data"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetTragusIRValue(self):
        """Tragus IR data"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetAccValueX(self):
        """Accelerometer data in X direction"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetAccValueY(self):
        """Accelerometer data in Y direction"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetAccValueZ(self):
        """Accelerometer data in Z direction"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetAccOrientationState(self, enumAsInt=0):
        """Accelerometer orientation state"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 12)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseAccOrientationStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetNumInEarStateChangeHistoryEntries(self):
        """Number of In-Ear state changes in the history buffer"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState1(self, enumAsInt=0):
        """In-ear algorithm state entry 1"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 14)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState2(self, enumAsInt=0):
        """In-ear algorithm state entry 2"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 15)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState3(self, enumAsInt=0):
        """In-ear algorithm state entry 3"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 16)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState4(self, enumAsInt=0):
        """In-ear algorithm state entry 4"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 17)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState5(self, enumAsInt=0):
        """In-ear algorithm state entry 5"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 18)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState6(self, enumAsInt=0):
        """In-ear algorithm state entry 6"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 19)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState7(self, enumAsInt=0):
        """In-ear algorithm state entry 7"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 20)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('21')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState8(self, enumAsInt=0):
        """In-ear algorithm state entry 8"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 21)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState9(self, enumAsInt=0):
        """In-ear algorithm state entry 9"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 22)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState10(self, enumAsInt=0):
        """In-ear algorithm state entry 10"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 23)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState11(self, enumAsInt=0):
        """In-ear algorithm state entry 11"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 24)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(1)
    def GetInEarAlgorithmState12(self, enumAsInt=0):
        """In-ear algorithm state entry 12"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 25)[0]
        if not enumAsInt:
            value = Experimental_SensorInEarReportDiagnostics_Status.ReverseInEarStateEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp1(self):
        """Timestamp (in msec) for In-ear algorithm state entry 1"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('28')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp2(self):
        """Timestamp (in msec) for In-ear algorithm state entry 2"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('30')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp3(self):
        """Timestamp (in msec) for In-ear algorithm state entry 3"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 30)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('32')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp4(self):
        """Timestamp (in msec) for In-ear algorithm state entry 4"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 32)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('34')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp5(self):
        """Timestamp (in msec) for In-ear algorithm state entry 5"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 34)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('36')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp6(self):
        """Timestamp (in msec) for In-ear algorithm state entry 6"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 36)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('38')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp7(self):
        """Timestamp (in msec) for In-ear algorithm state entry 7"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 38)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('40')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp8(self):
        """Timestamp (in msec) for In-ear algorithm state entry 8"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 40)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('42')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp9(self):
        """Timestamp (in msec) for In-ear algorithm state entry 9"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 42)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('44')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp10(self):
        """Timestamp (in msec) for In-ear algorithm state entry 10"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 44)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('46')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp11(self):
        """Timestamp (in msec) for In-ear algorithm state entry 11"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 46)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('48')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp12(self):
        """Timestamp (in msec) for In-ear algorithm state entry 12"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 48)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState(self, value):
        """In-ear algorithm state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetIrLastBits(self, value):
        """IR sensors state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetConchaIRValue(self, value):
        """Concha IR data"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetTragusIRValue(self, value):
        """Tragus IR data"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetAccValueX(self, value):
        """Accelerometer data in X direction"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetAccValueY(self, value):
        """Accelerometer data in Y direction"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetAccValueZ(self, value):
        """Accelerometer data in Z direction"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetAccOrientationState(self, value):
        """Accelerometer orientation state"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.AccOrientationStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetNumInEarStateChangeHistoryEntries(self, value):
        """Number of In-Ear state changes in the history buffer"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState1(self, value):
        """In-ear algorithm state entry 1"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState2(self, value):
        """In-ear algorithm state entry 2"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 15, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState3(self, value):
        """In-ear algorithm state entry 3"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState4(self, value):
        """In-ear algorithm state entry 4"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState5(self, value):
        """In-ear algorithm state entry 5"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState6(self, value):
        """In-ear algorithm state entry 6"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 19, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState7(self, value):
        """In-ear algorithm state entry 7"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('21')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState8(self, value):
        """In-ear algorithm state entry 8"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 21, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState9(self, value):
        """In-ear algorithm state entry 9"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 22, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState10(self, value):
        """In-ear algorithm state entry 10"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 23, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState11(self, value):
        """In-ear algorithm state entry 11"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 24, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(1)
    def SetInEarAlgorithmState12(self, value):
        """In-ear algorithm state entry 12"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_SensorInEarReportDiagnostics_Status.InEarStateEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 25, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp1(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 26, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('28')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp2(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 28, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('30')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp3(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 3"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 30, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('32')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp4(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 4"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('34')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp5(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 5"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 34, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('36')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp6(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 6"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 36, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('38')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp7(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 7"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 38, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('40')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp8(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 8"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 40, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('42')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp9(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 9"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 42, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('44')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp10(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 10"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 44, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('46')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp11(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 11"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 46, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('48')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp12(self, value):
        """Timestamp (in msec) for In-ear algorithm state entry 12"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_SensorInEarReportDiagnostics_Status.MSG_OFFSET + 48, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="InEarAlgorithmState",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state",get=GetInEarAlgorithmState,set=SetInEarAlgorithmState,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="IrLastBits",type="int",units="",minVal="0",maxVal="255",description="IR sensors state",get=GetIrLastBits,set=SetIrLastBits,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ConchaIRValue",type="int",units="",minVal="0",maxVal="65535",description="Concha IR data",get=GetConchaIRValue,set=SetConchaIRValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TragusIRValue",type="int",units="",minVal="0",maxVal="65535",description="Tragus IR data",get=GetTragusIRValue,set=SetTragusIRValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccValueX",type="int",units="",minVal="-32768",maxVal="32767",description="Accelerometer data in X direction",get=GetAccValueX,set=SetAccValueX,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccValueY",type="int",units="",minVal="-32768",maxVal="32767",description="Accelerometer data in Y direction",get=GetAccValueY,set=SetAccValueY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccValueZ",type="int",units="",minVal="-32768",maxVal="32767",description="Accelerometer data in Z direction",get=GetAccValueZ,set=SetAccValueZ,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccOrientationState",type="enumeration",units="",minVal="0",maxVal="255",description="Accelerometer orientation state",get=GetAccOrientationState,set=SetAccOrientationState,count=1, bitfieldInfo = [], enum = [AccOrientationStateEnum, ReverseAccOrientationStateEnum]),\
        FieldInfo(name="NumInEarStateChangeHistoryEntries",type="int",units="",minVal="0",maxVal="255",description="Number of In-Ear state changes in the history buffer",get=GetNumInEarStateChangeHistoryEntries,set=SetNumInEarStateChangeHistoryEntries,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="InEarAlgorithmState1",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 1",get=GetInEarAlgorithmState1,set=SetInEarAlgorithmState1,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState2",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 2",get=GetInEarAlgorithmState2,set=SetInEarAlgorithmState2,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState3",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 3",get=GetInEarAlgorithmState3,set=SetInEarAlgorithmState3,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState4",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 4",get=GetInEarAlgorithmState4,set=SetInEarAlgorithmState4,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState5",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 5",get=GetInEarAlgorithmState5,set=SetInEarAlgorithmState5,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState6",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 6",get=GetInEarAlgorithmState6,set=SetInEarAlgorithmState6,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState7",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 7",get=GetInEarAlgorithmState7,set=SetInEarAlgorithmState7,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState8",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 8",get=GetInEarAlgorithmState8,set=SetInEarAlgorithmState8,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState9",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 9",get=GetInEarAlgorithmState9,set=SetInEarAlgorithmState9,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState10",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 10",get=GetInEarAlgorithmState10,set=SetInEarAlgorithmState10,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState11",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 11",get=GetInEarAlgorithmState11,set=SetInEarAlgorithmState11,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="InEarAlgorithmState12",type="enumeration",units="",minVal="0",maxVal="255",description="In-ear algorithm state entry 12",get=GetInEarAlgorithmState12,set=SetInEarAlgorithmState12,count=1, bitfieldInfo = [], enum = [InEarStateEnum, ReverseInEarStateEnum]),\
        FieldInfo(name="Timestamp1",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 1",get=GetTimestamp1,set=SetTimestamp1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp2",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 2",get=GetTimestamp2,set=SetTimestamp2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp3",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 3",get=GetTimestamp3,set=SetTimestamp3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp4",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 4",get=GetTimestamp4,set=SetTimestamp4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp5",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 5",get=GetTimestamp5,set=SetTimestamp5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp6",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 6",get=GetTimestamp6,set=SetTimestamp6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp7",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 7",get=GetTimestamp7,set=SetTimestamp7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp8",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 8",get=GetTimestamp8,set=SetTimestamp8,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp9",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 9",get=GetTimestamp9,set=SetTimestamp9,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp10",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 10",get=GetTimestamp10,set=SetTimestamp10,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp11",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 11",get=GetTimestamp11,set=SetTimestamp11,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Timestamp12",type="int",units="",minVal="0",maxVal="65535",description="Timestamp (in msec) for In-ear algorithm state entry 12",get=GetTimestamp12,set=SetTimestamp12,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.SensorInEarReportDiagnostics.Status", Experimental_SensorInEarReportDiagnostics_Status.ID, Experimental_SensorInEarReportDiagnostics_Status)
