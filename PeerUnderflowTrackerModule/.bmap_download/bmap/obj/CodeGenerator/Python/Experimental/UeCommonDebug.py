#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_Get :
    ID = 79153
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Get.MSG_OFFSET + Experimental_UeCommonDebug_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Get.MSG_OFFSET + Experimental_UeCommonDebug_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_Get.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStateType(self):
        """The type of state to get"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStateType(self, value):
        """The type of state to get"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="StateType",type="int",units="",minVal="0",maxVal="255",description="The type of state to get",get=GetStateType,set=SetStateType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonDebug.Get", Experimental_UeCommonDebug_Get.ID, Experimental_UeCommonDebug_Get)
#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_SetGet :
    ID = 79154
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 2)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_SetGet.MSG_OFFSET + Experimental_UeCommonDebug_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_SetGet.MSG_OFFSET + Experimental_UeCommonDebug_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_SetGet.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStateType(self):
        """The type of state to set"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetStateValue(self):
        """State value to set"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStateType(self, value):
        """The type of state to set"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetStateValue(self, value):
        """State value to set"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="StateType",type="int",units="",minVal="0",maxVal="255",description="The type of state to set",get=GetStateType,set=SetStateType,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="StateValue",type="int",units="",minVal="0",maxVal="255",description="State value to set",get=GetStateValue,set=SetStateValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonDebug.SetGet", Experimental_UeCommonDebug_SetGet.ID, Experimental_UeCommonDebug_SetGet)
#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_Status :
    ID = 79155
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Status.MSG_OFFSET + Experimental_UeCommonDebug_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Status.MSG_OFFSET + Experimental_UeCommonDebug_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_Status.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStateType(self):
        """The type of state"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetStateValueOld(self):
        """Old state value"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetStateValueNew(self):
        """New state value"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStateType(self, value):
        """The type of state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetStateValueOld(self, value):
        """Old state value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetStateValueNew(self, value):
        """New state value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="StateType",type="int",units="",minVal="0",maxVal="255",description="The type of state",get=GetStateType,set=SetStateType,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="StateValueOld",type="int",units="",minVal="0",maxVal="255",description="Old state value",get=GetStateValueOld,set=SetStateValueOld,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="StateValueNew",type="int",units="",minVal="0",maxVal="255",description="New state value",get=GetStateValueNew,set=SetStateValueNew,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonDebug.Status", Experimental_UeCommonDebug_Status.ID, Experimental_UeCommonDebug_Status)
#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_Start :
    ID = 79157
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 5)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Start.MSG_OFFSET + Experimental_UeCommonDebug_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Start.MSG_OFFSET + Experimental_UeCommonDebug_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_Start.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEventType(self):
        """The type of event"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParameter1(self):
        """Event specific parameter1, such as battery soc percentage value, earbud machine state"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetParameter2(self):
        """Event specific parameter2"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetParameter3(self):
        """Event specific parameter3"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetParameter4(self):
        """Event specific parameter4"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEventType(self, value):
        """The type of event"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParameter1(self, value):
        """Event specific parameter1, such as battery soc percentage value, earbud machine state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetParameter2(self, value):
        """Event specific parameter2"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetParameter3(self, value):
        """Event specific parameter3"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetParameter4(self, value):
        """Event specific parameter4"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Start.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EventType",type="int",units="",minVal="0",maxVal="255",description="The type of event",get=GetEventType,set=SetEventType,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Parameter1",type="int",units="",minVal="0",maxVal="255",description="Event specific parameter1, such as battery soc percentage value, earbud machine state",get=GetParameter1,set=SetParameter1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Parameter2",type="int",units="",minVal="0",maxVal="255",description="Event specific parameter2",get=GetParameter2,set=SetParameter2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Parameter3",type="int",units="",minVal="0",maxVal="255",description="Event specific parameter3",get=GetParameter3,set=SetParameter3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Parameter4",type="int",units="",minVal="0",maxVal="255",description="Event specific parameter4",get=GetParameter4,set=SetParameter4,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonDebug.Start", Experimental_UeCommonDebug_Start.ID, Experimental_UeCommonDebug_Start)
#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_Result :
    ID = 79158
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Result.MSG_OFFSET + Experimental_UeCommonDebug_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Result.MSG_OFFSET + Experimental_UeCommonDebug_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_Result.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEventType(self):
        """Type of event that was published"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetoldValue(self):
        """Old state value"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetnewValue(self):
        """New state value"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEventType(self, value):
        """Type of event that was published"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetoldValue(self, value):
        """Old state value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetnewValue(self, value):
        """New state value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonDebug_Result.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EventType",type="int",units="",minVal="0",maxVal="255",description="Type of event that was published",get=GetEventType,set=SetEventType,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="oldValue",type="int",units="",minVal="0",maxVal="255",description="Old state value",get=GetoldValue,set=SetoldValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="newValue",type="int",units="",minVal="0",maxVal="255",description="New state value",get=GetnewValue,set=SetnewValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonDebug.Result", Experimental_UeCommonDebug_Result.ID, Experimental_UeCommonDebug_Result)
#    obj/CodeGenerator/Python/Experimental/UeCommonDebug.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonDebug.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonDebug_Processing :
    ID = 79159
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 83), ("Operator", 7)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (83, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Processing.MSG_OFFSET + Experimental_UeCommonDebug_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonDebug_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonDebug_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonDebug_Processing.MSG_OFFSET + Experimental_UeCommonDebug_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonDebug_Processing.ID)
            self.hdr.SetDataLength(Experimental_UeCommonDebug_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonDebug.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.UeCommonDebug.Processing", Experimental_UeCommonDebug_Processing.ID, Experimental_UeCommonDebug_Processing)
