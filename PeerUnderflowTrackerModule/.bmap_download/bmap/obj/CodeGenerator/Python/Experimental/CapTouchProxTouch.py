#    obj/CodeGenerator/Python/Experimental/CapTouchProxTouch.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/CapTouchProxTouch.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchProxTouch_Set :
    ID = 78368
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    CollectDataControl = OrderedDict([("Disable", 0), ("Enable", 1)])
    ReverseCollectDataControl = OrderedDict([(0, "Disable"), (1, "Enable")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 34), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (34, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchProxTouch_Set.MSG_OFFSET + Experimental_CapTouchProxTouch_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchProxTouch_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchProxTouch_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchProxTouch_Set.MSG_OFFSET + Experimental_CapTouchProxTouch_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchProxTouch_Set.ID)
            self.hdr.SetDataLength(Experimental_CapTouchProxTouch_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchProxTouch.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnableDC(self, enumAsInt=0):
        """Enable/Disable data collection"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_CapTouchProxTouch_Set.ReverseCollectDataControl.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnableDC(self, value):
        """Enable/Disable data collection"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_CapTouchProxTouch_Set.CollectDataControl.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Set.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EnableDC",type="enumeration",units="",minVal="0",maxVal="255",description="Enable/Disable data collection",get=GetEnableDC,set=SetEnableDC,count=1, bitfieldInfo = [], enum = [CollectDataControl, ReverseCollectDataControl])\
    ]

Messaging.Register("Experimental.CapTouchProxTouch.Set", Experimental_CapTouchProxTouch_Set.ID, Experimental_CapTouchProxTouch_Set)
#    obj/CodeGenerator/Python/Experimental/CapTouchProxTouch.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/CapTouchProxTouch.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchProxTouch_Status :
    ID = 78371
    SIZE = 20
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 34), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (34, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchProxTouch_Status.MSG_OFFSET + Experimental_CapTouchProxTouch_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchProxTouch_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchProxTouch_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchProxTouch_Status.MSG_OFFSET + Experimental_CapTouchProxTouch_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchProxTouch_Status.ID)
            self.hdr.SetDataLength(Experimental_CapTouchProxTouch_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchProxTouch.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSystemInfo0(self):
        """System Info 0 register"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSystemInfo1(self):
        """System Info 1 register"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTpMovement(self):
        """Activity or movement on trackpad status"""
        value = (self.GetSystemInfo1() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetPalmDetect(self):
        """Palm detect status"""
        value = (self.GetSystemInfo1() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTooManyFingers(self):
        """Total finger status"""
        value = (self.GetSystemInfo1() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetRrMissed(self):
        """"""
        value = (self.GetSystemInfo1() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetSwitchState(self):
        """"""
        value = (self.GetSystemInfo1() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetSnapToggle(self):
        """"""
        value = (self.GetSystemInfo1() >> 5) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """"""
        value = (self.GetSystemInfo1() >> 6) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus0(self):
        """Proximity status for row 0"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus1(self):
        """Proximity status for row 1"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus2(self):
        """Proximity status for row 2"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus3(self):
        """Proximity status for row 3"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus4(self):
        """Proximity status for row 4"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus5(self):
        """Proximity status for row 5"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus6(self):
        """Proximity status for row 6"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus7(self):
        """Proximity status for row 7"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetProximityStatus8(self):
        """Proximity status for row 8"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus0(self):
        """Touch status for row 0"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus1(self):
        """Touch status for row 1"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus2(self):
        """Touch status for row 2"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus3(self):
        """Touch status for row 3"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus4(self):
        """Touch status for row 4"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 15)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus5(self):
        """Touch status for row 5"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus6(self):
        """Touch status for row 6"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 17)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus7(self):
        """Touch status for row 7"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def GetTouchStatus8(self):
        """Touch status for row 8"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 19)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSystemInfo0(self, value):
        """System Info 0 register"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSystemInfo1(self, value):
        """System Info 1 register"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTpMovement(self, value):
        """Activity or movement on trackpad status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetPalmDetect(self, value):
        """Palm detect status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTooManyFingers(self, value):
        """Total finger status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetRrMissed(self, value):
        """"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetSwitchState(self, value):
        """"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetSnapToggle(self, value):
        """"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """"""
        tmp = min(max(value, 0), 3)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus0(self, value):
        """Proximity status for row 0"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus1(self, value):
        """Proximity status for row 1"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus2(self, value):
        """Proximity status for row 2"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus3(self, value):
        """Proximity status for row 3"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus4(self, value):
        """Proximity status for row 4"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus5(self, value):
        """Proximity status for row 5"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus6(self, value):
        """Proximity status for row 6"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus7(self, value):
        """Proximity status for row 7"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetProximityStatus8(self, value):
        """Proximity status for row 8"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus0(self, value):
        """Touch status for row 0"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus1(self, value):
        """Touch status for row 1"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus2(self, value):
        """Touch status for row 2"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus3(self, value):
        """Touch status for row 3"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus4(self, value):
        """Touch status for row 4"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 15, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus5(self, value):
        """Touch status for row 5"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus6(self, value):
        """Touch status for row 6"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus7(self, value):
        """Touch status for row 7"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def SetTouchStatus8(self, value):
        """Touch status for row 8"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchProxTouch_Status.MSG_OFFSET + 19, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SystemInfo0",type="int",units="",minVal="0",maxVal="255",description="System Info 0 register",get=GetSystemInfo0,set=SetSystemInfo0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SystemInfo1",type="int",units="",minVal="0",maxVal="255",description="System Info 1 register",get=GetSystemInfo1,set=SetSystemInfo1,count=1, bitfieldInfo = [\
            BitFieldInfo(name="TpMovement",type="int",units="Boolean",minVal="0",maxVal="1",description="Activity or movement on trackpad status",get=GetTpMovement,set=SetTpMovement, enum = []),\
            BitFieldInfo(name="PalmDetect",type="int",units="Boolean",minVal="0",maxVal="1",description="Palm detect status",get=GetPalmDetect,set=SetPalmDetect, enum = []),\
            BitFieldInfo(name="TooManyFingers",type="int",units="Boolean",minVal="0",maxVal="1",description="Total finger status",get=GetTooManyFingers,set=SetTooManyFingers, enum = []),\
            BitFieldInfo(name="RrMissed",type="int",units="",minVal="0",maxVal="1",description="",get=GetRrMissed,set=SetRrMissed, enum = []),\
            BitFieldInfo(name="SwitchState",type="int",units="",minVal="0",maxVal="1",description="",get=GetSwitchState,set=SetSwitchState, enum = []),\
            BitFieldInfo(name="SnapToggle",type="int",units="",minVal="0",maxVal="1",description="",get=GetSnapToggle,set=SetSnapToggle, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="3",description="",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="ProximityStatus0",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 0",get=GetProximityStatus0,set=SetProximityStatus0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus1",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 1",get=GetProximityStatus1,set=SetProximityStatus1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus2",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 2",get=GetProximityStatus2,set=SetProximityStatus2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus3",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 3",get=GetProximityStatus3,set=SetProximityStatus3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus4",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 4",get=GetProximityStatus4,set=SetProximityStatus4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus5",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 5",get=GetProximityStatus5,set=SetProximityStatus5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus6",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 6",get=GetProximityStatus6,set=SetProximityStatus6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus7",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 7",get=GetProximityStatus7,set=SetProximityStatus7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ProximityStatus8",type="int",units="",minVal="0",maxVal="255",description="Proximity status for row 8",get=GetProximityStatus8,set=SetProximityStatus8,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus0",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 0",get=GetTouchStatus0,set=SetTouchStatus0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus1",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 1",get=GetTouchStatus1,set=SetTouchStatus1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus2",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 2",get=GetTouchStatus2,set=SetTouchStatus2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus3",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 3",get=GetTouchStatus3,set=SetTouchStatus3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus4",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 4",get=GetTouchStatus4,set=SetTouchStatus4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus5",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 5",get=GetTouchStatus5,set=SetTouchStatus5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus6",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 6",get=GetTouchStatus6,set=SetTouchStatus6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus7",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 7",get=GetTouchStatus7,set=SetTouchStatus7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStatus8",type="int",units="",minVal="0",maxVal="255",description="Touch status for row 8",get=GetTouchStatus8,set=SetTouchStatus8,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.CapTouchProxTouch.Status", Experimental_CapTouchProxTouch_Status.ID, Experimental_CapTouchProxTouch_Status)
