#    obj/CodeGenerator/Python/Experimental/AcornBiquadFq.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornBiquadFq.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornBiquadFq_Get :
    ID = 78321
    SIZE = 20
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 31), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (31, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornBiquadFq_Get.MSG_OFFSET + Experimental_AcornBiquadFq_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornBiquadFq_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornBiquadFq_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornBiquadFq_Get.MSG_OFFSET + Experimental_AcornBiquadFq_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornBiquadFq_Get.ID)
            self.hdr.SetDataLength(Experimental_AcornBiquadFq_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornBiquadFq.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Getzf(self):
        """Zf"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def Getzq(self):
        """Zq"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def Getpf(self):
        """Pf"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def Getpq(self):
        """Pq"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def Getfs(self):
        """Fs (sampling frequency)"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Setzf(self, value):
        """Zf"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def Setzq(self, value):
        """Zq"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def Setpf(self, value):
        """Pf"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def Setpq(self, value):
        """Pq"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def Setfs(self, value):
        """Fs (sampling frequency)"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AcornBiquadFq_Get.MSG_OFFSET + 16, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="zf",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Zf",get=Getzf,set=Setzf,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="zq",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Zq",get=Getzq,set=Setzq,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="pf",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Pf",get=Getpf,set=Setpf,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="pq",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Pq",get=Getpq,set=Setpq,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="fs",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Fs (sampling frequency)",get=Getfs,set=Setfs,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornBiquadFq.Get", Experimental_AcornBiquadFq_Get.ID, Experimental_AcornBiquadFq_Get)
#    obj/CodeGenerator/Python/Experimental/AcornBiquadFq.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornBiquadFq.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornBiquadFq_Status :
    ID = 78323
    SIZE = 24
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 31), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (31, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornBiquadFq_Status.MSG_OFFSET + Experimental_AcornBiquadFq_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornBiquadFq_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornBiquadFq_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornBiquadFq_Status.MSG_OFFSET + Experimental_AcornBiquadFq_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornBiquadFq_Status.ID)
            self.hdr.SetDataLength(Experimental_AcornBiquadFq_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornBiquadFq.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(6)
    def GetData(self, idx):
        """Calculated biquad coefficients in 5.27 format"""
        value = struct.unpack_from('>l', self.rawBuffer(), Experimental_AcornBiquadFq_Status.MSG_OFFSET + 0+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(6)
    def SetData(self, value, idx):
        """Calculated biquad coefficients in 5.27 format"""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Experimental_AcornBiquadFq_Status.MSG_OFFSET + 0+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Data",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Calculated biquad coefficients in 5.27 format",get=GetData,set=SetData,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornBiquadFq.Status", Experimental_AcornBiquadFq_Status.ID, Experimental_AcornBiquadFq_Status)
