#    obj/CodeGenerator/Python/Experimental/UeCommonInit.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonInit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonInit_SetGet :
    ID = 79170
    SIZE = 23
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 84), ("Operator", 2)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (84, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonInit_SetGet.MSG_OFFSET + Experimental_UeCommonInit_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonInit_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonInit_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonInit_SetGet.MSG_OFFSET + Experimental_UeCommonInit_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonInit_SetGet.ID)
            self.hdr.SetDataLength(Experimental_UeCommonInit_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonInit.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSinkState(self):
        """Init value for currentSinkState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetprevUeSinkState(self):
        """Init value for prevUeSinkState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetcurrUeSinkState(self):
        """Init value for currUeSinkState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetprevUePeerSinkState(self):
        """Init value for prevUePeerSinkState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetcurrUePeerSinkState(self):
        """Init value for currUePeerSinkState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetprevUePhyStatus(self):
        """Init value for prevUePhyStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetcurrUePhyStatus(self):
        """Init value for currUePhyStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetprevPeerUePhyStatus(self):
        """Init value for prevPeerUePhyStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetcurrPeerUePhyStatus(self):
        """Init value for currPeerUePhyStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetprevUeLidStatus(self):
        """Init value for prevUeLidStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetcurrUeLidStatus(self):
        """Init value for currUeLidStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetprevBattSOC(self):
        """Init value for prevBattSOC"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetcurrBattSOC(self):
        """Init value for currBattSOC"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetbattSubsysStatus(self):
        """Init value for battSubsysStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def GetcurrUeChargingStatus(self):
        """Init value for currUeChargingStatus"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetpeerBattSOC(self):
        """Init value for peerBattSOC"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 15)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetuePhyListenSensorDrv(self):
        """Init value for uePhyListenSensorDrv"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetueUsbConnected(self):
        """Init value for ueUsbConnected"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 17)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def GetueBudsConnectState(self):
        """Init value for ueBudsConnectState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def GetnumberConnectedAg(self):
        """Init value for numberConnectedAg"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 19)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def GetemcSubState(self):
        """Init value for emcSubState"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('21')
    @msg.size('1')
    @msg.count(1)
    def GetprevBattRegion(self):
        """Init value for prevBattRegion"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 21)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def GetcurrBattRegion(self):
        """Init value for currBattRegion"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSinkState(self, value):
        """Init value for currentSinkState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetprevUeSinkState(self, value):
        """Init value for prevUeSinkState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetcurrUeSinkState(self, value):
        """Init value for currUeSinkState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetprevUePeerSinkState(self, value):
        """Init value for prevUePeerSinkState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetcurrUePeerSinkState(self, value):
        """Init value for currUePeerSinkState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetprevUePhyStatus(self, value):
        """Init value for prevUePhyStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetcurrUePhyStatus(self, value):
        """Init value for currUePhyStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetprevPeerUePhyStatus(self, value):
        """Init value for prevPeerUePhyStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetcurrPeerUePhyStatus(self, value):
        """Init value for currPeerUePhyStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetprevUeLidStatus(self, value):
        """Init value for prevUeLidStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetcurrUeLidStatus(self, value):
        """Init value for currUeLidStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetprevBattSOC(self, value):
        """Init value for prevBattSOC"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetcurrBattSOC(self, value):
        """Init value for currBattSOC"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetbattSubsysStatus(self, value):
        """Init value for battSubsysStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def SetcurrUeChargingStatus(self, value):
        """Init value for currUeChargingStatus"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetpeerBattSOC(self, value):
        """Init value for peerBattSOC"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 15, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetuePhyListenSensorDrv(self, value):
        """Init value for uePhyListenSensorDrv"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetueUsbConnected(self, value):
        """Init value for ueUsbConnected"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(1)
    def SetueBudsConnectState(self, value):
        """Init value for ueBudsConnectState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(1)
    def SetnumberConnectedAg(self, value):
        """Init value for numberConnectedAg"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 19, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def SetemcSubState(self, value):
        """Init value for emcSubState"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('21')
    @msg.size('1')
    @msg.count(1)
    def SetprevBattRegion(self, value):
        """Init value for prevBattRegion"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 21, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def SetcurrBattRegion(self, value):
        """Init value for currBattRegion"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_UeCommonInit_SetGet.MSG_OFFSET + 22, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentSinkState",type="int",units="",minVal="0",maxVal="255",description="Init value for currentSinkState",get=GetCurrentSinkState,set=SetCurrentSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevUeSinkState",type="int",units="",minVal="0",maxVal="255",description="Init value for prevUeSinkState",get=GetprevUeSinkState,set=SetprevUeSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currUeSinkState",type="int",units="",minVal="0",maxVal="255",description="Init value for currUeSinkState",get=GetcurrUeSinkState,set=SetcurrUeSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevUePeerSinkState",type="int",units="",minVal="0",maxVal="255",description="Init value for prevUePeerSinkState",get=GetprevUePeerSinkState,set=SetprevUePeerSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currUePeerSinkState",type="int",units="",minVal="0",maxVal="255",description="Init value for currUePeerSinkState",get=GetcurrUePeerSinkState,set=SetcurrUePeerSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevUePhyStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for prevUePhyStatus",get=GetprevUePhyStatus,set=SetprevUePhyStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currUePhyStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for currUePhyStatus",get=GetcurrUePhyStatus,set=SetcurrUePhyStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevPeerUePhyStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for prevPeerUePhyStatus",get=GetprevPeerUePhyStatus,set=SetprevPeerUePhyStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currPeerUePhyStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for currPeerUePhyStatus",get=GetcurrPeerUePhyStatus,set=SetcurrPeerUePhyStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevUeLidStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for prevUeLidStatus",get=GetprevUeLidStatus,set=SetprevUeLidStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currUeLidStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for currUeLidStatus",get=GetcurrUeLidStatus,set=SetcurrUeLidStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevBattSOC",type="int",units="",minVal="0",maxVal="255",description="Init value for prevBattSOC",get=GetprevBattSOC,set=SetprevBattSOC,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currBattSOC",type="int",units="",minVal="0",maxVal="255",description="Init value for currBattSOC",get=GetcurrBattSOC,set=SetcurrBattSOC,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="battSubsysStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for battSubsysStatus",get=GetbattSubsysStatus,set=SetbattSubsysStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currUeChargingStatus",type="int",units="",minVal="0",maxVal="255",description="Init value for currUeChargingStatus",get=GetcurrUeChargingStatus,set=SetcurrUeChargingStatus,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="peerBattSOC",type="int",units="",minVal="0",maxVal="255",description="Init value for peerBattSOC",get=GetpeerBattSOC,set=SetpeerBattSOC,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="uePhyListenSensorDrv",type="int",units="",minVal="0",maxVal="255",description="Init value for uePhyListenSensorDrv",get=GetuePhyListenSensorDrv,set=SetuePhyListenSensorDrv,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ueUsbConnected",type="int",units="",minVal="0",maxVal="255",description="Init value for ueUsbConnected",get=GetueUsbConnected,set=SetueUsbConnected,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ueBudsConnectState",type="int",units="",minVal="0",maxVal="255",description="Init value for ueBudsConnectState",get=GetueBudsConnectState,set=SetueBudsConnectState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="numberConnectedAg",type="int",units="",minVal="0",maxVal="255",description="Init value for numberConnectedAg",get=GetnumberConnectedAg,set=SetnumberConnectedAg,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="emcSubState",type="int",units="",minVal="0",maxVal="255",description="Init value for emcSubState",get=GetemcSubState,set=SetemcSubState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="prevBattRegion",type="int",units="",minVal="0",maxVal="255",description="Init value for prevBattRegion",get=GetprevBattRegion,set=SetprevBattRegion,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="currBattRegion",type="int",units="",minVal="0",maxVal="255",description="Init value for currBattRegion",get=GetcurrBattRegion,set=SetcurrBattRegion,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.UeCommonInit.SetGet", Experimental_UeCommonInit_SetGet.ID, Experimental_UeCommonInit_SetGet)
#    obj/CodeGenerator/Python/Experimental/UeCommonInit.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeCommonInit.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeCommonInit_Status :
    ID = 79171
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 84), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (84, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeCommonInit_Status.MSG_OFFSET + Experimental_UeCommonInit_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeCommonInit_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeCommonInit_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeCommonInit_Status.MSG_OFFSET + Experimental_UeCommonInit_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeCommonInit_Status.ID)
            self.hdr.SetDataLength(Experimental_UeCommonInit_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeCommonInit.Status"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.UeCommonInit.Status", Experimental_UeCommonInit_Status.ID, Experimental_UeCommonInit_Status)
