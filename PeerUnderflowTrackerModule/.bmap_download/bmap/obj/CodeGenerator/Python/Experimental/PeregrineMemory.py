#    obj/CodeGenerator/Python/Experimental/PeregrineMemory.py
#    Created 27/07/2023 at 10:10:38 from:
#        Messages = messages/Experimental/PeregrineMemory.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineMemory_Get :
    ID = 78625
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 50), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (50, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Get.MSG_OFFSET + Experimental_PeregrineMemory_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineMemory_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineMemory_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Get.MSG_OFFSET + Experimental_PeregrineMemory_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineMemory_Get.ID)
            self.hdr.SetDataLength(Experimental_PeregrineMemory_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineMemory.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """id of Peregrine to access"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def Getregister_address(self):
        """16-bit address"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Getlength(self):
        """Byte count"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """id of Peregrine to access"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def Setregister_address(self, value):
        """16-bit address"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Setlength(self, value):
        """Byte count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Get.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="id of Peregrine to access",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="register_address",type="int",units="",minVal="0",maxVal="65535",description="16-bit address",get=Getregister_address,set=Setregister_address,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="length",type="int",units="",minVal="0",maxVal="32",description="Byte count",get=Getlength,set=Setlength,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.PeregrineMemory.Get", Experimental_PeregrineMemory_Get.ID, Experimental_PeregrineMemory_Get)
#    obj/CodeGenerator/Python/Experimental/PeregrineMemory.py
#    Created 27/07/2023 at 10:10:38 from:
#        Messages = messages/Experimental/PeregrineMemory.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineMemory_Set :
    ID = 78624
    SIZE = 36
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 50), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (50, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Set.MSG_OFFSET + Experimental_PeregrineMemory_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineMemory_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineMemory_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Set.MSG_OFFSET + Experimental_PeregrineMemory_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineMemory_Set.ID)
            self.hdr.SetDataLength(Experimental_PeregrineMemory_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineMemory.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """id of Peregrine to access"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def Getregister_address(self):
        """16-bit address"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Getlength(self):
        """Byte count"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(32)
    def Getregister_value(self, idx):
        """value(s) to write"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """id of Peregrine to access"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def Setregister_address(self, value):
        """16-bit address"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('32')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Setlength(self, value):
        """Byte count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(32)
    def Setregister_value(self, value, idx):
        """value(s) to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Set.MSG_OFFSET + 4+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="id of Peregrine to access",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="register_address",type="int",units="",minVal="0",maxVal="65535",description="16-bit address",get=Getregister_address,set=Setregister_address,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="length",type="int",units="",minVal="0",maxVal="32",description="Byte count",get=Getlength,set=Setlength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="register_value",type="int",units="",minVal="0",maxVal="255",description="value(s) to write",get=Getregister_value,set=Setregister_value,count=32, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.PeregrineMemory.Set", Experimental_PeregrineMemory_Set.ID, Experimental_PeregrineMemory_Set)
#    obj/CodeGenerator/Python/Experimental/PeregrineMemory.py
#    Created 27/07/2023 at 10:10:38 from:
#        Messages = messages/Experimental/PeregrineMemory.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_PeregrineMemory_Status :
    ID = 78627
    SIZE = 32
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 50), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (50, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Status.MSG_OFFSET + Experimental_PeregrineMemory_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_PeregrineMemory_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_PeregrineMemory_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_PeregrineMemory_Status.MSG_OFFSET + Experimental_PeregrineMemory_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_PeregrineMemory_Status.ID)
            self.hdr.SetDataLength(Experimental_PeregrineMemory_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.PeregrineMemory.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def GetData(self, idx):
        """Data"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_PeregrineMemory_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def SetData(self, value, idx):
        """Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_PeregrineMemory_Status.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data",get=GetData,set=SetData,count=32, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.PeregrineMemory.Status", Experimental_PeregrineMemory_Status.ID, Experimental_PeregrineMemory_Status)
