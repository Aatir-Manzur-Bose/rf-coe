#    obj/CodeGenerator/Python/Experimental/AlexaProtocol.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/AlexaProtocol.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AlexaProtocol_Start :
    ID = 78597
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AlexaProtocolFunctionOption = OrderedDict([("Decode octet stream of a regular length packet", 1), ("GPB encode AMA octets into a regular length packet", 2), ("GPB Encode/Decode of a regular length packet", 3), ("Simulate AMA message reception", 4), ("Decode octet stream of a extended length packet", 5), ("GPB encode AMA octets into a extended length packet", 6), ("GPB Encode/Decode extended length packet", 7), ("Process reception of a AMA Call message", 8)])
    ReverseAlexaProtocolFunctionOption = OrderedDict([(1, "Decode octet stream of a regular length packet"), (2, "GPB encode AMA octets into a regular length packet"), (3, "GPB Encode/Decode of a regular length packet"), (4, "Simulate AMA message reception"), (5, "Decode octet stream of a extended length packet"), (6, "GPB encode AMA octets into a extended length packet"), (7, "GPB Encode/Decode extended length packet"), (8, "Process reception of a AMA Call message")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 48), ("Operator", 5)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (48, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AlexaProtocol_Start.MSG_OFFSET + Experimental_AlexaProtocol_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AlexaProtocol_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AlexaProtocol_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AlexaProtocol_Start.MSG_OFFSET + Experimental_AlexaProtocol_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AlexaProtocol_Start.ID)
            self.hdr.SetDataLength(Experimental_AlexaProtocol_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AlexaProtocol.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFunctionOption(self, enumAsInt=0):
        """Function option (1 thru 8)"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AlexaProtocol_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AlexaProtocol_Start.ReverseAlexaProtocolFunctionOption.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(254)
    def GetFunctionInput(self, idx):
        """Input Octet(s)"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AlexaProtocol_Start.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFunctionOption(self, value):
        """Function option (1 thru 8)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AlexaProtocol_Start.AlexaProtocolFunctionOption.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AlexaProtocol_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(254)
    def SetFunctionInput(self, value, idx):
        """Input Octet(s)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AlexaProtocol_Start.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FunctionOption",type="enumeration",units="",minVal="0",maxVal="255",description="Function option (1 thru 8)",get=GetFunctionOption,set=SetFunctionOption,count=1, bitfieldInfo = [], enum = [AlexaProtocolFunctionOption, ReverseAlexaProtocolFunctionOption]),\
        FieldInfo(name="FunctionInput",type="int",units="",minVal="0",maxVal="255",description="Input Octet(s)",get=GetFunctionInput,set=SetFunctionInput,count=254, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AlexaProtocol.Start", Experimental_AlexaProtocol_Start.ID, Experimental_AlexaProtocol_Start)
#    obj/CodeGenerator/Python/Experimental/AlexaProtocol.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/AlexaProtocol.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AlexaProtocol_Result :
    ID = 78598
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 48), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (48, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AlexaProtocol_Result.MSG_OFFSET + Experimental_AlexaProtocol_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AlexaProtocol_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AlexaProtocol_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AlexaProtocol_Result.MSG_OFFSET + Experimental_AlexaProtocol_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AlexaProtocol_Result.ID)
            self.hdr.SetDataLength(Experimental_AlexaProtocol_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AlexaProtocol.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.AlexaProtocol.Result", Experimental_AlexaProtocol_Result.ID, Experimental_AlexaProtocol_Result)
