#    obj/CodeGenerator/Python/Experimental/Algorithm.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_Algorithm_Get :
    ID = 78913
    SIZE = 65
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 68), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (68, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_Algorithm_Get.MSG_OFFSET + Experimental_Algorithm_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_Algorithm_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_Algorithm_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_Algorithm_Get.MSG_OFFSET + Experimental_Algorithm_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_Algorithm_Get.ID)
            self.hdr.SetDataLength(Experimental_Algorithm_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.Algorithm.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Getalgorithm_name(self):
        """Null-terminated name of algorithm to get data from."""
        count = 32
        if count > len(self.rawBuffer())-(Experimental_Algorithm_Get.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Experimental_Algorithm_Get.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(32)
    def Getparameter_name(self):
        """Null-terminated name of algo parameter to access"""
        count = 32
        if count > len(self.rawBuffer())-(Experimental_Algorithm_Get.MSG_OFFSET + 33):
            count = len(self.rawBuffer())-(Experimental_Algorithm_Get.MSG_OFFSET + 33)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 33)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Setalgorithm_name(self, value):
        """Null-terminated name of algorithm to get data from."""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(32)
    def Setparameter_name(self, value):
        """Null-terminated name of algo parameter to access"""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), Experimental_Algorithm_Get.MSG_OFFSET + 33, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Null-terminated name of algorithm to get data from.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="parameter_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Null-terminated name of algo parameter to access",get=Getparameter_name,set=Setparameter_name,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.Algorithm.Get", Experimental_Algorithm_Get.ID, Experimental_Algorithm_Get)
#    obj/CodeGenerator/Python/Experimental/Algorithm.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_Algorithm_SetGet :
    ID = 78914
    SIZE = 130
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 68), ("Operator", 2)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (68, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_Algorithm_SetGet.MSG_OFFSET + Experimental_Algorithm_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_Algorithm_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_Algorithm_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_Algorithm_SetGet.MSG_OFFSET + Experimental_Algorithm_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_Algorithm_SetGet.ID)
            self.hdr.SetDataLength(Experimental_Algorithm_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.Algorithm.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Getalgorithm_name(self):
        """Null-terminated name of algorithm to write data to."""
        count = 32
        if count > len(self.rawBuffer())-(Experimental_Algorithm_SetGet.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Experimental_Algorithm_SetGet.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(32)
    def Getparameter_name(self):
        """Null-terminated name of algo parameter to access"""
        count = 32
        if count > len(self.rawBuffer())-(Experimental_Algorithm_SetGet.MSG_OFFSET + 33):
            count = len(self.rawBuffer())-(Experimental_Algorithm_SetGet.MSG_OFFSET + 33)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 33)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('64')
    @msg.offset('65')
    @msg.size('1')
    @msg.count(1)
    def Getbytecnt(self):
        """how many bytes to write"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 65)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('66')
    @msg.size('1')
    @msg.count(64)
    def Getdata(self, idx):
        """data - meaning depends on target parameter."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 66+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Setalgorithm_name(self, value):
        """Null-terminated name of algorithm to write data to."""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(32)
    def Setparameter_name(self, value):
        """Null-terminated name of algo parameter to access"""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 33, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('64')
    @msg.offset('65')
    @msg.size('1')
    @msg.count(1)
    def Setbytecnt(self, value):
        """how many bytes to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 65, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('66')
    @msg.size('1')
    @msg.count(64)
    def Setdata(self, value, idx):
        """data - meaning depends on target parameter."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_SetGet.MSG_OFFSET + 66+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Null-terminated name of algorithm to write data to.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="parameter_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Null-terminated name of algo parameter to access",get=Getparameter_name,set=Setparameter_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="bytecnt",type="int",units="",minVal="0",maxVal="64",description="how many bytes to write",get=Getbytecnt,set=Setbytecnt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on target parameter.",get=Getdata,set=Setdata,count=64, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.Algorithm.SetGet", Experimental_Algorithm_SetGet.ID, Experimental_Algorithm_SetGet)
#    obj/CodeGenerator/Python/Experimental/Algorithm.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_Algorithm_Status :
    ID = 78915
    SIZE = 98
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 68), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (68, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_Algorithm_Status.MSG_OFFSET + Experimental_Algorithm_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_Algorithm_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_Algorithm_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_Algorithm_Status.MSG_OFFSET + Experimental_Algorithm_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_Algorithm_Status.ID)
            self.hdr.SetDataLength(Experimental_Algorithm_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.Algorithm.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getperegrine_id(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Getalgorithm_name(self):
        """Null-terminated name of algorithm."""
        count = 32
        if count > len(self.rawBuffer())-(Experimental_Algorithm_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Experimental_Algorithm_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def Getlength(self):
        """Number of bytes in response."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 33)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(64)
    def Getdata(self, idx):
        """data - meaning depends on target parameter."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 34+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setperegrine_id(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def Setalgorithm_name(self, value):
        """Null-terminated name of algorithm."""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def Setlength(self, value):
        """Number of bytes in response."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 33, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(64)
    def Setdata(self, value, idx):
        """data - meaning depends on target parameter."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_Algorithm_Status.MSG_OFFSET + 34+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="peregrine_id",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=Getperegrine_id,set=Setperegrine_id,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Null-terminated name of algorithm.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="length",type="int",units="",minVal="0",maxVal="255",description="Number of bytes in response.",get=Getlength,set=Setlength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on target parameter.",get=Getdata,set=Setdata,count=64, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.Algorithm.Status", Experimental_Algorithm_Status.ID, Experimental_Algorithm_Status)
