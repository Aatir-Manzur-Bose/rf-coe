#    obj/CodeGenerator/Python/Experimental/ActivityRecognition.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/ActivityRecognition.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ActivityRecognition_Status :
    ID = 77939
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ActivityRecognition_Status.MSG_OFFSET + Experimental_ActivityRecognition_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ActivityRecognition_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ActivityRecognition_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ActivityRecognition_Status.MSG_OFFSET + Experimental_ActivityRecognition_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ActivityRecognition_Status.ID)
            self.hdr.SetDataLength(Experimental_ActivityRecognition_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ActivityRecognition.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetContainer(self):
        """Container"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_ActivityRecognition_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStillEnded(self):
        """StillEnded"""
        value = (self.GetContainer() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWalkingEnded(self):
        """WalkingEnded"""
        value = (self.GetContainer() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRunningEnded(self):
        """RunningEnded"""
        value = (self.GetContainer() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBicycleEnded(self):
        """BicycleEnded"""
        value = (self.GetContainer() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVehicleEnded(self):
        """VehicleEnded"""
        value = (self.GetContainer() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetTiltingEnded(self):
        """TiltingEnded"""
        value = (self.GetContainer() >> 5) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedEnded(self):
        """UnusedEnded"""
        value = (self.GetContainer() >> 6) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetStillStarted(self):
        """StillStarted"""
        value = (self.GetContainer() >> 8) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWalkingStarted(self):
        """WalkingStarted"""
        value = (self.GetContainer() >> 9) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRunningStarted(self):
        """RunningStarted"""
        value = (self.GetContainer() >> 10) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBicycleStarted(self):
        """BicycleStarted"""
        value = (self.GetContainer() >> 11) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVehicleStarted(self):
        """VehicleStarted"""
        value = (self.GetContainer() >> 12) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetTiltingStarted(self):
        """TiltingStarted"""
        value = (self.GetContainer() >> 13) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedStarted(self):
        """UnusedStarted"""
        value = (self.GetContainer() >> 14) & 0x3
        return value
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetTimestamp(self):
        """Validity time of data, in milliseconds"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_ActivityRecognition_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetContainer(self, value):
        """Container"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_ActivityRecognition_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStillEnded(self, value):
        """StillEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWalkingEnded(self, value):
        """WalkingEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRunningEnded(self, value):
        """RunningEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBicycleEnded(self, value):
        """BicycleEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVehicleEnded(self, value):
        """VehicleEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetTiltingEnded(self, value):
        """TiltingEnded"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedEnded(self, value):
        """UnusedEnded"""
        tmp = min(max(value, 0), 3)
        self.SetContainer((self.GetContainer() & ~(0x3 << 6)) | ((tmp & 0x3) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetStillStarted(self, value):
        """StillStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 8)) | ((tmp & 0x1) << 8))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWalkingStarted(self, value):
        """WalkingStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 9)) | ((tmp & 0x1) << 9))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRunningStarted(self, value):
        """RunningStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 10)) | ((tmp & 0x1) << 10))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBicycleStarted(self, value):
        """BicycleStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 11)) | ((tmp & 0x1) << 11))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVehicleStarted(self, value):
        """VehicleStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 12)) | ((tmp & 0x1) << 12))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetTiltingStarted(self, value):
        """TiltingStarted"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 13)) | ((tmp & 0x1) << 13))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedStarted(self, value):
        """UnusedStarted"""
        tmp = min(max(value, 0), 3)
        self.SetContainer((self.GetContainer() & ~(0x3 << 14)) | ((tmp & 0x3) << 14))
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Validity time of data, in milliseconds"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_ActivityRecognition_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="65535",description="Container",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="StillEnded",type="int",units="",minVal="0",maxVal="1",description="StillEnded",get=GetStillEnded,set=SetStillEnded, enum = []),\
            BitFieldInfo(name="WalkingEnded",type="int",units="",minVal="0",maxVal="1",description="WalkingEnded",get=GetWalkingEnded,set=SetWalkingEnded, enum = []),\
            BitFieldInfo(name="RunningEnded",type="int",units="",minVal="0",maxVal="1",description="RunningEnded",get=GetRunningEnded,set=SetRunningEnded, enum = []),\
            BitFieldInfo(name="BicycleEnded",type="int",units="",minVal="0",maxVal="1",description="BicycleEnded",get=GetBicycleEnded,set=SetBicycleEnded, enum = []),\
            BitFieldInfo(name="VehicleEnded",type="int",units="",minVal="0",maxVal="1",description="VehicleEnded",get=GetVehicleEnded,set=SetVehicleEnded, enum = []),\
            BitFieldInfo(name="TiltingEnded",type="int",units="",minVal="0",maxVal="1",description="TiltingEnded",get=GetTiltingEnded,set=SetTiltingEnded, enum = []),\
            BitFieldInfo(name="UnusedEnded",type="int",units="",minVal="0",maxVal="3",description="UnusedEnded",get=GetUnusedEnded,set=SetUnusedEnded, enum = []),\
            BitFieldInfo(name="StillStarted",type="int",units="",minVal="0",maxVal="1",description="StillStarted",get=GetStillStarted,set=SetStillStarted, enum = []),\
            BitFieldInfo(name="WalkingStarted",type="int",units="",minVal="0",maxVal="1",description="WalkingStarted",get=GetWalkingStarted,set=SetWalkingStarted, enum = []),\
            BitFieldInfo(name="RunningStarted",type="int",units="",minVal="0",maxVal="1",description="RunningStarted",get=GetRunningStarted,set=SetRunningStarted, enum = []),\
            BitFieldInfo(name="BicycleStarted",type="int",units="",minVal="0",maxVal="1",description="BicycleStarted",get=GetBicycleStarted,set=SetBicycleStarted, enum = []),\
            BitFieldInfo(name="VehicleStarted",type="int",units="",minVal="0",maxVal="1",description="VehicleStarted",get=GetVehicleStarted,set=SetVehicleStarted, enum = []),\
            BitFieldInfo(name="TiltingStarted",type="int",units="",minVal="0",maxVal="1",description="TiltingStarted",get=GetTiltingStarted,set=SetTiltingStarted, enum = []),\
            BitFieldInfo(name="UnusedStarted",type="int",units="",minVal="0",maxVal="3",description="UnusedStarted",get=GetUnusedStarted,set=SetUnusedStarted, enum = [])], enum = []),\
        FieldInfo(name="Timestamp",type="int",units="milliseconds",minVal="0",maxVal="65535",description="Validity time of data, in milliseconds",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.ActivityRecognition.Status", Experimental_ActivityRecognition_Status.ID, Experimental_ActivityRecognition_Status)
