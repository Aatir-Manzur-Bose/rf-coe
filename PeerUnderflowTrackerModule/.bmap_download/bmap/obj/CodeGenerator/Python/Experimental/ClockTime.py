#    obj/CodeGenerator/Python/Experimental/ClockTime.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/ClockTime.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ClockTime_Set :
    ID = 78544
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 45), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (45, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ClockTime_Set.MSG_OFFSET + Experimental_ClockTime_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ClockTime_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ClockTime_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ClockTime_Set.MSG_OFFSET + Experimental_ClockTime_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ClockTime_Set.ID)
            self.hdr.SetDataLength(Experimental_ClockTime_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ClockTime.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetweekDay(self):
        """1 - 7 for Mon - Sun"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Getmonth(self):
        """1 - 12 for Jan - Dec"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Getdate(self):
        """1 - 31 for day of month"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Getyear(self):
        """00 - 99 for 2018 - 2117"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Gethour(self):
        """0 - 23 for 12am - 11pm"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Getminute(self):
        """0 - 59"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def Getsecond(self):
        """0 - 59"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetweekDay(self, value):
        """1 - 7 for Mon - Sun"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Setmonth(self, value):
        """1 - 12 for Jan - Dec"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Setdate(self, value):
        """1 - 31 for day of month"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Setyear(self, value):
        """00 - 99 for 2018 - 2117"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Sethour(self, value):
        """0 - 23 for 12am - 11pm"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Setminute(self, value):
        """0 - 59"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def Setsecond(self, value):
        """0 - 59"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Set.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="weekDay",type="int",units="",minVal="0",maxVal="255",description="1 - 7 for Mon - Sun",get=GetweekDay,set=SetweekDay,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="month",type="int",units="",minVal="0",maxVal="255",description="1 - 12 for Jan - Dec",get=Getmonth,set=Setmonth,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="date",type="int",units="",minVal="0",maxVal="255",description="1 - 31 for day of month",get=Getdate,set=Setdate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="year",type="int",units="",minVal="0",maxVal="255",description="00 - 99 for 2018 - 2117",get=Getyear,set=Setyear,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="hour",type="int",units="",minVal="0",maxVal="255",description="0 - 23 for 12am - 11pm",get=Gethour,set=Sethour,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="minute",type="int",units="",minVal="0",maxVal="255",description="0 - 59",get=Getminute,set=Setminute,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="second",type="int",units="",minVal="0",maxVal="255",description="0 - 59",get=Getsecond,set=Setsecond,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.ClockTime.Set", Experimental_ClockTime_Set.ID, Experimental_ClockTime_Set)
#    obj/CodeGenerator/Python/Experimental/ClockTime.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/ClockTime.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ClockTime_Get :
    ID = 78545
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 45), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (45, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ClockTime_Get.MSG_OFFSET + Experimental_ClockTime_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ClockTime_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ClockTime_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ClockTime_Get.MSG_OFFSET + Experimental_ClockTime_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ClockTime_Get.ID)
            self.hdr.SetDataLength(Experimental_ClockTime_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ClockTime.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.ClockTime.Get", Experimental_ClockTime_Get.ID, Experimental_ClockTime_Get)
#    obj/CodeGenerator/Python/Experimental/ClockTime.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/ClockTime.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ClockTime_Status :
    ID = 78547
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 45), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (45, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ClockTime_Status.MSG_OFFSET + Experimental_ClockTime_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ClockTime_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ClockTime_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ClockTime_Status.MSG_OFFSET + Experimental_ClockTime_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ClockTime_Status.ID)
            self.hdr.SetDataLength(Experimental_ClockTime_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ClockTime.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetweekDay(self):
        """1 - 7 for Mon - Sun"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Getmonth(self):
        """1 - 12 for Jan - Dec"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Getdate(self):
        """1 - 31 for day of month"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Getyear(self):
        """00 - 99 for 2018 - 2117"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Gethour(self):
        """0 - 23 for 12am - 11pm"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Getminute(self):
        """0 - 59"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def Getsecond(self):
        """0 - 59"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetweekDay(self, value):
        """1 - 7 for Mon - Sun"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def Setmonth(self, value):
        """1 - 12 for Jan - Dec"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Setdate(self, value):
        """1 - 31 for day of month"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def Setyear(self, value):
        """00 - 99 for 2018 - 2117"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Sethour(self, value):
        """0 - 23 for 12am - 11pm"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Setminute(self, value):
        """0 - 59"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def Setsecond(self, value):
        """0 - 59"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ClockTime_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="weekDay",type="int",units="",minVal="0",maxVal="255",description="1 - 7 for Mon - Sun",get=GetweekDay,set=SetweekDay,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="month",type="int",units="",minVal="0",maxVal="255",description="1 - 12 for Jan - Dec",get=Getmonth,set=Setmonth,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="date",type="int",units="",minVal="0",maxVal="255",description="1 - 31 for day of month",get=Getdate,set=Setdate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="year",type="int",units="",minVal="0",maxVal="255",description="00 - 99 for 2018 - 2117",get=Getyear,set=Setyear,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="hour",type="int",units="",minVal="0",maxVal="255",description="0 - 23 for 12am - 11pm",get=Gethour,set=Sethour,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="minute",type="int",units="",minVal="0",maxVal="255",description="0 - 59",get=Getminute,set=Setminute,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="second",type="int",units="",minVal="0",maxVal="255",description="0 - 59",get=Getsecond,set=Setsecond,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.ClockTime.Status", Experimental_ClockTime_Status.ID, Experimental_ClockTime_Status)
