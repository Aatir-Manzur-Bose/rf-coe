#    obj/CodeGenerator/Python/Experimental/AweStats.py
#    Created 27/07/2023 at 10:10:29 from:
#        Messages = messages/Experimental/AweStats.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AweStats_Status :
    ID = 78099
    SIZE = 22
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AweStats_Status.MSG_OFFSET + Experimental_AweStats_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AweStats_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AweStats_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AweStats_Status.MSG_OFFSET + Experimental_AweStats_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AweStats_Status.ID)
            self.hdr.SetDataLength(Experimental_AweStats_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AweStats.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetTaskWakes(self):
        """TaskWakes"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetFwPumped(self):
        """FwPumped"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetProcessings(self):
        """Processings"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetOverrun1(self):
        """Overrun1"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetOverrun2(self):
        """Overrun2"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def GetInstantaneousCpu(self):
        """InstantaneousCpu"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def GetPeakCpu(self):
        """PeakCpu"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetAverageCpu(self):
        """AverageCpu"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetTaskWakes(self, value):
        """TaskWakes"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetFwPumped(self, value):
        """FwPumped"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetProcessings(self, value):
        """Processings"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetOverrun1(self, value):
        """Overrun1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetOverrun2(self, value):
        """Overrun2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('10')
    @msg.size('4')
    @msg.count(1)
    def SetInstantaneousCpu(self, value):
        """InstantaneousCpu"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('14')
    @msg.size('4')
    @msg.count(1)
    def SetPeakCpu(self, value):
        """PeakCpu"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetAverageCpu(self, value):
        """AverageCpu"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_AweStats_Status.MSG_OFFSET + 18, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TaskWakes",type="int",units="",minVal="0",maxVal="65535",description="TaskWakes",get=GetTaskWakes,set=SetTaskWakes,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FwPumped",type="int",units="",minVal="0",maxVal="65535",description="FwPumped",get=GetFwPumped,set=SetFwPumped,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Processings",type="int",units="",minVal="0",maxVal="65535",description="Processings",get=GetProcessings,set=SetProcessings,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Overrun1",type="int",units="",minVal="0",maxVal="65535",description="Overrun1",get=GetOverrun1,set=SetOverrun1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Overrun2",type="int",units="",minVal="0",maxVal="65535",description="Overrun2",get=GetOverrun2,set=SetOverrun2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="InstantaneousCpu",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="InstantaneousCpu",get=GetInstantaneousCpu,set=SetInstantaneousCpu,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PeakCpu",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="PeakCpu",get=GetPeakCpu,set=SetPeakCpu,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AverageCpu",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="AverageCpu",get=GetAverageCpu,set=SetAverageCpu,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AweStats.Status", Experimental_AweStats_Status.ID, Experimental_AweStats_Status)
