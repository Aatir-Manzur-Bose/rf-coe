#    obj/CodeGenerator/Python/Experimental/CapTouchTouches.py
#    Created 27/07/2023 at 10:10:32 from:
#        Messages = messages/Experimental/CapTouchTouches.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchTouches_Status :
    ID = 78179
    SIZE = 42
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 22), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (22, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchTouches_Status.MSG_OFFSET + Experimental_CapTouchTouches_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchTouches_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchTouches_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchTouches_Status.MSG_OFFSET + Experimental_CapTouchTouches_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchTouches_Status.ID)
            self.hdr.SetDataLength(Experimental_CapTouchTouches_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchTouches.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSystemInfo0(self):
        """System Info 0 register"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSystemInfo1(self):
        """System Info 1 register"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTpMovement(self):
        """Activity or movement on trackpad status"""
        value = (self.GetSystemInfo1() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetPalmDetect(self):
        """Palm detect status"""
        value = (self.GetSystemInfo1() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTooManyFingers(self):
        """Total finger status"""
        value = (self.GetSystemInfo1() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetNumberOfFingers(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetRelativeX(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def GetRelativeY(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('7')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteX1(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('9')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteY1(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('11')
    @msg.size('2')
    @msg.count(1)
    def GetTouchStrength1(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetTouchArea1(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteX2(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteY2(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetTouchStrength2(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def GetTouchArea2(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('21')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteX3(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 21)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('23')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteY3(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 23)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('25')
    @msg.size('2')
    @msg.count(1)
    def GetTouchStrength3(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 25)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('27')
    @msg.size('1')
    @msg.count(1)
    def GetTouchArea3(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 27)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('28')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteX4(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('30')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteY4(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 30)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('32')
    @msg.size('2')
    @msg.count(1)
    def GetTouchStrength4(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 32)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def GetTouchArea4(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 34)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('35')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteX5(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 35)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('37')
    @msg.size('2')
    @msg.count(1)
    def GetAbsoluteY5(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 37)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('39')
    @msg.size('2')
    @msg.count(1)
    def GetTouchStrength5(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 39)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('41')
    @msg.size('1')
    @msg.count(1)
    def GetTouchArea5(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 41)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSystemInfo0(self, value):
        """System Info 0 register"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSystemInfo1(self, value):
        """System Info 1 register"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTpMovement(self, value):
        """Activity or movement on trackpad status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetPalmDetect(self, value):
        """Palm detect status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTooManyFingers(self, value):
        """Total finger status"""
        tmp = min(max(value, 0), 1)
        self.SetSystemInfo1((self.GetSystemInfo1() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetNumberOfFingers(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetRelativeX(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def SetRelativeY(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('7')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteX1(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('9')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteY1(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('11')
    @msg.size('2')
    @msg.count(1)
    def SetTouchStrength1(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetTouchArea1(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteX2(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteY2(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetTouchStrength2(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('20')
    @msg.size('1')
    @msg.count(1)
    def SetTouchArea2(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('21')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteX3(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 21, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('23')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteY3(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 23, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('25')
    @msg.size('2')
    @msg.count(1)
    def SetTouchStrength3(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 25, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('27')
    @msg.size('1')
    @msg.count(1)
    def SetTouchArea3(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 27, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('28')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteX4(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 28, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('30')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteY4(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 30, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('32')
    @msg.size('2')
    @msg.count(1)
    def SetTouchStrength4(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def SetTouchArea4(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 34, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('35')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteX5(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 35, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('37')
    @msg.size('2')
    @msg.count(1)
    def SetAbsoluteY5(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 37, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('39')
    @msg.size('2')
    @msg.count(1)
    def SetTouchStrength5(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 39, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('41')
    @msg.size('1')
    @msg.count(1)
    def SetTouchArea5(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchTouches_Status.MSG_OFFSET + 41, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SystemInfo0",type="int",units="",minVal="0",maxVal="255",description="System Info 0 register",get=GetSystemInfo0,set=SetSystemInfo0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SystemInfo1",type="int",units="",minVal="0",maxVal="255",description="System Info 1 register",get=GetSystemInfo1,set=SetSystemInfo1,count=1, bitfieldInfo = [\
            BitFieldInfo(name="TpMovement",type="int",units="Boolean",minVal="0",maxVal="1",description="Activity or movement on trackpad status",get=GetTpMovement,set=SetTpMovement, enum = []),\
            BitFieldInfo(name="PalmDetect",type="int",units="Boolean",minVal="0",maxVal="1",description="Palm detect status",get=GetPalmDetect,set=SetPalmDetect, enum = []),\
            BitFieldInfo(name="TooManyFingers",type="int",units="Boolean",minVal="0",maxVal="1",description="Total finger status",get=GetTooManyFingers,set=SetTooManyFingers, enum = [])], enum = []),\
        FieldInfo(name="NumberOfFingers",type="int",units="",minVal="0",maxVal="255",description="",get=GetNumberOfFingers,set=SetNumberOfFingers,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RelativeX",type="int",units="",minVal="0",maxVal="65535",description="",get=GetRelativeX,set=SetRelativeX,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RelativeY",type="int",units="",minVal="0",maxVal="65535",description="",get=GetRelativeY,set=SetRelativeY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteX1",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteX1,set=SetAbsoluteX1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteY1",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteY1,set=SetAbsoluteY1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStrength1",type="int",units="",minVal="0",maxVal="65535",description="",get=GetTouchStrength1,set=SetTouchStrength1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchArea1",type="int",units="",minVal="0",maxVal="255",description="",get=GetTouchArea1,set=SetTouchArea1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteX2",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteX2,set=SetAbsoluteX2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteY2",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteY2,set=SetAbsoluteY2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStrength2",type="int",units="",minVal="0",maxVal="65535",description="",get=GetTouchStrength2,set=SetTouchStrength2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchArea2",type="int",units="",minVal="0",maxVal="255",description="",get=GetTouchArea2,set=SetTouchArea2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteX3",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteX3,set=SetAbsoluteX3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteY3",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteY3,set=SetAbsoluteY3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStrength3",type="int",units="",minVal="0",maxVal="65535",description="",get=GetTouchStrength3,set=SetTouchStrength3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchArea3",type="int",units="",minVal="0",maxVal="255",description="",get=GetTouchArea3,set=SetTouchArea3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteX4",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteX4,set=SetAbsoluteX4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteY4",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteY4,set=SetAbsoluteY4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStrength4",type="int",units="",minVal="0",maxVal="65535",description="",get=GetTouchStrength4,set=SetTouchStrength4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchArea4",type="int",units="",minVal="0",maxVal="255",description="",get=GetTouchArea4,set=SetTouchArea4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteX5",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteX5,set=SetAbsoluteX5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AbsoluteY5",type="int",units="",minVal="0",maxVal="65535",description="",get=GetAbsoluteY5,set=SetAbsoluteY5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchStrength5",type="int",units="",minVal="0",maxVal="65535",description="",get=GetTouchStrength5,set=SetTouchStrength5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TouchArea5",type="int",units="",minVal="0",maxVal="255",description="",get=GetTouchArea5,set=SetTouchArea5,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.CapTouchTouches.Status", Experimental_CapTouchTouches_Status.ID, Experimental_CapTouchTouches_Status)
