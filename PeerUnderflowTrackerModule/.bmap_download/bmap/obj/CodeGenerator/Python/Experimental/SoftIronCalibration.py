#    obj/CodeGenerator/Python/Experimental/SoftIronCalibration.py
#    Created 27/07/2023 at 10:10:40 from:
#        Messages = messages/Experimental/SoftIronCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_SoftIronCalibration_Set :
    ID = 78480
    SIZE = 36
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 41), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (41, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Set.MSG_OFFSET + Experimental_SoftIronCalibration_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_SoftIronCalibration_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_SoftIronCalibration_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Set.MSG_OFFSET + Experimental_SoftIronCalibration_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_SoftIronCalibration_Set.ID)
            self.hdr.SetDataLength(Experimental_SoftIronCalibration_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.SoftIronCalibration.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(9)
    def GetMatrix(self, idx):
        """"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_SoftIronCalibration_Set.MSG_OFFSET + 0+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(9)
    def SetMatrix(self, value, idx):
        """"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_SoftIronCalibration_Set.MSG_OFFSET + 0+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Matrix",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="",get=GetMatrix,set=SetMatrix,count=9, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.SoftIronCalibration.Set", Experimental_SoftIronCalibration_Set.ID, Experimental_SoftIronCalibration_Set)
#    obj/CodeGenerator/Python/Experimental/SoftIronCalibration.py
#    Created 27/07/2023 at 10:10:40 from:
#        Messages = messages/Experimental/SoftIronCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_SoftIronCalibration_Get :
    ID = 78481
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 41), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (41, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Get.MSG_OFFSET + Experimental_SoftIronCalibration_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_SoftIronCalibration_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_SoftIronCalibration_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Get.MSG_OFFSET + Experimental_SoftIronCalibration_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_SoftIronCalibration_Get.ID)
            self.hdr.SetDataLength(Experimental_SoftIronCalibration_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.SoftIronCalibration.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.SoftIronCalibration.Get", Experimental_SoftIronCalibration_Get.ID, Experimental_SoftIronCalibration_Get)
#    obj/CodeGenerator/Python/Experimental/SoftIronCalibration.py
#    Created 27/07/2023 at 10:10:40 from:
#        Messages = messages/Experimental/SoftIronCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_SoftIronCalibration_Status :
    ID = 78483
    SIZE = 36
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 41), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (41, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Status.MSG_OFFSET + Experimental_SoftIronCalibration_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_SoftIronCalibration_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_SoftIronCalibration_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_SoftIronCalibration_Status.MSG_OFFSET + Experimental_SoftIronCalibration_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_SoftIronCalibration_Status.ID)
            self.hdr.SetDataLength(Experimental_SoftIronCalibration_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.SoftIronCalibration.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(9)
    def GetMatrix(self, idx):
        """"""
        value = struct.unpack_from('>f', self.rawBuffer(), Experimental_SoftIronCalibration_Status.MSG_OFFSET + 0+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(9)
    def SetMatrix(self, value, idx):
        """"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), Experimental_SoftIronCalibration_Status.MSG_OFFSET + 0+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Matrix",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="",get=GetMatrix,set=SetMatrix,count=9, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.SoftIronCalibration.Status", Experimental_SoftIronCalibration_Status.ID, Experimental_SoftIronCalibration_Status)
