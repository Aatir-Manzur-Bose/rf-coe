#    obj/CodeGenerator/Python/Experimental/AweData.py
#    Created 27/07/2023 at 10:10:29 from:
#        Messages = messages/Experimental/AweData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AweData_Status :
    ID = 78083
    SIZE = 64
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AweData_Status.MSG_OFFSET + Experimental_AweData_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AweData_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AweData_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AweData_Status.MSG_OFFSET + Experimental_AweData_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AweData_Status.ID)
            self.hdr.SetDataLength(Experimental_AweData_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AweData.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(64)
    def GetBuffer(self, idx):
        """The audio weaver data."""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AweData_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(64)
    def SetBuffer(self, value, idx):
        """The audio weaver data."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AweData_Status.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Buffer",type="int",units="",minVal="0",maxVal="255",description="The audio weaver data.",get=GetBuffer,set=SetBuffer,count=64, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AweData.Status", Experimental_AweData_Status.ID, Experimental_AweData_Status)
