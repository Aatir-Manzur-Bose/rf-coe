#    obj/CodeGenerator/Python/Experimental/ButtonPress.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/ButtonPress.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ButtonPress_Get :
    ID = 77969
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 9), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (9, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ButtonPress_Get.MSG_OFFSET + Experimental_ButtonPress_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ButtonPress_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ButtonPress_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ButtonPress_Get.MSG_OFFSET + Experimental_ButtonPress_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ButtonPress_Get.ID)
            self.hdr.SetDataLength(Experimental_ButtonPress_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ButtonPress.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getignored(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ButtonPress_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setignored(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ButtonPress_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ignored",type="int",units="",minVal="0",maxVal="255",description="",get=Getignored,set=Setignored,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.ButtonPress.Get", Experimental_ButtonPress_Get.ID, Experimental_ButtonPress_Get)
#    obj/CodeGenerator/Python/Experimental/ButtonPress.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/ButtonPress.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_ButtonPress_Status :
    ID = 77971
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ButtonIDs = OrderedDict([("VolP", 0), ("VolM", 1), ("MFB", 2), ("WVolP", 3), ("WVolM", 4), ("BX", 5), ("Yak1", 6), ("Yak2", 7), ("Yak3", 8), ("Yak4", 9)])
    ReverseButtonIDs = OrderedDict([(0, "VolP"), (1, "VolM"), (2, "MFB"), (3, "WVolP"), (4, "WVolM"), (5, "BX"), (6, "Yak1"), (7, "Yak2"), (8, "Yak3"), (9, "Yak4")])
    ButtonEvents = OrderedDict([("Pressed", 0), ("Released", 1)])
    ReverseButtonEvents = OrderedDict([(0, "Pressed"), (1, "Released")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 9), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (9, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_ButtonPress_Status.MSG_OFFSET + Experimental_ButtonPress_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_ButtonPress_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_ButtonPress_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_ButtonPress_Status.MSG_OFFSET + Experimental_ButtonPress_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_ButtonPress_Status.ID)
            self.hdr.SetDataLength(Experimental_ButtonPress_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.ButtonPress.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetContainer(self):
        """Container"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetButtonID(self, enumAsInt=0):
        """"""
        value = (self.GetContainer() >> 0) & 0x7f
        if not enumAsInt:
            value = Experimental_ButtonPress_Status.ReverseButtonIDs.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetButtonEvent(self, enumAsInt=0):
        """"""
        value = (self.GetContainer() >> 7) & 0x1
        if not enumAsInt:
            value = Experimental_ButtonPress_Status.ReverseButtonEvents.get(value, value)
        return value
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetDuration(self):
        """Amount of time held before release.  Not available for Pressed."""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('3')
    @msg.size('4')
    @msg.count(1)
    def GetMask(self):
        """Bitmask of all key states"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetContainer(self, value):
        """Container"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetButtonID(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_ButtonPress_Status.ButtonIDs.get(value, defaultValue)
        tmp = min(max(value, 0), 127)
        self.SetContainer((self.GetContainer() & ~(0x7f << 0)) | ((tmp & 0x7f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetButtonEvent(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_ButtonPress_Status.ButtonEvents.get(value, defaultValue)
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetDuration(self, value):
        """Amount of time held before release.  Not available for Pressed."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('3')
    @msg.size('4')
    @msg.count(1)
    def SetMask(self, value):
        """Bitmask of all key states"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_ButtonPress_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="255",description="Container",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ButtonID",type="enumeration",units="",minVal="0",maxVal="127",description="",get=GetButtonID,set=SetButtonID, enum = [ButtonIDs, ReverseButtonIDs]),\
            BitFieldInfo(name="ButtonEvent",type="enumeration",units="",minVal="0",maxVal="1",description="",get=GetButtonEvent,set=SetButtonEvent, enum = [ButtonEvents, ReverseButtonEvents])], enum = []),\
        FieldInfo(name="Duration",type="int",units="milliseconds",minVal="0",maxVal="65535",description="Amount of time held before release.  Not available for Pressed.",get=GetDuration,set=SetDuration,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Mask",type="int",units="",minVal="0",maxVal="4294967295",description="Bitmask of all key states",get=GetMask,set=SetMask,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.ButtonPress.Status", Experimental_ButtonPress_Status.ID, Experimental_ButtonPress_Status)
