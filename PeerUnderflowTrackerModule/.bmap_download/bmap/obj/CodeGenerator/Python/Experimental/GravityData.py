#    obj/CodeGenerator/Python/Experimental/GravityData.py
#    Created 27/07/2023 at 10:10:34 from:
#        Messages = messages/Experimental/GravityData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GravityData_Status :
    ID = 78307
    SIZE = 11
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorHubStatus = OrderedDict([("Unreliable", 0), ("Low", 1), ("Medium", 2), ("High", 3)])
    ReverseSensorHubStatus = OrderedDict([(0, "Unreliable"), (1, "Low"), (2, "Medium"), (3, "High")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 30), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (30, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GravityData_Status.MSG_OFFSET + Experimental_GravityData_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GravityData_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GravityData_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GravityData_Status.MSG_OFFSET + Experimental_GravityData_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GravityData_Status.ID)
            self.hdr.SetDataLength(Experimental_GravityData_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GravityData.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetX(self):
        """X axis"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetY(self):
        """Y axis"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetZ(self):
        """Z axis"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self, enumAsInt=0):
        """Status"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Experimental_GravityData_Status.ReverseSensorHubStatus.get(value, value)
        return value
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0.0')
    @msg.maxVal('134217.72796875')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def GetTimestamp(self):
        """Validity time of data, in ticks of 32kHz clock"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 7)[0]
        value = (value * 3.125e-05)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetX(self, value):
        """X axis"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetY(self, value):
        """Y axis"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetZ(self, value):
        """Z axis"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_GravityData_Status.SensorHubStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('seconds')
    @msg.default('')
    @msg.minVal('0.0')
    @msg.maxVal('134217.72796875')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def SetTimestamp(self, value):
        """Validity time of data, in ticks of 32kHz clock"""
        tmp = min(max(int(value / 3.125e-05), 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_GravityData_Status.MSG_OFFSET + 7, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="X",type="int",units="",minVal="-32768",maxVal="32767",description="X axis",get=GetX,set=SetX,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Y",type="int",units="",minVal="-32768",maxVal="32767",description="Y axis",get=GetY,set=SetY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Z",type="int",units="",minVal="-32768",maxVal="32767",description="Z axis",get=GetZ,set=SetZ,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Status",type="enumeration",units="",minVal="0",maxVal="255",description="Status",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [SensorHubStatus, ReverseSensorHubStatus]),\
        FieldInfo(name="Timestamp",type="float",units="seconds",minVal="0.0",maxVal="134217.72796875",description="Validity time of data, in ticks of 32kHz clock",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.GravityData.Status", Experimental_GravityData_Status.ID, Experimental_GravityData_Status)
#    obj/CodeGenerator/Python/Experimental/GravityData.py
#    Created 27/07/2023 at 10:10:34 from:
#        Messages = messages/Experimental/GravityData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GravityData_SetGet :
    ID = 78306
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 30), ("Operator", 2)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (30, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GravityData_SetGet.MSG_OFFSET + Experimental_GravityData_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GravityData_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GravityData_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GravityData_SetGet.MSG_OFFSET + Experimental_GravityData_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GravityData_SetGet.ID)
            self.hdr.SetDataLength(Experimental_GravityData_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GravityData.SetGet"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetRate(self):
        """Report rate"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_GravityData_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetRate(self, value):
        """Report rate"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_GravityData_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Rate",type="int",units="Hz",minVal="-32768",maxVal="32767",description="Report rate",get=GetRate,set=SetRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.GravityData.SetGet", Experimental_GravityData_SetGet.ID, Experimental_GravityData_SetGet)
#    obj/CodeGenerator/Python/Experimental/GravityData.py
#    Created 27/07/2023 at 10:10:34 from:
#        Messages = messages/Experimental/GravityData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GravityData_Result :
    ID = 78310
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 30), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (30, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GravityData_Result.MSG_OFFSET + Experimental_GravityData_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GravityData_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GravityData_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GravityData_Result.MSG_OFFSET + Experimental_GravityData_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GravityData_Result.ID)
            self.hdr.SetDataLength(Experimental_GravityData_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GravityData.Result"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetRate(self):
        """Report rate"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_GravityData_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetRate(self, value):
        """Report rate"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_GravityData_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Rate",type="int",units="Hz",minVal="-32768",maxVal="32767",description="Report rate",get=GetRate,set=SetRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.GravityData.Result", Experimental_GravityData_Result.ID, Experimental_GravityData_Result)
