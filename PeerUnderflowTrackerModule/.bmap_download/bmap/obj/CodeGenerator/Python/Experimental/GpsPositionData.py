#    obj/CodeGenerator/Python/Experimental/GpsPositionData.py
#    Created 27/07/2023 at 10:10:34 from:
#        Messages = messages/Experimental/GpsPositionData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GpsPositionData_Status :
    ID = 78563
    SIZE = 32
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 46), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (46, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GpsPositionData_Status.MSG_OFFSET + Experimental_GpsPositionData_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GpsPositionData_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GpsPositionData_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GpsPositionData_Status.MSG_OFFSET + Experimental_GpsPositionData_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GpsPositionData_Status.ID)
            self.hdr.SetDataLength(Experimental_GpsPositionData_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GpsPositionData.Status"
    # Accessors
    @msg.units('degrees')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('0')
    @msg.size('8')
    @msg.count(1)
    def GetLat(self):
        """Latitude associated with a location, in WGS84 refecence frame"""
        value = struct.unpack_from('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('degrees')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('8')
    @msg.size('8')
    @msg.count(1)
    def GetLon(self):
        """Longitude associated with a location, in WGS84 refecence frame"""
        value = struct.unpack_from('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('meters')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('16')
    @msg.size('8')
    @msg.count(1)
    def GetHeight(self):
        """Height above WGS84 ellipsoid"""
        value = struct.unpack_from('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('millimeters')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def GetHAccuracy(self):
        """Horizontal position estimated standard deviation"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('millimeters')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def GetVAccuracy(self):
        """Vertical position estimated standard deviation"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def GetTow(self):
        """GPS Time of Week, relative to the full GPS time"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('degrees')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('0')
    @msg.size('8')
    @msg.count(1)
    def SetLat(self, value):
        """Latitude associated with a location, in WGS84 refecence frame"""
        tmp = value
        struct.pack_into('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('degrees')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('8')
    @msg.size('8')
    @msg.count(1)
    def SetLon(self, value):
        """Longitude associated with a location, in WGS84 refecence frame"""
        tmp = value
        struct.pack_into('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('meters')
    @msg.default('')
    @msg.minVal('DBL_MIN')
    @msg.maxVal('DBL_MAX')
    @msg.offset('16')
    @msg.size('8')
    @msg.count(1)
    def SetHeight(self, value):
        """Height above WGS84 ellipsoid"""
        tmp = value
        struct.pack_into('>d', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('millimeters')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def SetHAccuracy(self, value):
        """Horizontal position estimated standard deviation"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 24, tmp)
    
    @msg.units('millimeters')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def SetVAccuracy(self, value):
        """Vertical position estimated standard deviation"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 26, tmp)
    
    @msg.units('milliseconds')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def SetTow(self, value):
        """GPS Time of Week, relative to the full GPS time"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_GpsPositionData_Status.MSG_OFFSET + 28, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Lat",type="float",units="degrees",minVal="DBL_MIN",maxVal="DBL_MAX",description="Latitude associated with a location, in WGS84 refecence frame",get=GetLat,set=SetLat,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Lon",type="float",units="degrees",minVal="DBL_MIN",maxVal="DBL_MAX",description="Longitude associated with a location, in WGS84 refecence frame",get=GetLon,set=SetLon,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Height",type="float",units="meters",minVal="DBL_MIN",maxVal="DBL_MAX",description="Height above WGS84 ellipsoid",get=GetHeight,set=SetHeight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="HAccuracy",type="int",units="millimeters",minVal="0",maxVal="65535",description="Horizontal position estimated standard deviation",get=GetHAccuracy,set=SetHAccuracy,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VAccuracy",type="int",units="millimeters",minVal="0",maxVal="65535",description="Vertical position estimated standard deviation",get=GetVAccuracy,set=SetVAccuracy,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Tow",type="int",units="milliseconds",minVal="0",maxVal="4294967295",description="GPS Time of Week, relative to the full GPS time",get=GetTow,set=SetTow,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.GpsPositionData.Status", Experimental_GpsPositionData_Status.ID, Experimental_GpsPositionData_Status)
