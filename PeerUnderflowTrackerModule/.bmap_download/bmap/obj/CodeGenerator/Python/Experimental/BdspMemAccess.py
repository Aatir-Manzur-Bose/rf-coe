#    obj/CodeGenerator/Python/Experimental/BdspMemAccess.py
#    Created 27/07/2023 at 10:10:29 from:
#        Messages = messages/Experimental/BdspMemAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_BdspMemAccess_Get :
    ID = 78513
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 43), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (43, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Get.MSG_OFFSET + Experimental_BdspMemAccess_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_BdspMemAccess_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_BdspMemAccess_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Get.MSG_OFFSET + Experimental_BdspMemAccess_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_BdspMemAccess_Get.ID)
            self.hdr.SetDataLength(Experimental_BdspMemAccess_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.BdspMemAccess.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Getaddress(self):
        """Address of first int to read"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Getprocessor(self):
        """Processor ID to read data from"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Getcount(self):
        """Number of ints to read"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Setaddress(self, value):
        """Address of first int to read"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Setprocessor(self, value):
        """Processor ID to read data from"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Setcount(self, value):
        """Number of ints to read"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_BdspMemAccess_Get.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="address",type="int",units="",minVal="0",maxVal="4294967295",description="Address of first int to read",get=Getaddress,set=Setaddress,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="processor",type="int",units="",minVal="0",maxVal="255",description="Processor ID to read data from",get=Getprocessor,set=Setprocessor,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="count",type="int",units="",minVal="0",maxVal="12",description="Number of ints to read",get=Getcount,set=Setcount,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.BdspMemAccess.Get", Experimental_BdspMemAccess_Get.ID, Experimental_BdspMemAccess_Get)
#    obj/CodeGenerator/Python/Experimental/BdspMemAccess.py
#    Created 27/07/2023 at 10:10:29 from:
#        Messages = messages/Experimental/BdspMemAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_BdspMemAccess_Set :
    ID = 78512
    SIZE = 54
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 43), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (43, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Set.MSG_OFFSET + Experimental_BdspMemAccess_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_BdspMemAccess_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_BdspMemAccess_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Set.MSG_OFFSET + Experimental_BdspMemAccess_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_BdspMemAccess_Set.ID)
            self.hdr.SetDataLength(Experimental_BdspMemAccess_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.BdspMemAccess.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Getaddress(self):
        """Address of first int to write"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Getprocessor(self):
        """Processor ID to write data to"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Getcount(self):
        """Number of ints to write"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(12)
    def Getwrite_values(self, idx):
        """Values to be written"""
        value = struct.unpack_from('>l', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 6+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Setaddress(self, value):
        """Address of first int to write"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def Setprocessor(self, value):
        """Processor ID to write data to"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def Setcount(self, value):
        """Number of ints to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('6')
    @msg.size('4')
    @msg.count(12)
    def Setwrite_values(self, value, idx):
        """Values to be written"""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Experimental_BdspMemAccess_Set.MSG_OFFSET + 6+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="address",type="int",units="",minVal="0",maxVal="4294967295",description="Address of first int to write",get=Getaddress,set=Setaddress,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="processor",type="int",units="",minVal="0",maxVal="255",description="Processor ID to write data to",get=Getprocessor,set=Setprocessor,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="count",type="int",units="",minVal="0",maxVal="12",description="Number of ints to write",get=Getcount,set=Setcount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="write_values",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Values to be written",get=Getwrite_values,set=Setwrite_values,count=12, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.BdspMemAccess.Set", Experimental_BdspMemAccess_Set.ID, Experimental_BdspMemAccess_Set)
#    obj/CodeGenerator/Python/Experimental/BdspMemAccess.py
#    Created 27/07/2023 at 10:10:29 from:
#        Messages = messages/Experimental/BdspMemAccess.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_BdspMemAccess_Status :
    ID = 78515
    SIZE = 49
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 43), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (43, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Status.MSG_OFFSET + Experimental_BdspMemAccess_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_BdspMemAccess_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_BdspMemAccess_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_BdspMemAccess_Status.MSG_OFFSET + Experimental_BdspMemAccess_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_BdspMemAccess_Status.ID)
            self.hdr.SetDataLength(Experimental_BdspMemAccess_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.BdspMemAccess.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getcount(self):
        """Count of valid return values"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_BdspMemAccess_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(12)
    def Getvalues_read(self, idx):
        """Values returned per get command"""
        value = struct.unpack_from('>l', self.rawBuffer(), Experimental_BdspMemAccess_Status.MSG_OFFSET + 1+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('12')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setcount(self, value):
        """Count of valid return values"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_BdspMemAccess_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-2147483648')
    @msg.maxVal('2147483647')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(12)
    def Setvalues_read(self, value, idx):
        """Values returned per get command"""
        tmp = min(max(value, -2147483648), 2147483647)
        struct.pack_into('>l', self.rawBuffer(), Experimental_BdspMemAccess_Status.MSG_OFFSET + 1+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="count",type="int",units="",minVal="0",maxVal="12",description="Count of valid return values",get=Getcount,set=Setcount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="values_read",type="int",units="",minVal="-2147483648",maxVal="2147483647",description="Values returned per get command",get=Getvalues_read,set=Setvalues_read,count=12, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.BdspMemAccess.Status", Experimental_BdspMemAccess_Status.ID, Experimental_BdspMemAccess_Status)
