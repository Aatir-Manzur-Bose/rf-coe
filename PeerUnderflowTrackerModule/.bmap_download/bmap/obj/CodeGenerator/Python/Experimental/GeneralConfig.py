#    obj/CodeGenerator/Python/Experimental/GeneralConfig.py
#    Created 27/07/2023 at 10:10:33 from:
#        Messages = messages/Experimental/GeneralConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GeneralConfig_Get :
    ID = 78273
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 28), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (28, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GeneralConfig_Get.MSG_OFFSET + Experimental_GeneralConfig_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GeneralConfig_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GeneralConfig_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GeneralConfig_Get.MSG_OFFSET + Experimental_GeneralConfig_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GeneralConfig_Get.ID)
            self.hdr.SetDataLength(Experimental_GeneralConfig_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GeneralConfig.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.GeneralConfig.Get", Experimental_GeneralConfig_Get.ID, Experimental_GeneralConfig_Get)
#    obj/CodeGenerator/Python/Experimental/GeneralConfig.py
#    Created 27/07/2023 at 10:10:33 from:
#        Messages = messages/Experimental/GeneralConfig.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_GeneralConfig_Status :
    ID = 78275
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 28), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (28, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_GeneralConfig_Status.MSG_OFFSET + Experimental_GeneralConfig_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_GeneralConfig_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_GeneralConfig_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_GeneralConfig_Status.MSG_OFFSET + Experimental_GeneralConfig_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_GeneralConfig_Status.ID)
            self.hdr.SetDataLength(Experimental_GeneralConfig_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.GeneralConfig.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetData(self):
        """Data"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_GeneralConfig_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUseHardcodedAcorn(self):
        """"""
        value = (self.GetData() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('2147483647')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused bits"""
        value = (self.GetData() >> 1) & 0x7fffffff
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetData(self, value):
        """Data"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_GeneralConfig_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUseHardcodedAcorn(self, value):
        """"""
        tmp = min(max(value, 0), 1)
        self.SetData((self.GetData() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('2147483647')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused bits"""
        tmp = min(max(value, 0), 2147483647)
        self.SetData((self.GetData() & ~(0x7fffffff << 1)) | ((tmp & 0x7fffffff) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="4294967295",description="Data",get=GetData,set=SetData,count=1, bitfieldInfo = [\
            BitFieldInfo(name="UseHardcodedAcorn",type="int",units="",minVal="0",maxVal="1",description="",get=GetUseHardcodedAcorn,set=SetUseHardcodedAcorn, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="2147483647",description="Unused bits",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Experimental.GeneralConfig.Status", Experimental_GeneralConfig_Status.ID, Experimental_GeneralConfig_Status)
