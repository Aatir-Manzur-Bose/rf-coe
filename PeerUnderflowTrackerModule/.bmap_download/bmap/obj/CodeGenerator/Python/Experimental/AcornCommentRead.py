#    obj/CodeGenerator/Python/Experimental/AcornCommentRead.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCommentRead.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCommentRead_Get :
    ID = 78289
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 29), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (29, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Get.MSG_OFFSET + Experimental_AcornCommentRead_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCommentRead_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCommentRead_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Get.MSG_OFFSET + Experimental_AcornCommentRead_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCommentRead_Get.ID)
            self.hdr.SetDataLength(Experimental_AcornCommentRead_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCommentRead.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCommentRead_Get.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCommentRead_Get.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector])\
    ]

Messaging.Register("Experimental.AcornCommentRead.Get", Experimental_AcornCommentRead_Get.ID, Experimental_AcornCommentRead_Get)
#    obj/CodeGenerator/Python/Experimental/AcornCommentRead.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCommentRead.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCommentRead_Status :
    ID = 78291
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 29), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (29, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Status.MSG_OFFSET + Experimental_AcornCommentRead_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCommentRead_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCommentRead_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Status.MSG_OFFSET + Experimental_AcornCommentRead_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCommentRead_Status.ID)
            self.hdr.SetDataLength(Experimental_AcornCommentRead_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCommentRead.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCommentRead_Status.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetCommentLength(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCommentRead_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCommentRead_Status.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetCommentLength(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCommentRead_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="CommentLength",type="int",units="",minVal="0",maxVal="65535",description="",get=GetCommentLength,set=SetCommentLength,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCommentRead.Status", Experimental_AcornCommentRead_Status.ID, Experimental_AcornCommentRead_Status)
#    obj/CodeGenerator/Python/Experimental/AcornCommentRead.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCommentRead.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCommentRead_Start :
    ID = 78293
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 29), ("Operator", 5)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (29, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Start.MSG_OFFSET + Experimental_AcornCommentRead_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCommentRead_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCommentRead_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Start.MSG_OFFSET + Experimental_AcornCommentRead_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCommentRead_Start.ID)
            self.hdr.SetDataLength(Experimental_AcornCommentRead_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCommentRead.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCommentRead_Start.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCommentRead_Start.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector])\
    ]

Messaging.Register("Experimental.AcornCommentRead.Start", Experimental_AcornCommentRead_Start.ID, Experimental_AcornCommentRead_Start)
#    obj/CodeGenerator/Python/Experimental/AcornCommentRead.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCommentRead.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCommentRead_Processing :
    ID = 78295
    SIZE = 67
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 29), ("Operator", 7)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (29, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Processing.MSG_OFFSET + Experimental_AcornCommentRead_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCommentRead_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCommentRead_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Processing.MSG_OFFSET + Experimental_AcornCommentRead_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCommentRead_Processing.ID)
            self.hdr.SetDataLength(Experimental_AcornCommentRead_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCommentRead.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCommentRead_Processing.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetBufferLength(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(64)
    def GetDataBuffer(self, idx):
        """Comment data"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 3+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCommentRead_Processing.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetBufferLength(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(64)
    def SetDataBuffer(self, value, idx):
        """Comment data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Processing.MSG_OFFSET + 3+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="BufferLength",type="int",units="",minVal="0",maxVal="65535",description="",get=GetBufferLength,set=SetBufferLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DataBuffer",type="int",units="",minVal="0",maxVal="255",description="Comment data",get=GetDataBuffer,set=SetDataBuffer,count=64, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCommentRead.Processing", Experimental_AcornCommentRead_Processing.ID, Experimental_AcornCommentRead_Processing)
#    obj/CodeGenerator/Python/Experimental/AcornCommentRead.py
#    Created 27/07/2023 at 10:10:26 from:
#        Messages = messages/Experimental/AcornCommentRead.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AcornCommentRead_Result :
    ID = 78294
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AcornSelector = OrderedDict([("AcornA", 0), ("AcornB", 1), ("AcornC", 2), ("AcornD", 3), ("AcornAll", 4)])
    ReverseAcornSelector = OrderedDict([(0, "AcornA"), (1, "AcornB"), (2, "AcornC"), (3, "AcornD"), (4, "AcornAll")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 29), ("Operator", 6)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (29, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Result.MSG_OFFSET + Experimental_AcornCommentRead_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AcornCommentRead_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AcornCommentRead_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AcornCommentRead_Result.MSG_OFFSET + Experimental_AcornCommentRead_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AcornCommentRead_Result.ID)
            self.hdr.SetDataLength(Experimental_AcornCommentRead_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AcornCommentRead.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAcornTarget(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_AcornCommentRead_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_AcornCommentRead_Result.ReverseAcornSelector.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetBufferLength(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AcornCommentRead_Result.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAcornTarget(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_AcornCommentRead_Result.AcornSelector.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_AcornCommentRead_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetBufferLength(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AcornCommentRead_Result.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AcornTarget",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetAcornTarget,set=SetAcornTarget,count=1, bitfieldInfo = [], enum = [AcornSelector, ReverseAcornSelector]),\
        FieldInfo(name="BufferLength",type="int",units="",minVal="0",maxVal="65535",description="",get=GetBufferLength,set=SetBufferLength,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AcornCommentRead.Result", Experimental_AcornCommentRead_Result.ID, Experimental_AcornCommentRead_Result)
