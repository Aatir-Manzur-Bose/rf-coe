#    obj/CodeGenerator/Python/Experimental/UeLed.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeLed.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeLed_Set :
    ID = 79008
    SIZE = 18
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    UeLedEvent = OrderedDict([("ULE_NOT_AVAILABLE", -2), ("ULE_SINK_STATE_CHANGED", 0), ("ULE_INTERBUDCONN_CONNECT", 1), ("ULE_INTERBUDCONN_DISCONNECT", 2), ("ULE_FAULTSTATE_ENTER", 3), ("ULE_FAULTSTATE_EXIT", 4), ("ULE_PHY_STATE_CHANGED", 5), ("ULE_PEER_PHY_STATE_CHANGED", 6), ("ULE_BATT_SYS_NOTIFICATION", 7), ("ULE_POWER_ON", 8), ("ULE_LID_STATE_CHANGED", 9), ("ULE_CHARGE_STATE_CHANGE", 10), ("ULE_FORCE_SHUT_OFF", 11), ("ULE_WAKE_FROM_SHIPMODE_TIMEOUT", 12), ("ULE_UE_LEDEVT_FORCE_PUPPET_LED_SYNC", 13)])
    ReverseUeLedEvent = OrderedDict([(-2, "ULE_NOT_AVAILABLE"), (0, "ULE_SINK_STATE_CHANGED"), (1, "ULE_INTERBUDCONN_CONNECT"), (2, "ULE_INTERBUDCONN_DISCONNECT"), (3, "ULE_FAULTSTATE_ENTER"), (4, "ULE_FAULTSTATE_EXIT"), (5, "ULE_PHY_STATE_CHANGED"), (6, "ULE_PEER_PHY_STATE_CHANGED"), (7, "ULE_BATT_SYS_NOTIFICATION"), (8, "ULE_POWER_ON"), (9, "ULE_LID_STATE_CHANGED"), (10, "ULE_CHARGE_STATE_CHANGE"), (11, "ULE_FORCE_SHUT_OFF"), (12, "ULE_WAKE_FROM_SHIPMODE_TIMEOUT"), (13, "ULE_UE_LEDEVT_FORCE_PUPPET_LED_SYNC")])
    UeBudPhysicalStatus = OrderedDict([("BPS_NOT_AVAILABLE", -2), ("BPS_IN_CASE", 0), ("BPS_ON_BODY", 1), ("BPS_ON_TABLE", 2), ("BPS_IN_HAND", 3), ("BPS_PRESUMED_TRANSITION", 4), ("BPS_PRESUMED_ON_BODY", 5)])
    ReverseUeBudPhysicalStatus = OrderedDict([(-2, "BPS_NOT_AVAILABLE"), (0, "BPS_IN_CASE"), (1, "BPS_ON_BODY"), (2, "BPS_ON_TABLE"), (3, "BPS_IN_HAND"), (4, "BPS_PRESUMED_TRANSITION"), (5, "BPS_PRESUMED_ON_BODY")])
    UeChargeStatus = OrderedDict([("CS_NOT_AVAILABLE", -2), ("CS_CHARGING", 0), ("CS_DISCHARGING", 1), ("CS_CHARGING_SUSPENDED", 2)])
    ReverseUeChargeStatus = OrderedDict([(-2, "CS_NOT_AVAILABLE"), (0, "CS_CHARGING"), (1, "CS_DISCHARGING"), (2, "CS_CHARGING_SUSPENDED")])
    UeLidStatus = OrderedDict([("LS_NOT_AVAILABLE", -2), ("LS_OPEN", 0), ("LS_CLOSED", 1)])
    ReverseUeLidStatus = OrderedDict([(-2, "LS_NOT_AVAILABLE"), (0, "LS_OPEN"), (1, "LS_CLOSED")])
    UeBudOrientation = OrderedDict([("BO_NOT_AVAILABLE", -2), ("BO_RIGHT", 1), ("BO_LEFT", 2)])
    ReverseUeBudOrientation = OrderedDict([(-2, "BO_NOT_AVAILABLE"), (1, "BO_RIGHT"), (2, "BO_LEFT")])
    UeBatteryStatus = OrderedDict([("BS_NOT_AVAILABLE", -2), ("BS_NEED_TO_CHARGE", 0), ("BS_DONT_NEED_TO_CHARGE", 1), ("BS_BATT_FULL", 2)])
    ReverseUeBatteryStatus = OrderedDict([(-2, "BS_NOT_AVAILABLE"), (0, "BS_NEED_TO_CHARGE"), (1, "BS_DONT_NEED_TO_CHARGE"), (2, "BS_BATT_FULL")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 74), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (74, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeLed_Set.MSG_OFFSET + Experimental_UeLed_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeLed_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeLed_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeLed_Set.MSG_OFFSET + Experimental_UeLed_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeLed_Set.ID)
            self.hdr.SetDataLength(Experimental_UeLed_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeLed.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetUeStatusOld(self):
        """UE state this bud is exiting"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetUeStatusNew(self):
        """UE state this bud is entering"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetUePeerStatusOld(self):
        """UE state peer is exiting"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetUePeerStatusNew(self):
        """UE state peer is entering"""
        value = struct.unpack_from('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetEvent(self, enumAsInt=0):
        """Event that just occurred, which the UE subsystem cares about"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 8)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeLedEvent.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetPhyStatusOld(self, enumAsInt=0):
        """Previous physical location of bud"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetPhyStatusNew(self, enumAsInt=0):
        """Current physical location of bud"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 10)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetPhyStatusPeerOld(self, enumAsInt=0):
        """Previous physical location of peer"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 11)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetPhyStatusPeerNew(self, enumAsInt=0):
        """Current physical location of peer"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 12)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBudPhysicalStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetChargeStatus(self, enumAsInt=0):
        """Charging status"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 13)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeChargeStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def GetLidStatusOld(self, enumAsInt=0):
        """Previous lid status, for products with a charging case"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 14)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeLidStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def GetLidStatusNew(self, enumAsInt=0):
        """Lid status, for products with a charging case"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 15)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeLidStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetBudOrientation(self, enumAsInt=0):
        """Left or right"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 16)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBudOrientation.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetBattStatus(self, enumAsInt=0):
        """Battery statuses which the UE cares about"""
        value = struct.unpack_from('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 17)[0]
        if not enumAsInt:
            value = Experimental_UeLed_Set.ReverseUeBatteryStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetUeStatusOld(self, value):
        """UE state this bud is exiting"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetUeStatusNew(self, value):
        """UE state this bud is entering"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetUePeerStatusOld(self, value):
        """UE state peer is exiting"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetUePeerStatusNew(self, value):
        """UE state peer is entering"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetEvent(self, value):
        """Event that just occurred, which the UE subsystem cares about"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeLedEvent.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetPhyStatusOld(self, value):
        """Previous physical location of bud"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetPhyStatusNew(self, value):
        """Current physical location of bud"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetPhyStatusPeerOld(self, value):
        """Previous physical location of peer"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetPhyStatusPeerNew(self, value):
        """Current physical location of peer"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBudPhysicalStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetChargeStatus(self, value):
        """Charging status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeChargeStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(1)
    def SetLidStatusOld(self, value):
        """Previous lid status, for products with a charging case"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeLidStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('15')
    @msg.size('1')
    @msg.count(1)
    def SetLidStatusNew(self, value):
        """Lid status, for products with a charging case"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeLidStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 15, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetBudOrientation(self, value):
        """Left or right"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBudOrientation.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetBattStatus(self, value):
        """Battery statuses which the UE cares about"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_UeLed_Set.UeBatteryStatus.get(value, defaultValue)
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Experimental_UeLed_Set.MSG_OFFSET + 17, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="UeStatusOld",type="int",units="",minVal="-32768",maxVal="32767",description="UE state this bud is exiting",get=GetUeStatusOld,set=SetUeStatusOld,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UeStatusNew",type="int",units="",minVal="-32768",maxVal="32767",description="UE state this bud is entering",get=GetUeStatusNew,set=SetUeStatusNew,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UePeerStatusOld",type="int",units="",minVal="-32768",maxVal="32767",description="UE state peer is exiting",get=GetUePeerStatusOld,set=SetUePeerStatusOld,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UePeerStatusNew",type="int",units="",minVal="-32768",maxVal="32767",description="UE state peer is entering",get=GetUePeerStatusNew,set=SetUePeerStatusNew,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Event",type="enumeration",units="",minVal="-128",maxVal="127",description="Event that just occurred, which the UE subsystem cares about",get=GetEvent,set=SetEvent,count=1, bitfieldInfo = [], enum = [UeLedEvent, ReverseUeLedEvent]),\
        FieldInfo(name="PhyStatusOld",type="enumeration",units="",minVal="-128",maxVal="127",description="Previous physical location of bud",get=GetPhyStatusOld,set=SetPhyStatusOld,count=1, bitfieldInfo = [], enum = [UeBudPhysicalStatus, ReverseUeBudPhysicalStatus]),\
        FieldInfo(name="PhyStatusNew",type="enumeration",units="",minVal="-128",maxVal="127",description="Current physical location of bud",get=GetPhyStatusNew,set=SetPhyStatusNew,count=1, bitfieldInfo = [], enum = [UeBudPhysicalStatus, ReverseUeBudPhysicalStatus]),\
        FieldInfo(name="PhyStatusPeerOld",type="enumeration",units="",minVal="-128",maxVal="127",description="Previous physical location of peer",get=GetPhyStatusPeerOld,set=SetPhyStatusPeerOld,count=1, bitfieldInfo = [], enum = [UeBudPhysicalStatus, ReverseUeBudPhysicalStatus]),\
        FieldInfo(name="PhyStatusPeerNew",type="enumeration",units="",minVal="-128",maxVal="127",description="Current physical location of peer",get=GetPhyStatusPeerNew,set=SetPhyStatusPeerNew,count=1, bitfieldInfo = [], enum = [UeBudPhysicalStatus, ReverseUeBudPhysicalStatus]),\
        FieldInfo(name="ChargeStatus",type="enumeration",units="",minVal="-128",maxVal="127",description="Charging status",get=GetChargeStatus,set=SetChargeStatus,count=1, bitfieldInfo = [], enum = [UeChargeStatus, ReverseUeChargeStatus]),\
        FieldInfo(name="LidStatusOld",type="enumeration",units="",minVal="-128",maxVal="127",description="Previous lid status, for products with a charging case",get=GetLidStatusOld,set=SetLidStatusOld,count=1, bitfieldInfo = [], enum = [UeLidStatus, ReverseUeLidStatus]),\
        FieldInfo(name="LidStatusNew",type="enumeration",units="",minVal="-128",maxVal="127",description="Lid status, for products with a charging case",get=GetLidStatusNew,set=SetLidStatusNew,count=1, bitfieldInfo = [], enum = [UeLidStatus, ReverseUeLidStatus]),\
        FieldInfo(name="BudOrientation",type="enumeration",units="",minVal="-128",maxVal="127",description="Left or right",get=GetBudOrientation,set=SetBudOrientation,count=1, bitfieldInfo = [], enum = [UeBudOrientation, ReverseUeBudOrientation]),\
        FieldInfo(name="BattStatus",type="enumeration",units="",minVal="-128",maxVal="127",description="Battery statuses which the UE cares about",get=GetBattStatus,set=SetBattStatus,count=1, bitfieldInfo = [], enum = [UeBatteryStatus, ReverseUeBatteryStatus])\
    ]

Messaging.Register("Experimental.UeLed.Set", Experimental_UeLed_Set.ID, Experimental_UeLed_Set)
