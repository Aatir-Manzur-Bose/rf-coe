#    obj/CodeGenerator/Python/Experimental/CapTouchActiveReportRate.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/CapTouchActiveReportRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchActiveReportRate_Get :
    ID = 78193
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 23), ("Operator", 1)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (23, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Get.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchActiveReportRate_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchActiveReportRate_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Get.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchActiveReportRate_Get.ID)
            self.hdr.SetDataLength(Experimental_CapTouchActiveReportRate_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchActiveReportRate.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Experimental.CapTouchActiveReportRate.Get", Experimental_CapTouchActiveReportRate_Get.ID, Experimental_CapTouchActiveReportRate_Get)
#    obj/CodeGenerator/Python/Experimental/CapTouchActiveReportRate.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/CapTouchActiveReportRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchActiveReportRate_Set :
    ID = 78192
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 23), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (23, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Set.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchActiveReportRate_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchActiveReportRate_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Set.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchActiveReportRate_Set.ID)
            self.hdr.SetDataLength(Experimental_CapTouchActiveReportRate_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchActiveReportRate.Set"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('100')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetActiveReportRate(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('100')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetActiveReportRate(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Set.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ActiveReportRate",type="int",units="Hz",minVal="0",maxVal="100",description="",get=GetActiveReportRate,set=SetActiveReportRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.CapTouchActiveReportRate.Set", Experimental_CapTouchActiveReportRate_Set.ID, Experimental_CapTouchActiveReportRate_Set)
#    obj/CodeGenerator/Python/Experimental/CapTouchActiveReportRate.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/CapTouchActiveReportRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchActiveReportRate_Status :
    ID = 78195
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 23), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (23, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Status.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchActiveReportRate_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchActiveReportRate_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Status.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchActiveReportRate_Status.ID)
            self.hdr.SetDataLength(Experimental_CapTouchActiveReportRate_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchActiveReportRate.Status"
    # Accessors
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('100')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetActiveReportRate(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Hz')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('100')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetActiveReportRate(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ActiveReportRate",type="int",units="Hz",minVal="0",maxVal="100",description="",get=GetActiveReportRate,set=SetActiveReportRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.CapTouchActiveReportRate.Status", Experimental_CapTouchActiveReportRate_Status.ID, Experimental_CapTouchActiveReportRate_Status)
#    obj/CodeGenerator/Python/Experimental/CapTouchActiveReportRate.py
#    Created 27/07/2023 at 10:10:31 from:
#        Messages = messages/Experimental/CapTouchActiveReportRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_CapTouchActiveReportRate_Error :
    ID = 78196
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 23), ("Operator", 4)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (23, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Error.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_CapTouchActiveReportRate_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_CapTouchActiveReportRate_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_CapTouchActiveReportRate_Error.MSG_OFFSET + Experimental_CapTouchActiveReportRate_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_CapTouchActiveReportRate_Error.ID)
            self.hdr.SetDataLength(Experimental_CapTouchActiveReportRate_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.CapTouchActiveReportRate.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_CapTouchActiveReportRate_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_CapTouchActiveReportRate_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_CapTouchActiveReportRate_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("Experimental.CapTouchActiveReportRate.Error", Experimental_CapTouchActiveReportRate_Error.ID, Experimental_CapTouchActiveReportRate_Error)
