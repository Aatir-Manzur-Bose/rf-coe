#    obj/CodeGenerator/Python/Experimental/LoadSensorHub.py
#    Created 27/07/2023 at 10:10:35 from:
#        Messages = messages/Experimental/LoadSensorHub.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_LoadSensorHub_Set :
    ID = 78432
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FirmwarePatchChoice = OrderedDict([("NoMag", 0), ("BHI160_Shuttle", 1), ("QC3x", 2)])
    ReverseFirmwarePatchChoice = OrderedDict([(0, "NoMag"), (1, "BHI160_Shuttle"), (2, "QC3x")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 38), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (38, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_LoadSensorHub_Set.MSG_OFFSET + Experimental_LoadSensorHub_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_LoadSensorHub_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_LoadSensorHub_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_LoadSensorHub_Set.MSG_OFFSET + Experimental_LoadSensorHub_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_LoadSensorHub_Set.ID)
            self.hdr.SetDataLength(Experimental_LoadSensorHub_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.LoadSensorHub.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFirmwarePatchOption(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_LoadSensorHub_Set.ReverseFirmwarePatchChoice.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFirmwarePatchOption(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_LoadSensorHub_Set.FirmwarePatchChoice.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Set.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FirmwarePatchOption",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetFirmwarePatchOption,set=SetFirmwarePatchOption,count=1, bitfieldInfo = [], enum = [FirmwarePatchChoice, ReverseFirmwarePatchChoice])\
    ]

Messaging.Register("Experimental.LoadSensorHub.Set", Experimental_LoadSensorHub_Set.ID, Experimental_LoadSensorHub_Set)
#    obj/CodeGenerator/Python/Experimental/LoadSensorHub.py
#    Created 27/07/2023 at 10:10:35 from:
#        Messages = messages/Experimental/LoadSensorHub.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_LoadSensorHub_Status :
    ID = 78435
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    FirmwareLoadStatus = OrderedDict([("NotStarted", 0), ("CouldntOpenFile", 1), ("RomVersionReadFailed", 2), ("CrcMismatch", 3), ("FailedValidation", 4), ("ChunkWriteFailed", 5), ("WrongRomVersion", 6), ("LoadedSuccessfully", 7)])
    ReverseFirmwareLoadStatus = OrderedDict([(0, "NotStarted"), (1, "CouldntOpenFile"), (2, "RomVersionReadFailed"), (3, "CrcMismatch"), (4, "FailedValidation"), (5, "ChunkWriteFailed"), (6, "WrongRomVersion"), (7, "LoadedSuccessfully")])
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 38), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (38, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_LoadSensorHub_Status.MSG_OFFSET + Experimental_LoadSensorHub_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_LoadSensorHub_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_LoadSensorHub_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_LoadSensorHub_Status.MSG_OFFSET + Experimental_LoadSensorHub_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_LoadSensorHub_Status.ID)
            self.hdr.SetDataLength(Experimental_LoadSensorHub_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.LoadSensorHub.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Experimental_LoadSensorHub_Status.ReverseFirmwareLoadStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetInterruptStatusTimeoutCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetRegisterWriteFailedCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetTimeoutWaitingForAckCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetFifoReadFailedCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetSensorEnableErrorCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetReadRegisterFailedCount(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Experimental_LoadSensorHub_Status.FirmwareLoadStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetInterruptStatusTimeoutCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetRegisterWriteFailedCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetTimeoutWaitingForAckCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetFifoReadFailedCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetSensorEnableErrorCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetReadRegisterFailedCount(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Experimental_LoadSensorHub_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [FirmwareLoadStatus, ReverseFirmwareLoadStatus]),\
        FieldInfo(name="InterruptStatusTimeoutCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetInterruptStatusTimeoutCount,set=SetInterruptStatusTimeoutCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RegisterWriteFailedCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetRegisterWriteFailedCount,set=SetRegisterWriteFailedCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeoutWaitingForAckCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetTimeoutWaitingForAckCount,set=SetTimeoutWaitingForAckCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FifoReadFailedCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetFifoReadFailedCount,set=SetFifoReadFailedCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorEnableErrorCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetSensorEnableErrorCount,set=SetSensorEnableErrorCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ReadRegisterFailedCount",type="int",units="",minVal="0",maxVal="255",description="",get=GetReadRegisterFailedCount,set=SetReadRegisterFailedCount,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.LoadSensorHub.Status", Experimental_LoadSensorHub_Status.ID, Experimental_LoadSensorHub_Status)
