#    obj/CodeGenerator/Python/Experimental/UeIndicateSinkEvent.py
#    Created 27/07/2023 at 10:10:42 from:
#        Messages = messages/Experimental/UeIndicateSinkEvent.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_UeIndicateSinkEvent_Set :
    ID = 79120
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 81), ("Operator", 0)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (81, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + Experimental_UeIndicateSinkEvent_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_UeIndicateSinkEvent_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_UeIndicateSinkEvent_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + Experimental_UeIndicateSinkEvent_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_UeIndicateSinkEvent_Set.ID)
            self.hdr.SetDataLength(Experimental_UeIndicateSinkEvent_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.UeIndicateSinkEvent.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetSinkEvent(self):
        """The event we want to simulate"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetSinkState(self):
        """The state the sink is in at the time of the event"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetTDLSize(self):
        """The size of the trusted device list"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetNumConnectedDevs(self):
        """The number of connected devices"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetFlags(self):
        """A collection of boolean environmental conditions"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetOutOfBox(self):
        """1 -- Unit has just been unboxed"""
        value = (self.GetFlags() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetTtsEnabled(self):
        """1 -- Text-to-speech is enabled"""
        value = (self.GetFlags() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetCallRejected(self):
        """1 -- The UUT just rejected a call"""
        value = (self.GetFlags() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetActiveCallDetected(self):
        """1 -- The UUT is in an active call"""
        value = (self.GetFlags() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetLastUsedDeviceInLinkLoss(self):
        """1 -- The UUT has lost contact with the source device"""
        value = (self.GetFlags() >> 4) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetMultipointEnabled(self):
        """1 -- Multipoint is enabled"""
        value = (self.GetFlags() >> 5) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetIsEarbud(self):
        """1 -- The device is an earbud"""
        value = (self.GetFlags() >> 6) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetP2PEnabled(self):
        """1 -- Peer-to-peer communication is enabled"""
        value = (self.GetFlags() >> 7) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetSetupByAppComplete(self):
        """1 -- Unit has been set up by Madrid app"""
        value = (self.GetFlags() >> 8) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetLastUsedDeviceConnected(self):
        """1 -- Most recently used HFP device is connected"""
        value = (self.GetFlags() >> 9) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetSystemPoweredOn(self):
        """1 -- Unit system power on"""
        value = (self.GetFlags() >> 10) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetConversationModeEnabled(self):
        """1 -- Unit is in Conversation Mode"""
        value = (self.GetFlags() >> 11) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetSinkEvent(self, value):
        """The event we want to simulate"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetSinkState(self, value):
        """The state the sink is in at the time of the event"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetTDLSize(self, value):
        """The size of the trusted device list"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetNumConnectedDevs(self, value):
        """The number of connected devices"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetFlags(self, value):
        """A collection of boolean environmental conditions"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_UeIndicateSinkEvent_Set.MSG_OFFSET + 8, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetOutOfBox(self, value):
        """1 -- Unit has just been unboxed"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetTtsEnabled(self, value):
        """1 -- Text-to-speech is enabled"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetCallRejected(self, value):
        """1 -- The UUT just rejected a call"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetActiveCallDetected(self, value):
        """1 -- The UUT is in an active call"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetLastUsedDeviceInLinkLoss(self, value):
        """1 -- The UUT has lost contact with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetMultipointEnabled(self, value):
        """1 -- Multipoint is enabled"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetIsEarbud(self, value):
        """1 -- The device is an earbud"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetP2PEnabled(self, value):
        """1 -- Peer-to-peer communication is enabled"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetSetupByAppComplete(self, value):
        """1 -- Unit has been set up by Madrid app"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 8)) | ((tmp & 0x1) << 8))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetLastUsedDeviceConnected(self, value):
        """1 -- Most recently used HFP device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 9)) | ((tmp & 0x1) << 9))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetSystemPoweredOn(self, value):
        """1 -- Unit system power on"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 10)) | ((tmp & 0x1) << 10))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetConversationModeEnabled(self, value):
        """1 -- Unit is in Conversation Mode"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 11)) | ((tmp & 0x1) << 11))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SinkEvent",type="int",units="",minVal="0",maxVal="65535",description="The event we want to simulate",get=GetSinkEvent,set=SetSinkEvent,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SinkState",type="int",units="",minVal="0",maxVal="65535",description="The state the sink is in at the time of the event",get=GetSinkState,set=SetSinkState,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TDLSize",type="int",units="",minVal="0",maxVal="65535",description="The size of the trusted device list",get=GetTDLSize,set=SetTDLSize,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumConnectedDevs",type="int",units="",minVal="0",maxVal="65535",description="The number of connected devices",get=GetNumConnectedDevs,set=SetNumConnectedDevs,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Flags",type="int",units="",minVal="0",maxVal="65535",description="A collection of boolean environmental conditions",get=GetFlags,set=SetFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="OutOfBox",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Unit has just been unboxed",get=GetOutOfBox,set=SetOutOfBox, enum = []),\
            BitFieldInfo(name="TtsEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Text-to-speech is enabled",get=GetTtsEnabled,set=SetTtsEnabled, enum = []),\
            BitFieldInfo(name="CallRejected",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- The UUT just rejected a call",get=GetCallRejected,set=SetCallRejected, enum = []),\
            BitFieldInfo(name="ActiveCallDetected",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- The UUT is in an active call",get=GetActiveCallDetected,set=SetActiveCallDetected, enum = []),\
            BitFieldInfo(name="LastUsedDeviceInLinkLoss",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- The UUT has lost contact with the source device",get=GetLastUsedDeviceInLinkLoss,set=SetLastUsedDeviceInLinkLoss, enum = []),\
            BitFieldInfo(name="MultipointEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Multipoint is enabled",get=GetMultipointEnabled,set=SetMultipointEnabled, enum = []),\
            BitFieldInfo(name="IsEarbud",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- The device is an earbud",get=GetIsEarbud,set=SetIsEarbud, enum = []),\
            BitFieldInfo(name="P2PEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Peer-to-peer communication is enabled",get=GetP2PEnabled,set=SetP2PEnabled, enum = []),\
            BitFieldInfo(name="SetupByAppComplete",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Unit has been set up by Madrid app",get=GetSetupByAppComplete,set=SetSetupByAppComplete, enum = []),\
            BitFieldInfo(name="LastUsedDeviceConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Most recently used HFP device is connected",get=GetLastUsedDeviceConnected,set=SetLastUsedDeviceConnected, enum = []),\
            BitFieldInfo(name="SystemPoweredOn",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Unit system power on",get=GetSystemPoweredOn,set=SetSystemPoweredOn, enum = []),\
            BitFieldInfo(name="ConversationModeEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="1 -- Unit is in Conversation Mode",get=GetConversationModeEnabled,set=SetConversationModeEnabled, enum = [])], enum = [])\
    ]

Messaging.Register("Experimental.UeIndicateSinkEvent.Set", Experimental_UeIndicateSinkEvent_Set.ID, Experimental_UeIndicateSinkEvent_Set)
