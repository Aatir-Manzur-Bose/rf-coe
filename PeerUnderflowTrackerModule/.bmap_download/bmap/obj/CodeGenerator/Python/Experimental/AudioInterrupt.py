#    obj/CodeGenerator/Python/Experimental/AudioInterrupt.py
#    Created 27/07/2023 at 10:10:28 from:
#        Messages = messages/Experimental/AudioInterrupt.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Experimental_AudioInterrupt_Status :
    ID = 78899
    SIZE = 18
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 19), ("Function", 67), ("Operator", 3)])
    ReverseIDs = OrderedDict([(19, "FunctionBlock"), (67, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Experimental_AudioInterrupt_Status.MSG_OFFSET + Experimental_AudioInterrupt_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Experimental_AudioInterrupt_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Experimental_AudioInterrupt_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Experimental_AudioInterrupt_Status.MSG_OFFSET + Experimental_AudioInterrupt_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Experimental_AudioInterrupt_Status.ID)
            self.hdr.SetDataLength(Experimental_AudioInterrupt_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Experimental.AudioInterrupt.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Getin1(self):
        """Input sample ptr, port 1"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def Getout1(self):
        """Output sample ptr, port 1"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def Getin2(self):
        """Input sample ptr, port 2"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def Getout2(self):
        """Output sample ptr, port 2"""
        value = struct.unpack_from('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def Getcount(self):
        """Sample count"""
        value = struct.unpack_from('>H', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def Setin1(self, value):
        """Input sample ptr, port 1"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def Setout1(self, value):
        """Output sample ptr, port 1"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def Setin2(self, value):
        """Input sample ptr, port 2"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def Setout2(self, value):
        """Output sample ptr, port 2"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def Setcount(self, value):
        """Sample count"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Experimental_AudioInterrupt_Status.MSG_OFFSET + 16, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="in1",type="int",units="",minVal="0",maxVal="4294967295",description="Input sample ptr, port 1",get=Getin1,set=Setin1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="out1",type="int",units="",minVal="0",maxVal="4294967295",description="Output sample ptr, port 1",get=Getout1,set=Setout1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="in2",type="int",units="",minVal="0",maxVal="4294967295",description="Input sample ptr, port 2",get=Getin2,set=Setin2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="out2",type="int",units="",minVal="0",maxVal="4294967295",description="Output sample ptr, port 2",get=Getout2,set=Setout2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="count",type="int",units="",minVal="0",maxVal="65535",description="Sample count",get=Getcount,set=Setcount,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Experimental.AudioInterrupt.Status", Experimental_AudioInterrupt_Status.ID, Experimental_AudioInterrupt_Status)
