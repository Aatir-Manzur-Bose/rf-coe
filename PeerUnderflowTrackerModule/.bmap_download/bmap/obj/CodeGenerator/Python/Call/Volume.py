#    obj/CodeGenerator/Python/Call/Volume.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Volume.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Volume_Get :
    ID = 24641
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Volume_Get.MSG_OFFSET + Call_Volume_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Volume_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Volume_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Volume_Get.MSG_OFFSET + Call_Volume_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Volume_Get.ID)
            self.hdr.SetDataLength(Call_Volume_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Volume.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFlags(self):
        """Flags to specify volume request behavior"""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUseMacFlag(self):
        """0 = Don't use MAC address; 1 = Use MAC address"""
        value = (self.GetFlags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source MAC Address"""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_Get.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFlags(self, value):
        """Flags to specify volume request behavior"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUseMacFlag(self, value):
        """0 = Don't use MAC address; 1 = Use MAC address"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source MAC Address"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_Get.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Flags",type="int",units="",minVal="0",maxVal="255",description="Flags to specify volume request behavior",get=GetFlags,set=SetFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="UseMacFlag",type="int",units="",minVal="0",maxVal="1",description="0 = Don't use MAC address; 1 = Use MAC address",get=GetUseMacFlag,set=SetUseMacFlag, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="",minVal="0",maxVal="255",description="Source MAC Address",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Call.Volume.Get", Call_Volume_Get.ID, Call_Volume_Get)
#    obj/CodeGenerator/Python/Call/Volume.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Volume.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Volume_SetGet :
    ID = 24642
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 4), ("Operator", 2)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (4, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Volume_SetGet.MSG_OFFSET + Call_Volume_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Volume_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Volume_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Volume_SetGet.MSG_OFFSET + Call_Volume_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Volume_SetGet.ID)
            self.hdr.SetDataLength(Call_Volume_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Volume.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFlags(self):
        """Flags to specify volume request behavior"""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUseMacFlag(self):
        """0 = Don't use MAC address; 1 = Use MAC address"""
        value = (self.GetFlags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source MAC Address"""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetTargetVolumeStep(self):
        """Target volume step"""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFlags(self, value):
        """Flags to specify volume request behavior"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUseMacFlag(self, value):
        """0 = Don't use MAC address; 1 = Use MAC address"""
        tmp = min(max(value, 0), 1)
        self.SetFlags((self.GetFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source MAC Address"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 1+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetTargetVolumeStep(self, value):
        """Target volume step"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_SetGet.MSG_OFFSET + 7, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Flags",type="int",units="",minVal="0",maxVal="255",description="Flags to specify volume request behavior",get=GetFlags,set=SetFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="UseMacFlag",type="int",units="",minVal="0",maxVal="1",description="0 = Don't use MAC address; 1 = Use MAC address",get=GetUseMacFlag,set=SetUseMacFlag, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="",minVal="0",maxVal="255",description="Source MAC Address",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetVolumeStep",type="int",units="",minVal="0",maxVal="255",description="Target volume step",get=GetTargetVolumeStep,set=SetTargetVolumeStep,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Call.Volume.SetGet", Call_Volume_SetGet.ID, Call_Volume_SetGet)
#    obj/CodeGenerator/Python/Call/Volume.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Volume.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Volume_Status :
    ID = 24643
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Volume_Status.MSG_OFFSET + Call_Volume_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Volume_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Volume_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Volume_Status.MSG_OFFSET + Call_Volume_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Volume_Status.ID)
            self.hdr.SetDataLength(Call_Volume_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Volume.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source MAC Address."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetTargetVolumeStep(self):
        """Target volume step."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Volume_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source MAC Address."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetTargetVolumeStep(self, value):
        """Target volume step."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Volume_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="",minVal="0",maxVal="255",description="Source MAC Address.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TargetVolumeStep",type="int",units="",minVal="0",maxVal="255",description="Target volume step.",get=GetTargetVolumeStep,set=SetTargetVolumeStep,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Call.Volume.Status", Call_Volume_Status.ID, Call_Volume_Status)
