#    obj/CodeGenerator/Python/Call/Control.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Control_Start :
    ID = 24613
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    CallControlValue = OrderedDict([("LastNumberRedial", 1), ("InitiateVoiceCall", 2), ("TransferAudioBackAndForth", 3), ("MuteMicrophone", 4)])
    ReverseCallControlValue = OrderedDict([(1, "LastNumberRedial"), (2, "InitiateVoiceCall"), (3, "TransferAudioBackAndForth"), (4, "MuteMicrophone")])
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 2), ("Operator", 5)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (2, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Control_Start.MSG_OFFSET + Call_Control_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Control_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Control_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Control_Start.MSG_OFFSET + Call_Control_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Control_Start.ID)
            self.hdr.SetDataLength(Call_Control_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Control.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source MAC Address."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Control_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetCallControlValue(self, enumAsInt=0):
        """Call Control Value."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Control_Start.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Call_Control_Start.ReverseCallControlValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source MAC Address."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Control_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetCallControlValue(self, value):
        """Call Control Value."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Call_Control_Start.CallControlValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Control_Start.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="",minVal="0",maxVal="255",description="Source MAC Address.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CallControlValue",type="enumeration",units="",minVal="0",maxVal="255",description="Call Control Value.",get=GetCallControlValue,set=SetCallControlValue,count=1, bitfieldInfo = [], enum = [CallControlValue, ReverseCallControlValue])\
    ]

Messaging.Register("Call.Control.Start", Call_Control_Start.ID, Call_Control_Start)
#    obj/CodeGenerator/Python/Call/Control.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Control_Result :
    ID = 24614
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 2), ("Operator", 6)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (2, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Control_Result.MSG_OFFSET + Call_Control_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Control_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Control_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Control_Result.MSG_OFFSET + Call_Control_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Control_Result.ID)
            self.hdr.SetDataLength(Call_Control_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Control.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Call.Control.Result", Call_Control_Result.ID, Call_Control_Result)
