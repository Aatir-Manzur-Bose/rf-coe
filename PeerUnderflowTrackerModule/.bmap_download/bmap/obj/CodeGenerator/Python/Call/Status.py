#    obj/CodeGenerator/Python/Call/Status.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Status.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Status_Get :
    ID = 24625
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Status_Get.MSG_OFFSET + Call_Status_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Status_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Status_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Status_Get.MSG_OFFSET + Call_Status_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Status_Get.ID)
            self.hdr.SetDataLength(Call_Status_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Status.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Call.Status.Get", Call_Status_Get.ID, Call_Status_Get)
#    obj/CodeGenerator/Python/Call/Status.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/Call/Status.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Call_Status_Status :
    ID = 24627
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    CallStatusValue = OrderedDict([("Connected", 1), ("StreamingA2DP", 2), ("OutgoingCall", 3), ("IncomingCall", 4), ("ActiveCallOnTheProduct", 5), ("ActiveCallOnThePhone", 6), ("ThreeWayCallWaiting", 7), ("ThreeWayCallHolding", 8), ("ThreeWayMultiCall", 9), ("IncomingCallOnHold", 10)])
    ReverseCallStatusValue = OrderedDict([(1, "Connected"), (2, "StreamingA2DP"), (3, "OutgoingCall"), (4, "IncomingCall"), (5, "ActiveCallOnTheProduct"), (6, "ActiveCallOnThePhone"), (7, "ThreeWayCallWaiting"), (8, "ThreeWayCallHolding"), (9, "ThreeWayMultiCall"), (10, "IncomingCallOnHold")])
    IDs = OrderedDict([("FunctionBlock", 6), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(6, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Call_Status_Status.MSG_OFFSET + Call_Status_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Call_Status_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Call_Status_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Call_Status_Status.MSG_OFFSET + Call_Status_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Call_Status_Status.ID)
            self.hdr.SetDataLength(Call_Status_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Call.Status.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source MAC Address."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Status_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('CallStatusValue')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetCallStatusValue(self, enumAsInt=0):
        """Call Status Value."""
        value = struct.unpack_from('B', self.rawBuffer(), Call_Status_Status.MSG_OFFSET + 6)[0]
        if not enumAsInt:
            value = Call_Status_Status.ReverseCallStatusValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source MAC Address."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Status_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('CallStatusValue')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetCallStatusValue(self, value):
        """Call Status Value."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Call_Status_Status.CallStatusValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Call_Status_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="",minVal="0",maxVal="255",description="Source MAC Address.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CallStatusValue",type="enumeration",units="CallStatusValue",minVal="0",maxVal="255",description="Call Status Value.",get=GetCallStatusValue,set=SetCallStatusValue,count=1, bitfieldInfo = [], enum = [CallStatusValue, ReverseCallStatusValue])\
    ]

Messaging.Register("Call.Status.Status", Call_Status_Status.ID, Call_Status_Status)
