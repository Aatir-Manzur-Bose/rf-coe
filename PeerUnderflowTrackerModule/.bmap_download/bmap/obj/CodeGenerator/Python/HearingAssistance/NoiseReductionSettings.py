#    obj/CodeGenerator/Python/HearingAssistance/NoiseReductionSettings.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/NoiseReductionSettings.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_NoiseReductionSettings_Get :
    ID = 49249
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 6), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (6, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_NoiseReductionSettings_Get.MSG_OFFSET + HearingAssistance_NoiseReductionSettings_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_NoiseReductionSettings_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_NoiseReductionSettings_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_NoiseReductionSettings_Get.MSG_OFFSET + HearingAssistance_NoiseReductionSettings_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_NoiseReductionSettings_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_NoiseReductionSettings_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.NoiseReductionSettings.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.NoiseReductionSettings.Get", HearingAssistance_NoiseReductionSettings_Get.ID, HearingAssistance_NoiseReductionSettings_Get)
#    obj/CodeGenerator/Python/HearingAssistance/NoiseReductionSettings.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/NoiseReductionSettings.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_NoiseReductionSettings_Status :
    ID = 49251
    SIZE = 251
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + HearingAssistance_NoiseReductionSettings_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_NoiseReductionSettings_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_NoiseReductionSettings_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + HearingAssistance_NoiseReductionSettings_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_NoiseReductionSettings_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_NoiseReductionSettings_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.NoiseReductionSettings.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStringType(self):
        """String language and encoding"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetLanguage(self):
        """Language (0 == English, 1 == localized to current language, 2 == to be localized)"""
        value = (self.GetStringType() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetEncoding(self):
        """String encoding (0 == Latin-1, ISO 8859-1; 1 == UTF-8, 2 == UTF-16)"""
        value = (self.GetStringType() >> 2) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(250)
    def GetDescription(self, idx):
        """List of null-terminated strings that correspond one-to-one to the noise reduction settings. The final string can leave off the null-terminator."""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStringType(self, value):
        """String language and encoding"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetLanguage(self, value):
        """Language (0 == English, 1 == localized to current language, 2 == to be localized)"""
        tmp = min(max(value, 0), 3)
        self.SetStringType((self.GetStringType() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetEncoding(self, value):
        """String encoding (0 == Latin-1, ISO 8859-1; 1 == UTF-8, 2 == UTF-16)"""
        tmp = min(max(value, 0), 3)
        self.SetStringType((self.GetStringType() & ~(0x3 << 2)) | ((tmp & 0x3) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(250)
    def SetDescription(self, value, idx):
        """List of null-terminated strings that correspond one-to-one to the noise reduction settings. The final string can leave off the null-terminator."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_NoiseReductionSettings_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="StringType",type="int",units="",minVal="0",maxVal="255",description="String language and encoding",get=GetStringType,set=SetStringType,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Language",type="int",units="",minVal="0",maxVal="3",description="Language (0 == English, 1 == localized to current language, 2 == to be localized)",get=GetLanguage,set=SetLanguage, enum = []),\
            BitFieldInfo(name="Encoding",type="int",units="",minVal="0",maxVal="3",description="String encoding (0 == Latin-1, ISO 8859-1; 1 == UTF-8, 2 == UTF-16)",get=GetEncoding,set=SetEncoding, enum = [])], enum = []),\
        FieldInfo(name="Description",type="int",units="",minVal="0",maxVal="255",description="List of null-terminated strings that correspond one-to-one to the noise reduction settings. The final string can leave off the null-terminator.",get=GetDescription,set=SetDescription,count=250, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.NoiseReductionSettings.Status", HearingAssistance_NoiseReductionSettings_Status.ID, HearingAssistance_NoiseReductionSettings_Status)
