#    obj/CodeGenerator/Python/HearingAssistance/WdrcIndividualUpdates.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/WdrcIndividualUpdates.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_WdrcIndividualUpdates_Get :
    ID = 49185
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_WdrcIndividualUpdates_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_WdrcIndividualUpdates_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_WdrcIndividualUpdates_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_WdrcIndividualUpdates_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.WdrcIndividualUpdates.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCount(self):
        """Parameter count"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self):
        """Parameter"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetBand(self):
        """Frequency band"""
        value = (self.GetParam() >> 0) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetId(self):
        """Parameter ID (0 == gain, 1 == compression ratio, 2 == attack time, 3 == release time, 4 == max output power, 5 == expansion ratio, 6 = compression threshold, 7 = expansion threshold)"""
        value = (self.GetParam() >> 4) & 0x7
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetLR(self):
        """Left / Right (0 == left, 1 == right)"""
        value = (self.GetParam() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCount(self, value):
        """Parameter count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Parameter"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetBand(self, value):
        """Frequency band"""
        tmp = min(max(value, 0), 15)
        self.SetParam((self.GetParam() & ~(0xf << 0)) | ((tmp & 0xf) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetId(self, value):
        """Parameter ID (0 == gain, 1 == compression ratio, 2 == attack time, 3 == release time, 4 == max output power, 5 == expansion ratio, 6 = compression threshold, 7 = expansion threshold)"""
        tmp = min(max(value, 0), 7)
        self.SetParam((self.GetParam() & ~(0x7 << 4)) | ((tmp & 0x7) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetLR(self, value):
        """Left / Right (0 == left, 1 == right)"""
        tmp = min(max(value, 0), 1)
        self.SetParam((self.GetParam() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Count",type="int",units="",minVal="0",maxVal="255",description="Parameter count",get=GetCount,set=SetCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="int",units="",minVal="0",maxVal="255",description="Parameter",get=GetParam,set=SetParam,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Band",type="int",units="",minVal="0",maxVal="15",description="Frequency band",get=GetBand,set=SetBand, enum = []),\
            BitFieldInfo(name="Id",type="int",units="",minVal="0",maxVal="7",description="Parameter ID (0 == gain, 1 == compression ratio, 2 == attack time, 3 == release time, 4 == max output power, 5 == expansion ratio, 6 = compression threshold, 7 = expansion threshold)",get=GetId,set=SetId, enum = []),\
            BitFieldInfo(name="LR",type="int",units="",minVal="0",maxVal="1",description="Left / Right (0 == left, 1 == right)",get=GetLR,set=SetLR, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.WdrcIndividualUpdates.Get", HearingAssistance_WdrcIndividualUpdates_Get.ID, HearingAssistance_WdrcIndividualUpdates_Get)
#    obj/CodeGenerator/Python/HearingAssistance/WdrcIndividualUpdates.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/WdrcIndividualUpdates.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_WdrcIndividualUpdates_Set :
    ID = 49184
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 2), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (2, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_WdrcIndividualUpdates_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_WdrcIndividualUpdates_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_WdrcIndividualUpdates_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_WdrcIndividualUpdates_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.WdrcIndividualUpdates.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCount(self):
        """Parameter count"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self):
        """Parameter"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetValue(self):
        """Value"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCount(self, value):
        """Parameter count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Parameter"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetValue(self, value):
        """Value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Set.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Count",type="int",units="",minVal="0",maxVal="255",description="Parameter count",get=GetCount,set=SetCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="int",units="",minVal="0",maxVal="255",description="Parameter",get=GetParam,set=SetParam,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Value",type="int",units="",minVal="0",maxVal="255",description="Value",get=GetValue,set=SetValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.WdrcIndividualUpdates.Set", HearingAssistance_WdrcIndividualUpdates_Set.ID, HearingAssistance_WdrcIndividualUpdates_Set)
#    obj/CodeGenerator/Python/HearingAssistance/WdrcIndividualUpdates.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/WdrcIndividualUpdates.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_WdrcIndividualUpdates_Status :
    ID = 49187
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_WdrcIndividualUpdates_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_WdrcIndividualUpdates_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + HearingAssistance_WdrcIndividualUpdates_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_WdrcIndividualUpdates_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_WdrcIndividualUpdates_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.WdrcIndividualUpdates.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCount(self):
        """Parameter count"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self):
        """Parameter"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetValue(self):
        """Value"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCount(self, value):
        """Parameter count"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Parameter"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetValue(self, value):
        """Value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_WdrcIndividualUpdates_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Count",type="int",units="",minVal="0",maxVal="255",description="Parameter count",get=GetCount,set=SetCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="int",units="",minVal="0",maxVal="255",description="Parameter",get=GetParam,set=SetParam,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Value",type="int",units="",minVal="0",maxVal="255",description="Value",get=GetValue,set=SetValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.WdrcIndividualUpdates.Status", HearingAssistance_WdrcIndividualUpdates_Status.ID, HearingAssistance_WdrcIndividualUpdates_Status)
