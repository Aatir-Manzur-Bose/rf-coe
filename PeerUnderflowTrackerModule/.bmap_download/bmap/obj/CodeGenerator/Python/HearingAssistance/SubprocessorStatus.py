#    obj/CodeGenerator/Python/HearingAssistance/SubprocessorStatus.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/SubprocessorStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_SubprocessorStatus_Get :
    ID = 49377
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 14), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (14, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_SubprocessorStatus_Get.MSG_OFFSET + HearingAssistance_SubprocessorStatus_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_SubprocessorStatus_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_SubprocessorStatus_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_SubprocessorStatus_Get.MSG_OFFSET + HearingAssistance_SubprocessorStatus_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_SubprocessorStatus_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_SubprocessorStatus_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.SubprocessorStatus.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.SubprocessorStatus.Get", HearingAssistance_SubprocessorStatus_Get.ID, HearingAssistance_SubprocessorStatus_Get)
#    obj/CodeGenerator/Python/HearingAssistance/SubprocessorStatus.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/SubprocessorStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_SubprocessorStatus_Status :
    ID = 49379
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SubProcessorStatus = OrderedDict([("Unknown", 0), ("Stopped", 1), ("Updating", 2), ("Running", 3), ("Error", 4)])
    ReverseSubProcessorStatus = OrderedDict([(0, "Unknown"), (1, "Stopped"), (2, "Updating"), (3, "Running"), (4, "Error")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 14), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (14, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + HearingAssistance_SubprocessorStatus_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_SubprocessorStatus_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_SubprocessorStatus_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + HearingAssistance_SubprocessorStatus_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_SubprocessorStatus_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_SubprocessorStatus_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.SubprocessorStatus.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLeftStatus(self, enumAsInt=0):
        """Left status"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_SubprocessorStatus_Status.ReverseSubProcessorStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLeftError(self):
        """Left error value"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetRightStatus(self, enumAsInt=0):
        """Right status"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = HearingAssistance_SubprocessorStatus_Status.ReverseSubProcessorStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetRightError(self):
        """Right error value"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLeftStatus(self, value):
        """Left status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_SubprocessorStatus_Status.SubProcessorStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLeftError(self, value):
        """Left error value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetRightStatus(self, value):
        """Right status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_SubprocessorStatus_Status.SubProcessorStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetRightError(self, value):
        """Right error value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_SubprocessorStatus_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LeftStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Left status",get=GetLeftStatus,set=SetLeftStatus,count=1, bitfieldInfo = [], enum = [SubProcessorStatus, ReverseSubProcessorStatus]),\
        FieldInfo(name="LeftError",type="int",units="",minVal="0",maxVal="255",description="Left error value",get=GetLeftError,set=SetLeftError,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RightStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Right status",get=GetRightStatus,set=SetRightStatus,count=1, bitfieldInfo = [], enum = [SubProcessorStatus, ReverseSubProcessorStatus]),\
        FieldInfo(name="RightError",type="int",units="",minVal="0",maxVal="255",description="Right error value",get=GetRightError,set=SetRightError,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.SubprocessorStatus.Status", HearingAssistance_SubprocessorStatus_Status.ID, HearingAssistance_SubprocessorStatus_Status)
