#    obj/CodeGenerator/Python/HearingAssistance/Limits.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/Limits.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Limits_Get :
    ID = 49361
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 13), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (13, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Limits_Get.MSG_OFFSET + HearingAssistance_Limits_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Limits_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Limits_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Limits_Get.MSG_OFFSET + HearingAssistance_Limits_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Limits_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_Limits_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Limits.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.Limits.Get", HearingAssistance_Limits_Get.ID, HearingAssistance_Limits_Get)
#    obj/CodeGenerator/Python/HearingAssistance/Limits.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/Limits.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Limits_Set :
    ID = 49360
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 13), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (13, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Limits_Set.MSG_OFFSET + HearingAssistance_Limits_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Limits_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Limits_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Limits_Set.MSG_OFFSET + HearingAssistance_Limits_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Limits_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_Limits_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Limits.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessLeft(self):
        """Lower loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessLeft(self):
        """Upper loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessRight(self):
        """Lower loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessRight(self):
        """Lower loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessLeft(self, value):
        """Lower loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessLeft(self, value):
        """Upper loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessRight(self, value):
        """Lower loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessRight(self, value):
        """Lower loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Set.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LowerLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, left channel",get=GetLowerLoudnessLeft,set=SetLowerLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Upper loudness limit, left channel",get=GetUpperLoudnessLeft,set=SetUpperLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LowerLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, right channel",get=GetLowerLoudnessRight,set=SetLowerLoudnessRight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, right channel",get=GetUpperLoudnessRight,set=SetUpperLoudnessRight,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.Limits.Set", HearingAssistance_Limits_Set.ID, HearingAssistance_Limits_Set)
#    obj/CodeGenerator/Python/HearingAssistance/Limits.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/Limits.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Limits_SetGet :
    ID = 49362
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 13), ("Operator", 2)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (13, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Limits_SetGet.MSG_OFFSET + HearingAssistance_Limits_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Limits_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Limits_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Limits_SetGet.MSG_OFFSET + HearingAssistance_Limits_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Limits_SetGet.ID)
            self.hdr.SetDataLength(HearingAssistance_Limits_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Limits.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessLeft(self):
        """Lower loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessLeft(self):
        """Upper loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessRight(self):
        """Lower loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessRight(self):
        """Lower loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessLeft(self, value):
        """Lower loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessLeft(self, value):
        """Upper loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessRight(self, value):
        """Lower loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessRight(self, value):
        """Lower loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_SetGet.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LowerLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, left channel",get=GetLowerLoudnessLeft,set=SetLowerLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Upper loudness limit, left channel",get=GetUpperLoudnessLeft,set=SetUpperLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LowerLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, right channel",get=GetLowerLoudnessRight,set=SetLowerLoudnessRight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Lower loudness limit, right channel",get=GetUpperLoudnessRight,set=SetUpperLoudnessRight,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.Limits.SetGet", HearingAssistance_Limits_SetGet.ID, HearingAssistance_Limits_SetGet)
#    obj/CodeGenerator/Python/HearingAssistance/Limits.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/Limits.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Limits_Status :
    ID = 49363
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 13), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (13, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Limits_Status.MSG_OFFSET + HearingAssistance_Limits_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Limits_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Limits_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Limits_Status.MSG_OFFSET + HearingAssistance_Limits_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Limits_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_Limits_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Limits.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessLeft(self):
        """Current lower loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessLeft(self):
        """Current upper loudness limit, left channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetLowerLoudnessRight(self):
        """Current lower loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetUpperLoudnessRight(self):
        """Current upper loudness limit, right channel"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessLeft(self, value):
        """Current lower loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessLeft(self, value):
        """Current upper loudness limit, left channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetLowerLoudnessRight(self, value):
        """Current lower loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetUpperLoudnessRight(self, value):
        """Current upper loudness limit, right channel"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_Limits_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LowerLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Current lower loudness limit, left channel",get=GetLowerLoudnessLeft,set=SetLowerLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessLeft",type="int",units="",minVal="-128",maxVal="127",description="Current upper loudness limit, left channel",get=GetUpperLoudnessLeft,set=SetUpperLoudnessLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LowerLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Current lower loudness limit, right channel",get=GetLowerLoudnessRight,set=SetLowerLoudnessRight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpperLoudnessRight",type="int",units="",minVal="-128",maxVal="127",description="Current upper loudness limit, right channel",get=GetUpperLoudnessRight,set=SetUpperLoudnessRight,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.Limits.Status", HearingAssistance_Limits_Status.ID, HearingAssistance_Limits_Status)
