#    obj/CodeGenerator/Python/HearingAssistance/PresetManagement.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/PresetManagement.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_PresetManagement_Get :
    ID = 49489
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    PresetGetMode = OrderedDict([("GetBitmask", 0), ("GetValues", 1)])
    ReversePresetGetMode = OrderedDict([(0, "GetBitmask"), (1, "GetValues")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 21), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (21, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Get.MSG_OFFSET + HearingAssistance_PresetManagement_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_PresetManagement_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_PresetManagement_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Get.MSG_OFFSET + HearingAssistance_PresetManagement_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_PresetManagement_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_PresetManagement_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.PresetManagement.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMode(self, enumAsInt=0):
        """Select data to return"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_PresetManagement_Get.ReversePresetGetMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetIndex(self):
        """Preset index (ignored for GetBitmask)"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Get.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMode(self, value):
        """Select data to return"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_PresetManagement_Get.PresetGetMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetIndex(self, value):
        """Preset index (ignored for GetBitmask)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Get.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Mode",type="enumeration",units="",minVal="0",maxVal="255",description="Select data to return",get=GetMode,set=SetMode,count=1, bitfieldInfo = [], enum = [PresetGetMode, ReversePresetGetMode]),\
        FieldInfo(name="Index",type="int",units="",minVal="0",maxVal="255",description="Preset index (ignored for GetBitmask)",get=GetIndex,set=SetIndex,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.PresetManagement.Get", HearingAssistance_PresetManagement_Get.ID, HearingAssistance_PresetManagement_Get)
#    obj/CodeGenerator/Python/HearingAssistance/PresetManagement.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/PresetManagement.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_PresetManagement_Set :
    ID = 49488
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    PresetCommand = OrderedDict([("DeletePreset", 0), ("ApplyPreset", 1), ("StorePreset", 2)])
    ReversePresetCommand = OrderedDict([(0, "DeletePreset"), (1, "ApplyPreset"), (2, "StorePreset")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 21), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (21, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Set.MSG_OFFSET + HearingAssistance_PresetManagement_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_PresetManagement_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_PresetManagement_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Set.MSG_OFFSET + HearingAssistance_PresetManagement_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_PresetManagement_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_PresetManagement_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.PresetManagement.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCommand(self, enumAsInt=0):
        """Command"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_PresetManagement_Set.ReversePresetCommand.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetIndex(self):
        """Preset index"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetData(self):
        """Data"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCommand(self, value):
        """Command"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_PresetManagement_Set.PresetCommand.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetIndex(self, value):
        """Preset index"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetData(self, value):
        """Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Set.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Command",type="enumeration",units="",minVal="0",maxVal="255",description="Command",get=GetCommand,set=SetCommand,count=1, bitfieldInfo = [], enum = [PresetCommand, ReversePresetCommand]),\
        FieldInfo(name="Index",type="int",units="",minVal="0",maxVal="255",description="Preset index",get=GetIndex,set=SetIndex,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data",get=GetData,set=SetData,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.PresetManagement.Set", HearingAssistance_PresetManagement_Set.ID, HearingAssistance_PresetManagement_Set)
#    obj/CodeGenerator/Python/HearingAssistance/PresetManagement.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/PresetManagement.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_PresetManagement_Status :
    ID = 49491
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    PresetCommand = OrderedDict([("DeletePreset", 0), ("ApplyPreset", 1), ("StorePreset", 2)])
    ReversePresetCommand = OrderedDict([(0, "DeletePreset"), (1, "ApplyPreset"), (2, "StorePreset")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 21), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (21, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Status.MSG_OFFSET + HearingAssistance_PresetManagement_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_PresetManagement_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_PresetManagement_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_PresetManagement_Status.MSG_OFFSET + HearingAssistance_PresetManagement_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_PresetManagement_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_PresetManagement_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.PresetManagement.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDataType(self, enumAsInt=0):
        """Data type returned"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_PresetManagement_Status.ReversePresetCommand.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetData(self):
        """Data"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_PresetManagement_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDataType(self, value):
        """Data type returned"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_PresetManagement_Status.PresetCommand.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetData(self, value):
        """Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_PresetManagement_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="DataType",type="enumeration",units="",minVal="0",maxVal="255",description="Data type returned",get=GetDataType,set=SetDataType,count=1, bitfieldInfo = [], enum = [PresetCommand, ReversePresetCommand]),\
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Data",get=GetData,set=SetData,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.PresetManagement.Status", HearingAssistance_PresetManagement_Status.ID, HearingAssistance_PresetManagement_Status)
