#    obj/CodeGenerator/Python/HearingAssistance/MappedSettingsMode.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/MappedSettingsMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_MappedSettingsMode_Get :
    ID = 49393
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 15), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (15, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Get.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_MappedSettingsMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_MappedSettingsMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Get.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_MappedSettingsMode_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_MappedSettingsMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.MappedSettingsMode.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.MappedSettingsMode.Get", HearingAssistance_MappedSettingsMode_Get.ID, HearingAssistance_MappedSettingsMode_Get)
#    obj/CodeGenerator/Python/HearingAssistance/MappedSettingsMode.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/MappedSettingsMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_MappedSettingsMode_Set :
    ID = 49392
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MappedSettingsMode = OrderedDict([("Absolute", 0), ("Offset", 1)])
    ReverseMappedSettingsMode = OrderedDict([(0, "Absolute"), (1, "Offset")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 15), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (15, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_MappedSettingsMode_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_MappedSettingsMode_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_MappedSettingsMode_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_MappedSettingsMode_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.MappedSettingsMode.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMode(self, enumAsInt=0):
        """Current mode"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_MappedSettingsMode_Set.ReverseMappedSettingsMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLROffset(self):
        """Current L/R offset"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMode(self, value):
        """Current mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_MappedSettingsMode_Set.MappedSettingsMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLROffset(self, value):
        """Current L/R offset"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Set.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Mode",type="enumeration",units="",minVal="0",maxVal="255",description="Current mode",get=GetMode,set=SetMode,count=1, bitfieldInfo = [], enum = [MappedSettingsMode, ReverseMappedSettingsMode]),\
        FieldInfo(name="LROffset",type="int",units="",minVal="-128",maxVal="127",description="Current L/R offset",get=GetLROffset,set=SetLROffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.MappedSettingsMode.Set", HearingAssistance_MappedSettingsMode_Set.ID, HearingAssistance_MappedSettingsMode_Set)
#    obj/CodeGenerator/Python/HearingAssistance/MappedSettingsMode.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/MappedSettingsMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_MappedSettingsMode_SetGet :
    ID = 49394
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MappedSettingsMode = OrderedDict([("Absolute", 0), ("Offset", 1)])
    ReverseMappedSettingsMode = OrderedDict([(0, "Absolute"), (1, "Offset")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 15), ("Operator", 2)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (15, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + HearingAssistance_MappedSettingsMode_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_MappedSettingsMode_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_MappedSettingsMode_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + HearingAssistance_MappedSettingsMode_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_MappedSettingsMode_SetGet.ID)
            self.hdr.SetDataLength(HearingAssistance_MappedSettingsMode_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.MappedSettingsMode.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMode(self, enumAsInt=0):
        """Current mode"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_MappedSettingsMode_SetGet.ReverseMappedSettingsMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLROffset(self):
        """Current L/R offset"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMode(self, value):
        """Current mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_MappedSettingsMode_SetGet.MappedSettingsMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLROffset(self, value):
        """Current L/R offset"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Mode",type="enumeration",units="",minVal="0",maxVal="255",description="Current mode",get=GetMode,set=SetMode,count=1, bitfieldInfo = [], enum = [MappedSettingsMode, ReverseMappedSettingsMode]),\
        FieldInfo(name="LROffset",type="int",units="",minVal="-128",maxVal="127",description="Current L/R offset",get=GetLROffset,set=SetLROffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.MappedSettingsMode.SetGet", HearingAssistance_MappedSettingsMode_SetGet.ID, HearingAssistance_MappedSettingsMode_SetGet)
#    obj/CodeGenerator/Python/HearingAssistance/MappedSettingsMode.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/MappedSettingsMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_MappedSettingsMode_Status :
    ID = 49395
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    MappedSettingsMode = OrderedDict([("Absolute", 0), ("Offset", 1)])
    ReverseMappedSettingsMode = OrderedDict([(0, "Absolute"), (1, "Offset")])
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 15), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (15, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_MappedSettingsMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_MappedSettingsMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + HearingAssistance_MappedSettingsMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_MappedSettingsMode_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_MappedSettingsMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.MappedSettingsMode.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMode(self, enumAsInt=0):
        """Current mode"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HearingAssistance_MappedSettingsMode_Status.ReverseMappedSettingsMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLROffset(self):
        """Current L/R offset"""
        value = struct.unpack_from('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMode(self, value):
        """Current mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HearingAssistance_MappedSettingsMode_Status.MappedSettingsMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLROffset(self, value):
        """Current L/R offset"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), HearingAssistance_MappedSettingsMode_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Mode",type="enumeration",units="",minVal="0",maxVal="255",description="Current mode",get=GetMode,set=SetMode,count=1, bitfieldInfo = [], enum = [MappedSettingsMode, ReverseMappedSettingsMode]),\
        FieldInfo(name="LROffset",type="int",units="",minVal="-128",maxVal="127",description="Current L/R offset",get=GetLROffset,set=SetLROffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HearingAssistance.MappedSettingsMode.Status", HearingAssistance_MappedSettingsMode_Status.ID, HearingAssistance_MappedSettingsMode_Status)
