#    obj/CodeGenerator/Python/HearingAssistance/GlobalMute.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/GlobalMute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_GlobalMute_Get :
    ID = 49425
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 17), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (17, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Get.MSG_OFFSET + HearingAssistance_GlobalMute_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_GlobalMute_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_GlobalMute_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Get.MSG_OFFSET + HearingAssistance_GlobalMute_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_GlobalMute_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_GlobalMute_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.GlobalMute.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.GlobalMute.Get", HearingAssistance_GlobalMute_Get.ID, HearingAssistance_GlobalMute_Get)
#    obj/CodeGenerator/Python/HearingAssistance/GlobalMute.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/GlobalMute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_GlobalMute_Set :
    ID = 49424
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 17), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (17, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Set.MSG_OFFSET + HearingAssistance_GlobalMute_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_GlobalMute_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_GlobalMute_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Set.MSG_OFFSET + HearingAssistance_GlobalMute_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_GlobalMute_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_GlobalMute_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.GlobalMute.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_GlobalMute_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAllMute(self):
        """1 == All channels muted"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_GlobalMute_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAllMute(self, value):
        """1 == All channels muted"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 127)
        self.SetStatus((self.GetStatus() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="AllMute",type="int",units="",minVal="0",maxVal="1",description="1 == All channels muted",get=GetAllMute,set=SetAllMute, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="127",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.GlobalMute.Set", HearingAssistance_GlobalMute_Set.ID, HearingAssistance_GlobalMute_Set)
#    obj/CodeGenerator/Python/HearingAssistance/GlobalMute.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/GlobalMute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_GlobalMute_SetGet :
    ID = 49426
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 17), ("Operator", 2)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (17, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_SetGet.MSG_OFFSET + HearingAssistance_GlobalMute_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_GlobalMute_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_GlobalMute_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_SetGet.MSG_OFFSET + HearingAssistance_GlobalMute_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_GlobalMute_SetGet.ID)
            self.hdr.SetDataLength(HearingAssistance_GlobalMute_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.GlobalMute.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_GlobalMute_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAllMute(self):
        """1 == All channels muted"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_GlobalMute_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAllMute(self, value):
        """1 == All channels muted"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 127)
        self.SetStatus((self.GetStatus() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="AllMute",type="int",units="",minVal="0",maxVal="1",description="1 == All channels muted",get=GetAllMute,set=SetAllMute, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="127",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.GlobalMute.SetGet", HearingAssistance_GlobalMute_SetGet.ID, HearingAssistance_GlobalMute_SetGet)
#    obj/CodeGenerator/Python/HearingAssistance/GlobalMute.py
#    Created 27/07/2023 at 10:10:46 from:
#        Messages = messages/HearingAssistance/GlobalMute.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_GlobalMute_Status :
    ID = 49427
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Status.MSG_OFFSET + HearingAssistance_GlobalMute_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_GlobalMute_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_GlobalMute_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_GlobalMute_Status.MSG_OFFSET + HearingAssistance_GlobalMute_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_GlobalMute_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_GlobalMute_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.GlobalMute.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_GlobalMute_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAllMute(self):
        """1 == All channels muted"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_GlobalMute_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAllMute(self, value):
        """1 == All channels muted"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 127)
        self.SetStatus((self.GetStatus() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="AllMute",type="int",units="",minVal="0",maxVal="1",description="1 == All channels muted",get=GetAllMute,set=SetAllMute, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="127",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.GlobalMute.Status", HearingAssistance_GlobalMute_Status.ID, HearingAssistance_GlobalMute_Status)
