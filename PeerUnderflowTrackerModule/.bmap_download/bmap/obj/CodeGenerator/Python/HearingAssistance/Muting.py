#    obj/CodeGenerator/Python/HearingAssistance/Muting.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/Muting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Muting_Get :
    ID = 49329
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Muting_Get.MSG_OFFSET + HearingAssistance_Muting_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Muting_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Muting_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Muting_Get.MSG_OFFSET + HearingAssistance_Muting_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Muting_Get.ID)
            self.hdr.SetDataLength(HearingAssistance_Muting_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Muting.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HearingAssistance.Muting.Get", HearingAssistance_Muting_Get.ID, HearingAssistance_Muting_Get)
#    obj/CodeGenerator/Python/HearingAssistance/Muting.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/Muting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Muting_Set :
    ID = 49328
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 11), ("Operator", 0)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (11, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Muting_Set.MSG_OFFSET + HearingAssistance_Muting_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Muting_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Muting_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Muting_Set.MSG_OFFSET + HearingAssistance_Muting_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Muting_Set.ID)
            self.hdr.SetDataLength(HearingAssistance_Muting_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Muting.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Muting status"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_Muting_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetLeft(self):
        """Left channel (1 == muted)"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRight(self):
        """Right channel (1 == muted)"""
        value = (self.GetStatus() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Muting status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_Muting_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetLeft(self, value):
        """Left channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRight(self, value):
        """Right channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 63)
        self.SetStatus((self.GetStatus() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Muting status",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Left",type="int",units="",minVal="0",maxVal="1",description="Left channel (1 == muted)",get=GetLeft,set=SetLeft, enum = []),\
            BitFieldInfo(name="Right",type="int",units="",minVal="0",maxVal="1",description="Right channel (1 == muted)",get=GetRight,set=SetRight, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="63",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.Muting.Set", HearingAssistance_Muting_Set.ID, HearingAssistance_Muting_Set)
#    obj/CodeGenerator/Python/HearingAssistance/Muting.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/Muting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Muting_SetGet :
    ID = 49330
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 11), ("Operator", 2)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (11, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Muting_SetGet.MSG_OFFSET + HearingAssistance_Muting_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Muting_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Muting_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Muting_SetGet.MSG_OFFSET + HearingAssistance_Muting_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Muting_SetGet.ID)
            self.hdr.SetDataLength(HearingAssistance_Muting_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Muting.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Muting status"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_Muting_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetLeft(self):
        """Left channel (1 == muted)"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRight(self):
        """Right channel (1 == muted)"""
        value = (self.GetStatus() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Muting status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_Muting_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetLeft(self, value):
        """Left channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRight(self, value):
        """Right channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 63)
        self.SetStatus((self.GetStatus() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Muting status",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Left",type="int",units="",minVal="0",maxVal="1",description="Left channel (1 == muted)",get=GetLeft,set=SetLeft, enum = []),\
            BitFieldInfo(name="Right",type="int",units="",minVal="0",maxVal="1",description="Right channel (1 == muted)",get=GetRight,set=SetRight, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="63",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.Muting.SetGet", HearingAssistance_Muting_SetGet.ID, HearingAssistance_Muting_SetGet)
#    obj/CodeGenerator/Python/HearingAssistance/Muting.py
#    Created 27/07/2023 at 10:10:47 from:
#        Messages = messages/HearingAssistance/Muting.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HearingAssistance_Muting_Status :
    ID = 49331
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 12), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(12, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HearingAssistance_Muting_Status.MSG_OFFSET + HearingAssistance_Muting_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HearingAssistance_Muting_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HearingAssistance_Muting_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HearingAssistance_Muting_Status.MSG_OFFSET + HearingAssistance_Muting_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HearingAssistance_Muting_Status.ID)
            self.hdr.SetDataLength(HearingAssistance_Muting_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HearingAssistance.Muting.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Muting status"""
        value = struct.unpack_from('B', self.rawBuffer(), HearingAssistance_Muting_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetLeft(self):
        """Left channel (1 == muted)"""
        value = (self.GetStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRight(self):
        """Right channel (1 == muted)"""
        value = (self.GetStatus() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Unused, set to 0"""
        value = (self.GetStatus() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Muting status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HearingAssistance_Muting_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetLeft(self, value):
        """Left channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRight(self, value):
        """Right channel (1 == muted)"""
        tmp = min(max(value, 0), 1)
        self.SetStatus((self.GetStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Unused, set to 0"""
        tmp = min(max(value, 0), 63)
        self.SetStatus((self.GetStatus() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Muting status",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Left",type="int",units="",minVal="0",maxVal="1",description="Left channel (1 == muted)",get=GetLeft,set=SetLeft, enum = []),\
            BitFieldInfo(name="Right",type="int",units="",minVal="0",maxVal="1",description="Right channel (1 == muted)",get=GetRight,set=SetRight, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="63",description="Unused, set to 0",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("HearingAssistance.Muting.Status", HearingAssistance_Muting_Status.ID, HearingAssistance_Muting_Status)
