#    obj/CodeGenerator/Python/Status/CrashData.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/CrashData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_CrashData_Get :
    ID = 8321
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 8), ("Operator", 1)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (8, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_CrashData_Get.MSG_OFFSET + Status_CrashData_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_CrashData_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_CrashData_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_CrashData_Get.MSG_OFFSET + Status_CrashData_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_CrashData_Get.ID)
            self.hdr.SetDataLength(Status_CrashData_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.CrashData.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRequestType(self):
        """Optional. If not specified, new crash data is returned if available. Set to 0x01 to request currently stored data. New data is returned when Status.GetAll.Start message is sent."""
        value = struct.unpack_from('B', self.rawBuffer(), Status_CrashData_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRequestType(self, value):
        """Optional. If not specified, new crash data is returned if available. Set to 0x01 to request currently stored data. New data is returned when Status.GetAll.Start message is sent."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_CrashData_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="RequestType",type="int",units="",minVal="0",maxVal="255",description="Optional. If not specified, new crash data is returned if available. Set to 0x01 to request currently stored data. New data is returned when Status.GetAll.Start message is sent.",get=GetRequestType,set=SetRequestType,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Status.CrashData.Get", Status_CrashData_Get.ID, Status_CrashData_Get)
#    obj/CodeGenerator/Python/Status/CrashData.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/CrashData.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_CrashData_Status :
    ID = 8323
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_CrashData_Status.MSG_OFFSET + Status_CrashData_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_CrashData_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_CrashData_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_CrashData_Status.MSG_OFFSET + Status_CrashData_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_CrashData_Status.ID)
            self.hdr.SetDataLength(Status_CrashData_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.CrashData.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCrashDataKey(self):
        """0x01 - Basic Info, 0x02 - Stack, 0x03 - Firmware Version Build Number"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetPayloadOrder(self):
        """This value shows the order of the payload which is useful when more than 1 BMAP message are used to deliver a component of crash data."""
        value = struct.unpack_from('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(253)
    def GetCrashData(self, idx):
        """Raw Data"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 2+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCrashDataKey(self, value):
        """0x01 - Basic Info, 0x02 - Stack, 0x03 - Firmware Version Build Number"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetPayloadOrder(self, value):
        """This value shows the order of the payload which is useful when more than 1 BMAP message are used to deliver a component of crash data."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(253)
    def SetCrashData(self, value, idx):
        """Raw Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_CrashData_Status.MSG_OFFSET + 2+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CrashDataKey",type="int",units="",minVal="0",maxVal="255",description="0x01 - Basic Info, 0x02 - Stack, 0x03 - Firmware Version Build Number",get=GetCrashDataKey,set=SetCrashDataKey,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PayloadOrder",type="int",units="",minVal="0",maxVal="255",description="This value shows the order of the payload which is useful when more than 1 BMAP message are used to deliver a component of crash data.",get=GetPayloadOrder,set=SetPayloadOrder,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CrashData",type="int",units="",minVal="0",maxVal="255",description="Raw Data",get=GetCrashData,set=SetCrashData,count=253, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Status.CrashData.Status", Status_CrashData_Status.ID, Status_CrashData_Status)
