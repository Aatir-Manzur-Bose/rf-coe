#    obj/CodeGenerator/Python/Status/NetworkUp.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/NetworkUp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_NetworkUp_Get :
    ID = 8305
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_NetworkUp_Get.MSG_OFFSET + Status_NetworkUp_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_NetworkUp_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_NetworkUp_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_NetworkUp_Get.MSG_OFFSET + Status_NetworkUp_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_NetworkUp_Get.ID)
            self.hdr.SetDataLength(Status_NetworkUp_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.NetworkUp.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Status.NetworkUp.Get", Status_NetworkUp_Get.ID, Status_NetworkUp_Get)
#    obj/CodeGenerator/Python/Status/NetworkUp.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/NetworkUp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_NetworkUp_Status :
    ID = 8307
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    NetworkTypes = OrderedDict([("UNKNOWN", 0), ("WIRED_USB", 1), ("WIRED_ETH", 2), ("WIRELESS", 3), ("WIRELESS_AP", 4)])
    ReverseNetworkTypes = OrderedDict([(0, "UNKNOWN"), (1, "WIRED_USB"), (2, "WIRED_ETH"), (3, "WIRELESS"), (4, "WIRELESS_AP")])
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_NetworkUp_Status.MSG_OFFSET + Status_NetworkUp_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_NetworkUp_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_NetworkUp_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_NetworkUp_Status.MSG_OFFSET + Status_NetworkUp_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_NetworkUp_Status.ID)
            self.hdr.SetDataLength(Status_NetworkUp_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.NetworkUp.Status"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetNetworkUp(self):
        """0-Network is down, 1-Network is up"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_NetworkUp_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetNetworkType(self, enumAsInt=0):
        """The primary type of network that is connected"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_NetworkUp_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Status_NetworkUp_Status.ReverseNetworkTypes.get(value, value)
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetNetworkUp(self, value):
        """0-Network is down, 1-Network is up"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_NetworkUp_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetNetworkType(self, value):
        """The primary type of network that is connected"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Status_NetworkUp_Status.NetworkTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_NetworkUp_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="NetworkUp",type="int",units="Boolean",minVal="0",maxVal="255",description="0-Network is down, 1-Network is up",get=GetNetworkUp,set=SetNetworkUp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NetworkType",type="enumeration",units="",minVal="0",maxVal="255",description="The primary type of network that is connected",get=GetNetworkType,set=SetNetworkType,count=1, bitfieldInfo = [], enum = [NetworkTypes, ReverseNetworkTypes])\
    ]

Messaging.Register("Status.NetworkUp.Status", Status_NetworkUp_Status.ID, Status_NetworkUp_Status)
