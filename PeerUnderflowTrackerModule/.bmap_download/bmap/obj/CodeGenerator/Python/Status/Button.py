#    obj/CodeGenerator/Python/Status/Button.py
#    Created 27/07/2023 at 10:11:16 from:
#        Messages = messages/Status/Button.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_Button_Status :
    ID = 8387
    SIZE = 11
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ButtonEvents = OrderedDict([("Reserved", 0), ("RisingEdge", 1), ("FallingEdge", 2), ("ShortPress", 3), ("SinglePress", 4), ("SinglePressAndHold", 5), ("DoublePress", 6), ("DoublePressAndHold", 7), ("TriplePress", 8), ("LongPress", 9), ("VeryLongPress", 10), ("VeryVeryLongPress", 11), ("VeryVeryVeryLongPress", 12)])
    ReverseButtonEvents = OrderedDict([(0, "Reserved"), (1, "RisingEdge"), (2, "FallingEdge"), (3, "ShortPress"), (4, "SinglePress"), (5, "SinglePressAndHold"), (6, "DoublePress"), (7, "DoublePressAndHold"), (8, "TriplePress"), (9, "LongPress"), (10, "VeryLongPress"), (11, "VeryVeryLongPress"), (12, "VeryVeryVeryLongPress")])
    ButtonConfigFunctions = OrderedDict([("NotConfigured", 0), ("VoicePersonalAssistant", 1), ("ANRMode", 2), ("BatteryLevel", 3), ("PlayPause_AnswerEndCall", 4), ("IncreaseCNC", 5), ("DecreaseCNC", 6), ("ToggleWUW", 7), ("SwitchSourceDevice", 8), ("ConversationMode", 9), ("TrackForward", 10), ("TrackBack", 11), ("FetchNotifications", 12), ("WindMode", 13), ("Disabled", 14), ("ClientInteraction", 15), ("SpotifyGoMode", 16), ("ModesCarousel", 17), ("VolumePresetCarousel", 18), ("SpatialAudioMode", 19)])
    ReverseButtonConfigFunctions = OrderedDict([(0, "NotConfigured"), (1, "VoicePersonalAssistant"), (2, "ANRMode"), (3, "BatteryLevel"), (4, "PlayPause_AnswerEndCall"), (5, "IncreaseCNC"), (6, "DecreaseCNC"), (7, "ToggleWUW"), (8, "SwitchSourceDevice"), (9, "ConversationMode"), (10, "TrackForward"), (11, "TrackBack"), (12, "FetchNotifications"), (13, "WindMode"), (14, "Disabled"), (15, "ClientInteraction"), (16, "SpotifyGoMode"), (17, "ModesCarousel"), (18, "VolumePresetCarousel"), (19, "SpatialAudioMode")])
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 12), ("Operator", 3)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (12, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_Button_Status.MSG_OFFSET + Status_Button_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_Button_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_Button_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_Button_Status.MSG_OFFSET + Status_Button_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_Button_Status.ID)
            self.hdr.SetDataLength(Status_Button_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.Button.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetButtonID(self):
        """Button ID (varies by product, see tables below)"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetButtonEvent(self, enumAsInt=0):
        """Button Event"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Status_Button_Status.ReverseButtonEvents.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguredFunction(self, enumAsInt=0):
        """Configured Function"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = Status_Button_Status.ReverseButtonConfigFunctions.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(4)
    def GetSupportedFunctions(self, idx):
        """Bitfield of Supported Functions"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 3+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(4)
    def GetUnavailableFunctions(self, idx):
        """Optional bitfield of functions that are supported, but currently unavailable. May change at runtime. If no functions are unavailable, this part of the payload is optional."""
        value = struct.unpack_from('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 7+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetButtonID(self, value):
        """Button ID (varies by product, see tables below)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetButtonEvent(self, value):
        """Button Event"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Status_Button_Status.ButtonEvents.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguredFunction(self, value):
        """Configured Function"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Status_Button_Status.ButtonConfigFunctions.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(4)
    def SetSupportedFunctions(self, value, idx):
        """Bitfield of Supported Functions"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 3+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(4)
    def SetUnavailableFunctions(self, value, idx):
        """Optional bitfield of functions that are supported, but currently unavailable. May change at runtime. If no functions are unavailable, this part of the payload is optional."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_Button_Status.MSG_OFFSET + 7+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ButtonID",type="int",units="",minVal="0",maxVal="255",description="Button ID (varies by product, see tables below)",get=GetButtonID,set=SetButtonID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ButtonEvent",type="enumeration",units="",minVal="0",maxVal="255",description="Button Event",get=GetButtonEvent,set=SetButtonEvent,count=1, bitfieldInfo = [], enum = [ButtonEvents, ReverseButtonEvents]),\
        FieldInfo(name="ConfiguredFunction",type="enumeration",units="",minVal="0",maxVal="255",description="Configured Function",get=GetConfiguredFunction,set=SetConfiguredFunction,count=1, bitfieldInfo = [], enum = [ButtonConfigFunctions, ReverseButtonConfigFunctions]),\
        FieldInfo(name="SupportedFunctions",type="int",units="",minVal="0",maxVal="255",description="Bitfield of Supported Functions",get=GetSupportedFunctions,set=SetSupportedFunctions,count=4, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UnavailableFunctions",type="int",units="",minVal="0",maxVal="255",description="Optional bitfield of functions that are supported, but currently unavailable. May change at runtime. If no functions are unavailable, this part of the payload is optional.",get=GetUnavailableFunctions,set=SetUnavailableFunctions,count=4, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Status.Button.Status", Status_Button_Status.ID, Status_Button_Status)
