#    obj/CodeGenerator/Python/Status/ProcessorTemperature.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/ProcessorTemperature.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_ProcessorTemperature_Start :
    ID = 8485
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 18), ("Operator", 5)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (18, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Start.MSG_OFFSET + Status_ProcessorTemperature_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_ProcessorTemperature_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_ProcessorTemperature_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Start.MSG_OFFSET + Status_ProcessorTemperature_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_ProcessorTemperature_Start.ID)
            self.hdr.SetDataLength(Status_ProcessorTemperature_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.ProcessorTemperature.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Status.ProcessorTemperature.Start", Status_ProcessorTemperature_Start.ID, Status_ProcessorTemperature_Start)
#    obj/CodeGenerator/Python/Status/ProcessorTemperature.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/ProcessorTemperature.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_ProcessorTemperature_Status :
    ID = 8483
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ProcessorID = OrderedDict([("Main", 0)])
    ReverseProcessorID = OrderedDict([(0, "Main")])
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 18), ("Operator", 3)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (18, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Status.MSG_OFFSET + Status_ProcessorTemperature_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_ProcessorTemperature_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_ProcessorTemperature_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Status.MSG_OFFSET + Status_ProcessorTemperature_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_ProcessorTemperature_Status.ID)
            self.hdr.SetDataLength(Status_ProcessorTemperature_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.ProcessorTemperature.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetProcessorID(self, enumAsInt=0):
        """Processor ID"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_ProcessorTemperature_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Status_ProcessorTemperature_Status.ReverseProcessorID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetTemperature(self):
        """Processor die temperature in C"""
        value = struct.unpack_from('>h', self.rawBuffer(), Status_ProcessorTemperature_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetProcessorID(self, value):
        """Processor ID"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Status_ProcessorTemperature_Status.ProcessorID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_ProcessorTemperature_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetTemperature(self, value):
        """Processor die temperature in C"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), Status_ProcessorTemperature_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ProcessorID",type="enumeration",units="",minVal="0",maxVal="255",description="Processor ID",get=GetProcessorID,set=SetProcessorID,count=1, bitfieldInfo = [], enum = [ProcessorID, ReverseProcessorID]),\
        FieldInfo(name="Temperature",type="int",units="",minVal="-32768",maxVal="32767",description="Processor die temperature in C",get=GetTemperature,set=SetTemperature,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Status.ProcessorTemperature.Status", Status_ProcessorTemperature_Status.ID, Status_ProcessorTemperature_Status)
#    obj/CodeGenerator/Python/Status/ProcessorTemperature.py
#    Created 27/07/2023 at 10:11:17 from:
#        Messages = messages/Status/ProcessorTemperature.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_ProcessorTemperature_Result :
    ID = 8486
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 18), ("Operator", 6)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (18, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Result.MSG_OFFSET + Status_ProcessorTemperature_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_ProcessorTemperature_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_ProcessorTemperature_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_ProcessorTemperature_Result.MSG_OFFSET + Status_ProcessorTemperature_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_ProcessorTemperature_Result.ID)
            self.hdr.SetDataLength(Status_ProcessorTemperature_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.ProcessorTemperature.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Processor temperature readback status"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_ProcessorTemperature_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Processor temperature readback status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_ProcessorTemperature_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="",minVal="0",maxVal="255",description="Processor temperature readback status",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Status.ProcessorTemperature.Result", Status_ProcessorTemperature_Result.ID, Status_ProcessorTemperature_Result)
