#    obj/CodeGenerator/Python/Status/BatteryLevel.py
#    Created 27/07/2023 at 10:11:16 from:
#        Messages = messages/Status/BatteryLevel.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_BatteryLevel_Get :
    ID = 8225
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_BatteryLevel_Get.MSG_OFFSET + Status_BatteryLevel_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_BatteryLevel_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_BatteryLevel_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_BatteryLevel_Get.MSG_OFFSET + Status_BatteryLevel_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_BatteryLevel_Get.ID)
            self.hdr.SetDataLength(Status_BatteryLevel_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.BatteryLevel.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Status.BatteryLevel.Get", Status_BatteryLevel_Get.ID, Status_BatteryLevel_Get)
#    obj/CodeGenerator/Python/Status/BatteryLevel.py
#    Created 27/07/2023 at 10:11:16 from:
#        Messages = messages/Status/BatteryLevel.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Status_BatteryLevel_Status :
    ID = 8227
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BatteryComponentID = OrderedDict([("COMPONENT_SINGLE", 0), ("COMPONENT_RIGHTBUD", 1), ("COMPONENT_LEFTBUD", 2), ("COMPONENT_CHARGING_CASE", 3), ("COMPONENT_AGGREGATE", 4)])
    ReverseBatteryComponentID = OrderedDict([(0, "COMPONENT_SINGLE"), (1, "COMPONENT_RIGHTBUD"), (2, "COMPONENT_LEFTBUD"), (3, "COMPONENT_CHARGING_CASE"), (4, "COMPONENT_AGGREGATE")])
    IDs = OrderedDict([("FunctionBlock", 2), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(2, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Status_BatteryLevel_Status.MSG_OFFSET + Status_BatteryLevel_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Status_BatteryLevel_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Status_BatteryLevel_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Status_BatteryLevel_Status.MSG_OFFSET + Status_BatteryLevel_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Status_BatteryLevel_Status.ID)
            self.hdr.SetDataLength(Status_BatteryLevel_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Status.BatteryLevel.Status"
    # Accessors
    @msg.units('percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBatteryLevel(self):
        """Battery Level as a percentage (0-100)"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('minutes')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetPlayTimeRemaining(self):
        """Optional remaining play time in minutes before battery depleted. If play time is not available or unsupported, product my report 0xFFFF."""
        value = struct.unpack_from('>H', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetComponentIdentifier(self, enumAsInt=0):
        """Optional component identifier for products comprised of multiple components"""
        value = struct.unpack_from('B', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Status_BatteryLevel_Status.ReverseBatteryComponentID.get(value, value)
        return value
    
    @msg.units('percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBatteryLevel(self, value):
        """Battery Level as a percentage (0-100)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('minutes')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetPlayTimeRemaining(self, value):
        """Optional remaining play time in minutes before battery depleted. If play time is not available or unsupported, product my report 0xFFFF."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetComponentIdentifier(self, value):
        """Optional component identifier for products comprised of multiple components"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Status_BatteryLevel_Status.BatteryComponentID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Status_BatteryLevel_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BatteryLevel",type="int",units="percent",minVal="0",maxVal="255",description="Battery Level as a percentage (0-100)",get=GetBatteryLevel,set=SetBatteryLevel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PlayTimeRemaining",type="int",units="minutes",minVal="0",maxVal="65535",description="Optional remaining play time in minutes before battery depleted. If play time is not available or unsupported, product my report 0xFFFF.",get=GetPlayTimeRemaining,set=SetPlayTimeRemaining,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ComponentIdentifier",type="enumeration",units="",minVal="0",maxVal="255",description="Optional component identifier for products comprised of multiple components",get=GetComponentIdentifier,set=SetComponentIdentifier,count=1, bitfieldInfo = [], enum = [BatteryComponentID, ReverseBatteryComponentID])\
    ]

Messaging.Register("Status.BatteryLevel.Status", Status_BatteryLevel_Status.ID, Status_BatteryLevel_Status)
