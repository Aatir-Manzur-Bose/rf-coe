#    obj/CodeGenerator/Python/DeviceManagement/Info.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Info.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Info_Get :
    ID = 16465
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 5), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (5, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Info_Get.MSG_OFFSET + DeviceManagement_Info_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Info_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Info_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Info_Get.MSG_OFFSET + DeviceManagement_Info_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Info_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_Info_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Info.Get"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Info_Get.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Info_Get.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of source device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Info.Get", DeviceManagement_Info_Get.ID, DeviceManagement_Info_Get)
#    obj/CodeGenerator/Python/DeviceManagement/Info.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Info.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Info_Status :
    ID = 16467
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 5), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (5, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Info_Status.MSG_OFFSET + DeviceManagement_Info_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Info_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Info_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Info_Status.MSG_OFFSET + DeviceManagement_Info_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Info_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_Info_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Info.Status"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Info_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetSourceDeviceStatus(self):
        """MAC address of source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Info_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceConnected(self):
        """True if connected false otherwise"""
        value = (self.GetSourceDeviceStatus() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceInfoQuery(self):
        """True if this device sent the Device.Info Query"""
        value = (self.GetSourceDeviceStatus() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceIsBoseProduct(self):
        """True if the device is a Bose product"""
        value = (self.GetSourceDeviceStatus() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceIsComponent(self):
        """True if the source device is actually a component that makes up this device. For example, a left bud of a TWIE product. This field is optional."""
        value = (self.GetSourceDeviceStatus() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetVoiceP2PSupportedForProductOfOppositeType(self):
        """True if Voice P2P connection supported for product of opposite type"""
        value = (self.GetSourceDeviceStatus() >> 4) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetVoiceP2PSupportedForProductOfSameType(self):
        """True if Voice P2P connection supported for product of same type"""
        value = (self.GetSourceDeviceStatus() >> 5) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetMusicP2PSupportedForProductOfSameType(self):
        """True if Music P2P connection supported for product of same type"""
        value = (self.GetSourceDeviceStatus() >> 6) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetProductType(self):
        """0 == personal listening device, 1 == out loud listening device"""
        value = (self.GetSourceDeviceStatus() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Info_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetSourceDeviceStatus(self, value):
        """MAC address of source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Info_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceConnected(self, value):
        """True if connected false otherwise"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceInfoQuery(self, value):
        """True if this device sent the Device.Info Query"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceIsBoseProduct(self, value):
        """True if the device is a Bose product"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceIsComponent(self, value):
        """True if the source device is actually a component that makes up this device. For example, a left bud of a TWIE product. This field is optional."""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetVoiceP2PSupportedForProductOfOppositeType(self, value):
        """True if Voice P2P connection supported for product of opposite type"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetVoiceP2PSupportedForProductOfSameType(self, value):
        """True if Voice P2P connection supported for product of same type"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetMusicP2PSupportedForProductOfSameType(self, value):
        """True if Music P2P connection supported for product of same type"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetProductType(self, value):
        """0 == personal listening device, 1 == out loud listening device"""
        tmp = min(max(value, 0), 1)
        self.SetSourceDeviceStatus((self.GetSourceDeviceStatus() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of source device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SourceDeviceStatus",type="int",units="",minVal="0",maxVal="255",description="MAC address of source device",get=GetSourceDeviceStatus,set=SetSourceDeviceStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="DeviceConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if connected false otherwise",get=GetDeviceConnected,set=SetDeviceConnected, enum = []),\
            BitFieldInfo(name="DeviceInfoQuery",type="int",units="Boolean",minVal="0",maxVal="1",description="True if this device sent the Device.Info Query",get=GetDeviceInfoQuery,set=SetDeviceInfoQuery, enum = []),\
            BitFieldInfo(name="DeviceIsBoseProduct",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the device is a Bose product",get=GetDeviceIsBoseProduct,set=SetDeviceIsBoseProduct, enum = []),\
            BitFieldInfo(name="DeviceIsComponent",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the source device is actually a component that makes up this device. For example, a left bud of a TWIE product. This field is optional.",get=GetDeviceIsComponent,set=SetDeviceIsComponent, enum = []),\
            BitFieldInfo(name="VoiceP2PSupportedForProductOfOppositeType",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Voice P2P connection supported for product of opposite type",get=GetVoiceP2PSupportedForProductOfOppositeType,set=SetVoiceP2PSupportedForProductOfOppositeType, enum = []),\
            BitFieldInfo(name="VoiceP2PSupportedForProductOfSameType",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Voice P2P connection supported for product of same type",get=GetVoiceP2PSupportedForProductOfSameType,set=SetVoiceP2PSupportedForProductOfSameType, enum = []),\
            BitFieldInfo(name="MusicP2PSupportedForProductOfSameType",type="int",units="Boolean",minVal="0",maxVal="1",description="True if Music P2P connection supported for product of same type",get=GetMusicP2PSupportedForProductOfSameType,set=SetMusicP2PSupportedForProductOfSameType, enum = []),\
            BitFieldInfo(name="ProductType",type="int",units="",minVal="0",maxVal="1",description="0 == personal listening device, 1 == out loud listening device",get=GetProductType,set=SetProductType, enum = [])], enum = [])\
    ]

Messaging.Register("DeviceManagement.Info.Status", DeviceManagement_Info_Status.ID, DeviceManagement_Info_Status)
