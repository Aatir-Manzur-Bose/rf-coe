#    obj/CodeGenerator/Python/DeviceManagement/Features.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Features.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Features_Get :
    ID = 16609
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 14), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (14, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Features_Get.MSG_OFFSET + DeviceManagement_Features_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Features_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Features_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Features_Get.MSG_OFFSET + DeviceManagement_Features_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Features_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_Features_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Features.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DeviceManagement.Features.Get", DeviceManagement_Features_Get.ID, DeviceManagement_Features_Get)
#    obj/CodeGenerator/Python/DeviceManagement/Features.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Features.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Features_Status :
    ID = 16611
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 14), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (14, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Features_Status.MSG_OFFSET + DeviceManagement_Features_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Features_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Features_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Features_Status.MSG_OFFSET + DeviceManagement_Features_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Features_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_Features_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Features.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFeaturesStatus(self):
        """Bitfield of Features."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Features_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetCTKD(self):
        """True if cross-transport key derivation (CTKD) is supported for the current connection"""
        value = (self.GetFeaturesStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetCarousel(self):
        """True if the product supports the Carousel feature for selecting different devices in the PDL."""
        value = (self.GetFeaturesStatus() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSourceBargeIn(self):
        """True if the product supports the Source Barge In feature for being in connectable mode despite being connected to the max number of AG devices."""
        value = (self.GetFeaturesStatus() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused Bits"""
        value = (self.GetFeaturesStatus() >> 3) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFeaturesStatus(self, value):
        """Bitfield of Features."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Features_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetCTKD(self, value):
        """True if cross-transport key derivation (CTKD) is supported for the current connection"""
        tmp = min(max(value, 0), 1)
        self.SetFeaturesStatus((self.GetFeaturesStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetCarousel(self, value):
        """True if the product supports the Carousel feature for selecting different devices in the PDL."""
        tmp = min(max(value, 0), 1)
        self.SetFeaturesStatus((self.GetFeaturesStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSourceBargeIn(self, value):
        """True if the product supports the Source Barge In feature for being in connectable mode despite being connected to the max number of AG devices."""
        tmp = min(max(value, 0), 1)
        self.SetFeaturesStatus((self.GetFeaturesStatus() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused Bits"""
        tmp = min(max(value, 0), 31)
        self.SetFeaturesStatus((self.GetFeaturesStatus() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FeaturesStatus",type="int",units="",minVal="0",maxVal="255",description="Bitfield of Features.",get=GetFeaturesStatus,set=SetFeaturesStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="CTKD",type="int",units="",minVal="0",maxVal="1",description="True if cross-transport key derivation (CTKD) is supported for the current connection",get=GetCTKD,set=SetCTKD, enum = []),\
            BitFieldInfo(name="Carousel",type="int",units="",minVal="0",maxVal="1",description="True if the product supports the Carousel feature for selecting different devices in the PDL.",get=GetCarousel,set=SetCarousel, enum = []),\
            BitFieldInfo(name="SourceBargeIn",type="int",units="",minVal="0",maxVal="1",description="True if the product supports the Source Barge In feature for being in connectable mode despite being connected to the max number of AG devices.",get=GetSourceBargeIn,set=SetSourceBargeIn, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="31",description="Unused Bits",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("DeviceManagement.Features.Status", DeviceManagement_Features_Status.ID, DeviceManagement_Features_Status)
