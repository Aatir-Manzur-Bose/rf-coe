#    obj/CodeGenerator/Python/DeviceManagement/Disconnect.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Disconnect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Disconnect_Start :
    ID = 16421
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 2), ("Operator", 5)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (2, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Start.MSG_OFFSET + DeviceManagement_Disconnect_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Disconnect_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Disconnect_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Start.MSG_OFFSET + DeviceManagement_Disconnect_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Disconnect_Start.ID)
            self.hdr.SetDataLength(DeviceManagement_Disconnect_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Disconnect.Start"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of source device to disconnect"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Disconnect_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of source device to disconnect"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Disconnect_Start.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of source device to disconnect",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Disconnect.Start", DeviceManagement_Disconnect_Start.ID, DeviceManagement_Disconnect_Start)
#    obj/CodeGenerator/Python/DeviceManagement/Disconnect.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Disconnect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Disconnect_Processing :
    ID = 16423
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ReasonCodes = OrderedDict([("Reserved/Unknown", 0), ("Disconnect_ManualPowerOff", 1), ("Disconnect_AutoOff", 2), ("Disconnect_BatteryPowerOff", 3), ("Disconnect_Restart", 4), ("Disconnect_Safety", 5), ("Disconnect_OTAUpdate", 6), ("Disconnect_Charging", 7), ("Disconnect_PeerLinkLoss", 16), ("Disconnect_InsufficientSlots", 32), ("Disconnect_AppTriggered", 33)])
    ReverseReasonCodes = OrderedDict([(0, "Reserved/Unknown"), (1, "Disconnect_ManualPowerOff"), (2, "Disconnect_AutoOff"), (3, "Disconnect_BatteryPowerOff"), (4, "Disconnect_Restart"), (5, "Disconnect_Safety"), (6, "Disconnect_OTAUpdate"), (7, "Disconnect_Charging"), (16, "Disconnect_PeerLinkLoss"), (32, "Disconnect_InsufficientSlots"), (33, "Disconnect_AppTriggered")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 2), ("Operator", 7)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (2, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Processing.MSG_OFFSET + DeviceManagement_Disconnect_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Disconnect_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Disconnect_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Processing.MSG_OFFSET + DeviceManagement_Disconnect_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Disconnect_Processing.ID)
            self.hdr.SetDataLength(DeviceManagement_Disconnect_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Disconnect.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetReasonCode(self, enumAsInt=0):
        """Reason Code."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Disconnect_Processing.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = DeviceManagement_Disconnect_Processing.ReverseReasonCodes.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """For Reason code 16 (Out of Range), the MAC address shall be the device that went out of range. For Reason code 32 and 33, the MAC address is the source device that got disconnected."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Disconnect_Processing.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetReasonCode(self, value):
        """Reason Code."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_Disconnect_Processing.ReasonCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Disconnect_Processing.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """For Reason code 16 (Out of Range), the MAC address shall be the device that went out of range. For Reason code 32 and 33, the MAC address is the source device that got disconnected."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Disconnect_Processing.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ReasonCode",type="enumeration",units="",minVal="0",maxVal="255",description="Reason Code.",get=GetReasonCode,set=SetReasonCode,count=1, bitfieldInfo = [], enum = [ReasonCodes, ReverseReasonCodes]),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="For Reason code 16 (Out of Range), the MAC address shall be the device that went out of range. For Reason code 32 and 33, the MAC address is the source device that got disconnected.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Disconnect.Processing", DeviceManagement_Disconnect_Processing.ID, DeviceManagement_Disconnect_Processing)
#    obj/CodeGenerator/Python/DeviceManagement/Disconnect.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/Disconnect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Disconnect_Result :
    ID = 16422
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 2), ("Operator", 6)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (2, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Result.MSG_OFFSET + DeviceManagement_Disconnect_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Disconnect_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Disconnect_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Disconnect_Result.MSG_OFFSET + DeviceManagement_Disconnect_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Disconnect_Result.ID)
            self.hdr.SetDataLength(DeviceManagement_Disconnect_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Disconnect.Result"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of disconnected source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Disconnect_Result.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of disconnected source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Disconnect_Result.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of disconnected source device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Disconnect.Result", DeviceManagement_Disconnect_Result.ID, DeviceManagement_Disconnect_Result)
