#    obj/CodeGenerator/Python/DeviceManagement/ExtendedInfo.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/ExtendedInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_ExtendedInfo_Get :
    ID = 16481
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 6), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (6, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_ExtendedInfo_Get.MSG_OFFSET + DeviceManagement_ExtendedInfo_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_ExtendedInfo_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_ExtendedInfo_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_ExtendedInfo_Get.MSG_OFFSET + DeviceManagement_ExtendedInfo_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_ExtendedInfo_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_ExtendedInfo_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.ExtendedInfo.Get"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Get.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Get.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of source device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.ExtendedInfo.Get", DeviceManagement_ExtendedInfo_Get.ID, DeviceManagement_ExtendedInfo_Get)
#    obj/CodeGenerator/Python/DeviceManagement/ExtendedInfo.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/ExtendedInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_ExtendedInfo_Status :
    ID = 16483
    SIZE = 8
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + DeviceManagement_ExtendedInfo_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_ExtendedInfo_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_ExtendedInfo_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + DeviceManagement_ExtendedInfo_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_ExtendedInfo_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_ExtendedInfo_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.ExtendedInfo.Status"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of source device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetPairedProfiles(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetPairedA2DP(self):
        """True if A2DP is a profile paired with the source device"""
        value = (self.GetPairedProfiles() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetPairedHFP(self):
        """True if HFP is a profile paired with the source device"""
        value = (self.GetPairedProfiles() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetPairedAVRCP(self):
        """True if AVRCP is a profile paired with the source device"""
        value = (self.GetPairedProfiles() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetPairedSPP(self):
        """True if SPP is a profile paired with the source device"""
        value = (self.GetPairedProfiles() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetPairedIAP(self):
        """True if iAP is a profile paired with the source device"""
        value = (self.GetPairedProfiles() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetConnectedProfiles(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConnectedA2DP(self):
        """True if A2DP is a profile connected with the source device"""
        value = (self.GetConnectedProfiles() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConnectedHFP(self):
        """True if HFP is a profile connected with the source device"""
        value = (self.GetConnectedProfiles() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConnectedAVRCP(self):
        """True if AVRCP is a profile connected with the source device"""
        value = (self.GetConnectedProfiles() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConnectedSPP(self):
        """True if SPP is a profile paired with the source device"""
        value = (self.GetConnectedProfiles() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetConnectedIAP(self):
        """True if iAP is a profile paired with the source device"""
        value = (self.GetConnectedProfiles() >> 4) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of source device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetPairedProfiles(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetPairedA2DP(self, value):
        """True if A2DP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetPairedProfiles((self.GetPairedProfiles() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetPairedHFP(self, value):
        """True if HFP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetPairedProfiles((self.GetPairedProfiles() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetPairedAVRCP(self, value):
        """True if AVRCP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetPairedProfiles((self.GetPairedProfiles() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetPairedSPP(self, value):
        """True if SPP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetPairedProfiles((self.GetPairedProfiles() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetPairedIAP(self, value):
        """True if iAP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetPairedProfiles((self.GetPairedProfiles() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetConnectedProfiles(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ExtendedInfo_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConnectedA2DP(self, value):
        """True if A2DP is a profile connected with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectedProfiles((self.GetConnectedProfiles() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConnectedHFP(self, value):
        """True if HFP is a profile connected with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectedProfiles((self.GetConnectedProfiles() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConnectedAVRCP(self, value):
        """True if AVRCP is a profile connected with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectedProfiles((self.GetConnectedProfiles() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConnectedSPP(self, value):
        """True if SPP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectedProfiles((self.GetConnectedProfiles() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetConnectedIAP(self, value):
        """True if iAP is a profile paired with the source device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectedProfiles((self.GetConnectedProfiles() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of source device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PairedProfiles",type="int",units="",minVal="0",maxVal="255",description="",get=GetPairedProfiles,set=SetPairedProfiles,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PairedA2DP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if A2DP is a profile paired with the source device",get=GetPairedA2DP,set=SetPairedA2DP, enum = []),\
            BitFieldInfo(name="PairedHFP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if HFP is a profile paired with the source device",get=GetPairedHFP,set=SetPairedHFP, enum = []),\
            BitFieldInfo(name="PairedAVRCP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if AVRCP is a profile paired with the source device",get=GetPairedAVRCP,set=SetPairedAVRCP, enum = []),\
            BitFieldInfo(name="PairedSPP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if SPP is a profile paired with the source device",get=GetPairedSPP,set=SetPairedSPP, enum = []),\
            BitFieldInfo(name="PairedIAP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if iAP is a profile paired with the source device",get=GetPairedIAP,set=SetPairedIAP, enum = [])], enum = []),\
        FieldInfo(name="ConnectedProfiles",type="int",units="",minVal="0",maxVal="255",description="",get=GetConnectedProfiles,set=SetConnectedProfiles,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ConnectedA2DP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if A2DP is a profile connected with the source device",get=GetConnectedA2DP,set=SetConnectedA2DP, enum = []),\
            BitFieldInfo(name="ConnectedHFP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if HFP is a profile connected with the source device",get=GetConnectedHFP,set=SetConnectedHFP, enum = []),\
            BitFieldInfo(name="ConnectedAVRCP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if AVRCP is a profile connected with the source device",get=GetConnectedAVRCP,set=SetConnectedAVRCP, enum = []),\
            BitFieldInfo(name="ConnectedSPP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if SPP is a profile paired with the source device",get=GetConnectedSPP,set=SetConnectedSPP, enum = []),\
            BitFieldInfo(name="ConnectedIAP",type="int",units="Boolean",minVal="0",maxVal="1",description="True if iAP is a profile paired with the source device",get=GetConnectedIAP,set=SetConnectedIAP, enum = [])], enum = [])\
    ]

Messaging.Register("DeviceManagement.ExtendedInfo.Status", DeviceManagement_ExtendedInfo_Status.ID, DeviceManagement_ExtendedInfo_Status)
