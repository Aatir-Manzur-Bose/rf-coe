#    obj/CodeGenerator/Python/DeviceManagement/BoseProduct.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/BoseProduct.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_BoseProduct_Get :
    ID = 16625
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 15), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (15, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_Get.MSG_OFFSET + DeviceManagement_BoseProduct_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_BoseProduct_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_BoseProduct_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_Get.MSG_OFFSET + DeviceManagement_BoseProduct_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_BoseProduct_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_BoseProduct_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.BoseProduct.Get"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of device to be interrogated for Bose Product Type status"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_Get.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of device to be interrogated for Bose Product Type status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_Get.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of device to be interrogated for Bose Product Type status",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.BoseProduct.Get", DeviceManagement_BoseProduct_Get.ID, DeviceManagement_BoseProduct_Get)
#    obj/CodeGenerator/Python/DeviceManagement/BoseProduct.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/BoseProduct.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_BoseProduct_SetGet :
    ID = 16626
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BoseDeviceType = OrderedDict([("Synchronized_Speaker", 0)])
    ReverseBoseDeviceType = OrderedDict([(0, "Synchronized_Speaker")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 15), ("Operator", 2)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (15, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + DeviceManagement_BoseProduct_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_BoseProduct_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_BoseProduct_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + DeviceManagement_BoseProduct_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_BoseProduct_SetGet.ID)
            self.hdr.SetDataLength(DeviceManagement_BoseProduct_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.BoseProduct.SetGet"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of identified device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetPID(self):
        """Product ID of identified device (MSB first)"""
        value = struct.unpack_from('>H', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetVID(self):
        """Variant ID of identified device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('BoseDeviceType')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetDeviceType(self, enumAsInt=0):
        """Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = DeviceManagement_BoseProduct_SetGet.ReverseBoseDeviceType.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of identified device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetPID(self, value):
        """Product ID of identified device (MSB first)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetVID(self, value):
        """Variant ID of identified device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 8, tmp)
    
    @msg.units('BoseDeviceType')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetDeviceType(self, value):
        """Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_BoseProduct_SetGet.BoseDeviceType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_SetGet.MSG_OFFSET + 9, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of identified device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PID",type="int",units="",minVal="0",maxVal="65535",description="Product ID of identified device (MSB first)",get=GetPID,set=SetPID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VID",type="int",units="",minVal="0",maxVal="255",description="Variant ID of identified device",get=GetVID,set=SetVID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceType",type="enumeration",units="BoseDeviceType",minVal="0",maxVal="255",description="Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it.",get=GetDeviceType,set=SetDeviceType,count=1, bitfieldInfo = [], enum = [BoseDeviceType, ReverseBoseDeviceType])\
    ]

Messaging.Register("DeviceManagement.BoseProduct.SetGet", DeviceManagement_BoseProduct_SetGet.ID, DeviceManagement_BoseProduct_SetGet)
#    obj/CodeGenerator/Python/DeviceManagement/BoseProduct.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/BoseProduct.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_BoseProduct_Status :
    ID = 16627
    SIZE = 10
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BoseDeviceType = OrderedDict([("Synchronized_Speaker", 0)])
    ReverseBoseDeviceType = OrderedDict([(0, "Synchronized_Speaker")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 15), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (15, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_Status.MSG_OFFSET + DeviceManagement_BoseProduct_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_BoseProduct_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_BoseProduct_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_BoseProduct_Status.MSG_OFFSET + DeviceManagement_BoseProduct_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_BoseProduct_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_BoseProduct_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.BoseProduct.Status"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of identified device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetPID(self):
        """Product ID of identified device (MSB first)"""
        value = struct.unpack_from('>H', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetVID(self):
        """Variant ID of identified device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('BoseDeviceType')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetDeviceType(self, enumAsInt=0):
        """Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 9)[0]
        if not enumAsInt:
            value = DeviceManagement_BoseProduct_Status.ReverseBoseDeviceType.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of identified device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetPID(self, value):
        """Product ID of identified device (MSB first)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetVID(self, value):
        """Variant ID of identified device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('BoseDeviceType')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetDeviceType(self, value):
        """Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_BoseProduct_Status.BoseDeviceType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_BoseProduct_Status.MSG_OFFSET + 9, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of identified device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PID",type="int",units="",minVal="0",maxVal="65535",description="Product ID of identified device (MSB first)",get=GetPID,set=SetPID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VID",type="int",units="",minVal="0",maxVal="255",description="Variant ID of identified device",get=GetVID,set=SetVID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceType",type="enumeration",units="BoseDeviceType",minVal="0",maxVal="255",description="Enumerates the indicated device as a particular type of Bose product, offering the device receiving this message the opportunity to change the way it interacts with it.",get=GetDeviceType,set=SetDeviceType,count=1, bitfieldInfo = [], enum = [BoseDeviceType, ReverseBoseDeviceType])\
    ]

Messaging.Register("DeviceManagement.BoseProduct.Status", DeviceManagement_BoseProduct_Status.ID, DeviceManagement_BoseProduct_Status)
