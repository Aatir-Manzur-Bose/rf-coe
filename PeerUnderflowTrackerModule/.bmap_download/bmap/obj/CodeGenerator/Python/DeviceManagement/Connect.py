#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Get :
    ID = 16401
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Get.MSG_OFFSET + DeviceManagement_Connect_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Get.MSG_OFFSET + DeviceManagement_Connect_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DeviceManagement.Connect.Get", DeviceManagement_Connect_Get.ID, DeviceManagement_Connect_Get)
#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Status :
    ID = 16403
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Status.MSG_OFFSET + DeviceManagement_Connect_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Status.MSG_OFFSET + DeviceManagement_Connect_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedConnectionTypes(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused1(self):
        """Unused"""
        value = (self.GetSupportedConnectionTypes() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVPASupportedWhileP2PConnectionActive(self):
        """VPASupportedWhileP2PConnectionActive"""
        value = (self.GetSupportedConnectionTypes() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetARStreamingSupportedWhileP2PConnectionActive(self):
        """ARStreamingSupportedWhileP2PConnectionActive"""
        value = (self.GetSupportedConnectionTypes() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVoiceP2PConnectionSupportedForProductOfOppositeType(self):
        """VoiceP2PConnectionSupportedForProductOfOppositeType"""
        value = (self.GetSupportedConnectionTypes() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVoiceP2PConnectionSupportedForProductOfSameType(self):
        """VoiceP2PConnectionSupportedForProductOfSameType"""
        value = (self.GetSupportedConnectionTypes() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMusicP2PConnectionOnlySupportForProductWithIdenticalPID(self):
        """MusicP2PConnectionOnlySupportForProductWithIdenticalPID"""
        value = (self.GetSupportedConnectionTypes() >> 5) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMusicP2PConnectionSupportedForProductOfSameType(self):
        """MusicP2PConnectionSupportedForProductOfSameType"""
        value = (self.GetSupportedConnectionTypes() >> 6) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetProductType(self):
        """(0 = personal listening device, 1 = out loud listening device)"""
        value = (self.GetSupportedConnectionTypes() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCompatibilityNumber(self):
        """Compatibility number that is incremented anytime changes are made to P2P firmware implementation that are not backward compatible. Compatibility number for first P2P implementation == 0."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedCodecs(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetSBCA2DPcodec(self):
        """SBCA2DPcodec"""
        value = (self.GetSupportedCodecs() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetAACA2DPcodec(self):
        """AACA2DPcodec"""
        value = (self.GetSupportedCodecs() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnused2(self):
        """Unused"""
        value = (self.GetSupportedCodecs() >> 2) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedConnectionTypes(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused1(self, value):
        """Unused"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVPASupportedWhileP2PConnectionActive(self, value):
        """VPASupportedWhileP2PConnectionActive"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetARStreamingSupportedWhileP2PConnectionActive(self, value):
        """ARStreamingSupportedWhileP2PConnectionActive"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVoiceP2PConnectionSupportedForProductOfOppositeType(self, value):
        """VoiceP2PConnectionSupportedForProductOfOppositeType"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVoiceP2PConnectionSupportedForProductOfSameType(self, value):
        """VoiceP2PConnectionSupportedForProductOfSameType"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMusicP2PConnectionOnlySupportForProductWithIdenticalPID(self, value):
        """MusicP2PConnectionOnlySupportForProductWithIdenticalPID"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMusicP2PConnectionSupportedForProductOfSameType(self, value):
        """MusicP2PConnectionSupportedForProductOfSameType"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetProductType(self, value):
        """(0 = personal listening device, 1 = out loud listening device)"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedConnectionTypes((self.GetSupportedConnectionTypes() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCompatibilityNumber(self, value):
        """Compatibility number that is incremented anytime changes are made to P2P firmware implementation that are not backward compatible. Compatibility number for first P2P implementation == 0."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedCodecs(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetSBCA2DPcodec(self, value):
        """SBCA2DPcodec"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetAACA2DPcodec(self, value):
        """AACA2DPcodec"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnused2(self, value):
        """Unused"""
        tmp = min(max(value, 0), 31)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1f << 2)) | ((tmp & 0x1f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SupportedConnectionTypes",type="int",units="",minVal="0",maxVal="255",description="",get=GetSupportedConnectionTypes,set=SetSupportedConnectionTypes,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Unused1",type="int",units="",minVal="0",maxVal="1",description="Unused",get=GetUnused1,set=SetUnused1, enum = []),\
            BitFieldInfo(name="VPASupportedWhileP2PConnectionActive",type="int",units="",minVal="0",maxVal="1",description="VPASupportedWhileP2PConnectionActive",get=GetVPASupportedWhileP2PConnectionActive,set=SetVPASupportedWhileP2PConnectionActive, enum = []),\
            BitFieldInfo(name="ARStreamingSupportedWhileP2PConnectionActive",type="int",units="",minVal="0",maxVal="1",description="ARStreamingSupportedWhileP2PConnectionActive",get=GetARStreamingSupportedWhileP2PConnectionActive,set=SetARStreamingSupportedWhileP2PConnectionActive, enum = []),\
            BitFieldInfo(name="VoiceP2PConnectionSupportedForProductOfOppositeType",type="int",units="",minVal="0",maxVal="1",description="VoiceP2PConnectionSupportedForProductOfOppositeType",get=GetVoiceP2PConnectionSupportedForProductOfOppositeType,set=SetVoiceP2PConnectionSupportedForProductOfOppositeType, enum = []),\
            BitFieldInfo(name="VoiceP2PConnectionSupportedForProductOfSameType",type="int",units="",minVal="0",maxVal="1",description="VoiceP2PConnectionSupportedForProductOfSameType",get=GetVoiceP2PConnectionSupportedForProductOfSameType,set=SetVoiceP2PConnectionSupportedForProductOfSameType, enum = []),\
            BitFieldInfo(name="MusicP2PConnectionOnlySupportForProductWithIdenticalPID",type="int",units="",minVal="0",maxVal="1",description="MusicP2PConnectionOnlySupportForProductWithIdenticalPID",get=GetMusicP2PConnectionOnlySupportForProductWithIdenticalPID,set=SetMusicP2PConnectionOnlySupportForProductWithIdenticalPID, enum = []),\
            BitFieldInfo(name="MusicP2PConnectionSupportedForProductOfSameType",type="int",units="",minVal="0",maxVal="1",description="MusicP2PConnectionSupportedForProductOfSameType",get=GetMusicP2PConnectionSupportedForProductOfSameType,set=SetMusicP2PConnectionSupportedForProductOfSameType, enum = []),\
            BitFieldInfo(name="ProductType",type="int",units="",minVal="0",maxVal="1",description="(0 = personal listening device, 1 = out loud listening device)",get=GetProductType,set=SetProductType, enum = [])], enum = []),\
        FieldInfo(name="CompatibilityNumber",type="int",units="",minVal="0",maxVal="255",description="Compatibility number that is incremented anytime changes are made to P2P firmware implementation that are not backward compatible. Compatibility number for first P2P implementation == 0.",get=GetCompatibilityNumber,set=SetCompatibilityNumber,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SupportedCodecs",type="int",units="",minVal="0",maxVal="255",description="",get=GetSupportedCodecs,set=SetSupportedCodecs,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SBCA2DPcodec",type="int",units="",minVal="0",maxVal="1",description="SBCA2DPcodec",get=GetSBCA2DPcodec,set=SetSBCA2DPcodec, enum = []),\
            BitFieldInfo(name="AACA2DPcodec",type="int",units="",minVal="0",maxVal="1",description="AACA2DPcodec",get=GetAACA2DPcodec,set=SetAACA2DPcodec, enum = []),\
            BitFieldInfo(name="Unused2",type="int",units="",minVal="0",maxVal="31",description="Unused",get=GetUnused2,set=SetUnused2, enum = [])], enum = [])\
    ]

Messaging.Register("DeviceManagement.Connect.Status", DeviceManagement_Connect_Status.ID, DeviceManagement_Connect_Status)
#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Start :
    ID = 16405
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    P2PMode = OrderedDict([("NonP2PConnection", 0), ("MusicP2PSameTypeStereo", 1), ("MusicP2PSameTypeL", 2), ("MusicP2PSameTypeR", 3), ("VoiceP2PSameType", 4), ("VoiceP2POppositeType", 5)])
    ReverseP2PMode = OrderedDict([(0, "NonP2PConnection"), (1, "MusicP2PSameTypeStereo"), (2, "MusicP2PSameTypeL"), (3, "MusicP2PSameTypeR"), (4, "VoiceP2PSameType"), (5, "VoiceP2POppositeType")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 5)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Start.MSG_OFFSET + DeviceManagement_Connect_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Start.MSG_OFFSET + DeviceManagement_Connect_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Start.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Start"
    # Accessors
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetConnectionType(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMACAddress(self):
        """0 - Device identified by its MAC address, 1 - Device identified by its friendly name"""
        value = (self.GetConnectionType() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Second 2 bits unused"""
        value = (self.GetConnectionType() >> 2) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceIdentifier(self, enumAsInt=0):
        """Connection type P2P mode"""
        value = (self.GetConnectionType() >> 4) & 0x7
        if not enumAsInt:
            value = DeviceManagement_Connect_Start.ReverseP2PMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetProductType(self):
        """0 == personal listening device, 1 == out loud listening device"""
        value = (self.GetConnectionType() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def GetDeviceInformation(self, idx):
        """Depends on value of device identifier in byte 0."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Start.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetConnectionType(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMACAddress(self, value):
        """0 - Device identified by its MAC address, 1 - Device identified by its friendly name"""
        tmp = min(max(value, 0), 3)
        self.SetConnectionType((self.GetConnectionType() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Second 2 bits unused"""
        tmp = min(max(value, 0), 3)
        self.SetConnectionType((self.GetConnectionType() & ~(0x3 << 2)) | ((tmp & 0x3) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceIdentifier(self, value):
        """Connection type P2P mode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_Connect_Start.P2PMode.get(value, defaultValue)
        tmp = min(max(value, 0), 7)
        self.SetConnectionType((self.GetConnectionType() & ~(0x7 << 4)) | ((tmp & 0x7) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetProductType(self, value):
        """0 == personal listening device, 1 == out loud listening device"""
        tmp = min(max(value, 0), 1)
        self.SetConnectionType((self.GetConnectionType() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def SetDeviceInformation(self, value, idx):
        """Depends on value of device identifier in byte 0."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Start.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ConnectionType",type="int",units="P2PMode",minVal="0",maxVal="255",description="",get=GetConnectionType,set=SetConnectionType,count=1, bitfieldInfo = [\
            BitFieldInfo(name="MACAddress",type="int",units="Boolean",minVal="0",maxVal="3",description="0 - Device identified by its MAC address, 1 - Device identified by its friendly name",get=GetMACAddress,set=SetMACAddress, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="3",description="Second 2 bits unused",get=GetUnusedBits,set=SetUnusedBits, enum = []),\
            BitFieldInfo(name="DeviceIdentifier",type="enumeration",units="",minVal="0",maxVal="7",description="Connection type P2P mode",get=GetDeviceIdentifier,set=SetDeviceIdentifier, enum = [P2PMode, ReverseP2PMode]),\
            BitFieldInfo(name="ProductType",type="int",units="",minVal="0",maxVal="1",description="0 == personal listening device, 1 == out loud listening device",get=GetProductType,set=SetProductType, enum = [])], enum = []),\
        FieldInfo(name="DeviceInformation",type="int",units="",minVal="0",maxVal="255",description="Depends on value of device identifier in byte 0.",get=GetDeviceInformation,set=SetDeviceInformation,count=59, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Connect.Start", DeviceManagement_Connect_Start.ID, DeviceManagement_Connect_Start)
#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Processing :
    ID = 16407
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 7)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Processing.MSG_OFFSET + DeviceManagement_Connect_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Processing.MSG_OFFSET + DeviceManagement_Connect_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Processing.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Processing"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """Source device's MAC address"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Processing.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(54)
    def GetFriendlyName(self, idx):
        """Bluetooth friendly name if connect by Bluetooth friendly name was used"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Processing.MSG_OFFSET + 6+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """Source device's MAC address"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Processing.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(54)
    def SetFriendlyName(self, value, idx):
        """Bluetooth friendly name if connect by Bluetooth friendly name was used"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Processing.MSG_OFFSET + 6+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="Source device's MAC address",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FriendlyName",type="int",units="",minVal="0",maxVal="255",description="Bluetooth friendly name if connect by Bluetooth friendly name was used",get=GetFriendlyName,set=SetFriendlyName,count=54, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Connect.Processing", DeviceManagement_Connect_Processing.ID, DeviceManagement_Connect_Processing)
#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Error :
    ID = 16404
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 4)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Error.MSG_OFFSET + DeviceManagement_Connect_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Error.MSG_OFFSET + DeviceManagement_Connect_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Error.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self):
        """Error Code"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Error.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC Address of failed connection"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Error.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """Error Code"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Error.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC Address of failed connection"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Error.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="int",units="",minVal="0",maxVal="255",description="Error Code",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of failed connection",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Connect.Error", DeviceManagement_Connect_Error.ID, DeviceManagement_Connect_Error)
#    obj/CodeGenerator/Python/DeviceManagement/Connect.py
#    Created 27/07/2023 at 10:10:22 from:
#        Messages = messages/DeviceManagement/Connect.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Connect_Result :
    ID = 16406
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 1), ("Operator", 6)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (1, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Connect_Result.MSG_OFFSET + DeviceManagement_Connect_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Connect_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Connect_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Connect_Result.MSG_OFFSET + DeviceManagement_Connect_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Connect_Result.ID)
            self.hdr.SetDataLength(DeviceManagement_Connect_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Connect.Result"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address of connected device"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Result.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetSupportedCodecs(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Connect_Result.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetA2dpConnected(self):
        """A2dpConnected"""
        value = (self.GetSupportedCodecs() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetHfpConnected(self):
        """HfpConnected"""
        value = (self.GetSupportedCodecs() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetAvrcpConnected(self):
        """AvrcpConnected"""
        value = (self.GetSupportedCodecs() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetSppConnected(self):
        """SPPConnected"""
        value = (self.GetSupportedCodecs() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetIapConnected(self):
        """iAPConnected"""
        value = (self.GetSupportedCodecs() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits"""
        value = (self.GetSupportedCodecs() >> 5) & 0x7
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address of connected device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Result.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetSupportedCodecs(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Connect_Result.MSG_OFFSET + 6, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetA2dpConnected(self, value):
        """A2dpConnected"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetHfpConnected(self, value):
        """HfpConnected"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetAvrcpConnected(self, value):
        """AvrcpConnected"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetSppConnected(self, value):
        """SPPConnected"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetIapConnected(self, value):
        """iAPConnected"""
        tmp = min(max(value, 0), 1)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits"""
        tmp = min(max(value, 0), 7)
        self.SetSupportedCodecs((self.GetSupportedCodecs() & ~(0x7 << 5)) | ((tmp & 0x7) << 5))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address of connected device",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SupportedCodecs",type="int",units="",minVal="0",maxVal="255",description="",get=GetSupportedCodecs,set=SetSupportedCodecs,count=1, bitfieldInfo = [\
            BitFieldInfo(name="A2dpConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="A2dpConnected",get=GetA2dpConnected,set=SetA2dpConnected, enum = []),\
            BitFieldInfo(name="HfpConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="HfpConnected",get=GetHfpConnected,set=SetHfpConnected, enum = []),\
            BitFieldInfo(name="AvrcpConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="AvrcpConnected",get=GetAvrcpConnected,set=SetAvrcpConnected, enum = []),\
            BitFieldInfo(name="SppConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="SPPConnected",get=GetSppConnected,set=SetSppConnected, enum = []),\
            BitFieldInfo(name="IapConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="iAPConnected",get=GetIapConnected,set=SetIapConnected, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="7",description="Unused bits",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("DeviceManagement.Connect.Result", DeviceManagement_Connect_Result.ID, DeviceManagement_Connect_Result)
