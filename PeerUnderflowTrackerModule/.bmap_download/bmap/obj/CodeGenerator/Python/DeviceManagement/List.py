#    obj/CodeGenerator/Python/DeviceManagement/List.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/List.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_List_Get :
    ID = 16449
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_List_Get.MSG_OFFSET + DeviceManagement_List_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_List_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_List_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_List_Get.MSG_OFFSET + DeviceManagement_List_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_List_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_List_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.List.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DeviceManagement.List.Get", DeviceManagement_List_Get.ID, DeviceManagement_List_Get)
#    obj/CodeGenerator/Python/DeviceManagement/List.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/List.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_List_Status :
    ID = 16451
    SIZE = 49
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_List_Status.MSG_OFFSET + DeviceManagement_List_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_List_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_List_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_List_Status.MSG_OFFSET + DeviceManagement_List_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_List_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_List_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.List.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDeviceConnected(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceOneConnected(self):
        """True if the first device is connected"""
        value = (self.GetDeviceConnected() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceTwoConnected(self):
        """True if the second device is connected"""
        value = (self.GetDeviceConnected() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceThreeConnected(self):
        """True if the third device is connected"""
        value = (self.GetDeviceConnected() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceFourConnected(self):
        """True if the fourth device is connected"""
        value = (self.GetDeviceConnected() >> 3) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceFiveConnected(self):
        """True if the fifth device is connected"""
        value = (self.GetDeviceConnected() >> 4) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceSixConnected(self):
        """True if the sixth device is connected"""
        value = (self.GetDeviceConnected() >> 5) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceSevenConnected(self):
        """True if the seventh device is connected"""
        value = (self.GetDeviceConnected() >> 6) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetDeviceEightConnected(self):
        """True if the eighth device is connected"""
        value = (self.GetDeviceConnected() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceOneMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceTwoMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 7+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceThreeMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 13+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFourMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 19+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFiveMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 25+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSixMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 31+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSevenMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 37+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('43')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceEightMacAddress(self, idx):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 43+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDeviceConnected(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceOneConnected(self, value):
        """True if the first device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceTwoConnected(self, value):
        """True if the second device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceThreeConnected(self, value):
        """True if the third device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceFourConnected(self, value):
        """True if the fourth device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceFiveConnected(self, value):
        """True if the fifth device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceSixConnected(self, value):
        """True if the sixth device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceSevenConnected(self, value):
        """True if the seventh device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetDeviceEightConnected(self, value):
        """True if the eighth device is connected"""
        tmp = min(max(value, 0), 1)
        self.SetDeviceConnected((self.GetDeviceConnected() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceOneMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 1+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceTwoMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 7+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceThreeMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 13+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFourMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 19+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFiveMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 25+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSixMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 31+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSevenMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 37+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('43')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceEightMacAddress(self, value, idx):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_List_Status.MSG_OFFSET + 43+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="DeviceConnected",type="int",units="",minVal="0",maxVal="255",description="",get=GetDeviceConnected,set=SetDeviceConnected,count=1, bitfieldInfo = [\
            BitFieldInfo(name="DeviceOneConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the first device is connected",get=GetDeviceOneConnected,set=SetDeviceOneConnected, enum = []),\
            BitFieldInfo(name="DeviceTwoConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the second device is connected",get=GetDeviceTwoConnected,set=SetDeviceTwoConnected, enum = []),\
            BitFieldInfo(name="DeviceThreeConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the third device is connected",get=GetDeviceThreeConnected,set=SetDeviceThreeConnected, enum = []),\
            BitFieldInfo(name="DeviceFourConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the fourth device is connected",get=GetDeviceFourConnected,set=SetDeviceFourConnected, enum = []),\
            BitFieldInfo(name="DeviceFiveConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the fifth device is connected",get=GetDeviceFiveConnected,set=SetDeviceFiveConnected, enum = []),\
            BitFieldInfo(name="DeviceSixConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the sixth device is connected",get=GetDeviceSixConnected,set=SetDeviceSixConnected, enum = []),\
            BitFieldInfo(name="DeviceSevenConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the seventh device is connected",get=GetDeviceSevenConnected,set=SetDeviceSevenConnected, enum = []),\
            BitFieldInfo(name="DeviceEightConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the eighth device is connected",get=GetDeviceEightConnected,set=SetDeviceEightConnected, enum = [])], enum = []),\
        FieldInfo(name="DeviceOneMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceOneMacAddress,set=SetDeviceOneMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceTwoMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceTwoMacAddress,set=SetDeviceTwoMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceThreeMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceThreeMacAddress,set=SetDeviceThreeMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFourMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceFourMacAddress,set=SetDeviceFourMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFiveMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceFiveMacAddress,set=SetDeviceFiveMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSixMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceSixMacAddress,set=SetDeviceSixMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSevenMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceSevenMacAddress,set=SetDeviceSevenMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceEightMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="",get=GetDeviceEightMacAddress,set=SetDeviceEightMacAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.List.Status", DeviceManagement_List_Status.ID, DeviceManagement_List_Status)
