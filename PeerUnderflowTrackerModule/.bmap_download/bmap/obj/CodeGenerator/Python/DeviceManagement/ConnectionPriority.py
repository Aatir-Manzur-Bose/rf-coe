#    obj/CodeGenerator/Python/DeviceManagement/ConnectionPriority.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/ConnectionPriority.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_ConnectionPriority_Get :
    ID = 16641
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 16), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (16, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_Get.MSG_OFFSET + DeviceManagement_ConnectionPriority_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_ConnectionPriority_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_ConnectionPriority_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_Get.MSG_OFFSET + DeviceManagement_ConnectionPriority_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_ConnectionPriority_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_ConnectionPriority_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.ConnectionPriority.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DeviceManagement.ConnectionPriority.Get", DeviceManagement_ConnectionPriority_Get.ID, DeviceManagement_ConnectionPriority_Get)
#    obj/CodeGenerator/Python/DeviceManagement/ConnectionPriority.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/ConnectionPriority.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_ConnectionPriority_SetGet :
    ID = 16642
    SIZE = 48
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 16), ("Operator", 2)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (16, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + DeviceManagement_ConnectionPriority_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_ConnectionPriority_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_ConnectionPriority_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + DeviceManagement_ConnectionPriority_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_ConnectionPriority_SetGet.ID)
            self.hdr.SetDataLength(DeviceManagement_ConnectionPriority_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.ConnectionPriority.SetGet"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceOneMacAddress(self, idx):
        """MAC Address of device with priority one"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceTwoMacAddress(self, idx):
        """MAC Address of device with priority two"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 6+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceThreeMacAddress(self, idx):
        """MAC Address of device with priority three"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 12+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFourMacAddress(self, idx):
        """MAC Address of device with priority four"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 18+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFiveMacAddress(self, idx):
        """MAC Address of device with priority five"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 24+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('30')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSixMacAddress(self, idx):
        """MAC Address of device with priority six"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 30+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSevenMacAddress(self, idx):
        """MAC Address of device with priority seven"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 36+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('42')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceEightMacAddress(self, idx):
        """MAC Address of device with priority eight"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 42+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceOneMacAddress(self, value, idx):
        """MAC Address of device with priority one"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceTwoMacAddress(self, value, idx):
        """MAC Address of device with priority two"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 6+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceThreeMacAddress(self, value, idx):
        """MAC Address of device with priority three"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 12+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFourMacAddress(self, value, idx):
        """MAC Address of device with priority four"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 18+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFiveMacAddress(self, value, idx):
        """MAC Address of device with priority five"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 24+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('30')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSixMacAddress(self, value, idx):
        """MAC Address of device with priority six"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 30+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSevenMacAddress(self, value, idx):
        """MAC Address of device with priority seven"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 36+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('42')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceEightMacAddress(self, value, idx):
        """MAC Address of device with priority eight"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_SetGet.MSG_OFFSET + 42+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="DeviceOneMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority one",get=GetDeviceOneMacAddress,set=SetDeviceOneMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceTwoMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority two",get=GetDeviceTwoMacAddress,set=SetDeviceTwoMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceThreeMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority three",get=GetDeviceThreeMacAddress,set=SetDeviceThreeMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFourMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority four",get=GetDeviceFourMacAddress,set=SetDeviceFourMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFiveMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority five",get=GetDeviceFiveMacAddress,set=SetDeviceFiveMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSixMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority six",get=GetDeviceSixMacAddress,set=SetDeviceSixMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSevenMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority seven",get=GetDeviceSevenMacAddress,set=SetDeviceSevenMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceEightMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority eight",get=GetDeviceEightMacAddress,set=SetDeviceEightMacAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.ConnectionPriority.SetGet", DeviceManagement_ConnectionPriority_SetGet.ID, DeviceManagement_ConnectionPriority_SetGet)
#    obj/CodeGenerator/Python/DeviceManagement/ConnectionPriority.py
#    Created 27/07/2023 at 10:10:23 from:
#        Messages = messages/DeviceManagement/ConnectionPriority.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_ConnectionPriority_Status :
    ID = 16643
    SIZE = 49
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + DeviceManagement_ConnectionPriority_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_ConnectionPriority_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_ConnectionPriority_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + DeviceManagement_ConnectionPriority_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_ConnectionPriority_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_ConnectionPriority_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.ConnectionPriority.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMaxConnPriority(self):
        """Max number of connections allowed in prioritization list"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceOneMacAddress(self, idx):
        """MAC Address of device with priority one"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceTwoMacAddress(self, idx):
        """MAC Address of device with priority two"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 7+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceThreeMacAddress(self, idx):
        """MAC Address of device with priority three"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 13+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFourMacAddress(self, idx):
        """MAC Address of device with priority four"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 19+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceFiveMacAddress(self, idx):
        """MAC Address of device with priority five"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 25+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSixMacAddress(self, idx):
        """MAC Address of device with priority six"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 31+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceSevenMacAddress(self, idx):
        """MAC Address of device with priority seven"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 37+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('43')
    @msg.size('1')
    @msg.count(6)
    def GetDeviceEightMacAddress(self, idx):
        """MAC Address of device with priority eight"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 43+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMaxConnPriority(self, value):
        """Max number of connections allowed in prioritization list"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceOneMacAddress(self, value, idx):
        """MAC Address of device with priority one"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 1+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceTwoMacAddress(self, value, idx):
        """MAC Address of device with priority two"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 7+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceThreeMacAddress(self, value, idx):
        """MAC Address of device with priority three"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 13+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('19')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFourMacAddress(self, value, idx):
        """MAC Address of device with priority four"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 19+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('25')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceFiveMacAddress(self, value, idx):
        """MAC Address of device with priority five"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 25+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('31')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSixMacAddress(self, value, idx):
        """MAC Address of device with priority six"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 31+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('37')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceSevenMacAddress(self, value, idx):
        """MAC Address of device with priority seven"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 37+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('43')
    @msg.size('1')
    @msg.count(6)
    def SetDeviceEightMacAddress(self, value, idx):
        """MAC Address of device with priority eight"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_ConnectionPriority_Status.MSG_OFFSET + 43+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MaxConnPriority",type="int",units="",minVal="0",maxVal="255",description="Max number of connections allowed in prioritization list",get=GetMaxConnPriority,set=SetMaxConnPriority,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceOneMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority one",get=GetDeviceOneMacAddress,set=SetDeviceOneMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceTwoMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority two",get=GetDeviceTwoMacAddress,set=SetDeviceTwoMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceThreeMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority three",get=GetDeviceThreeMacAddress,set=SetDeviceThreeMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFourMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority four",get=GetDeviceFourMacAddress,set=SetDeviceFourMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceFiveMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority five",get=GetDeviceFiveMacAddress,set=SetDeviceFiveMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSixMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority six",get=GetDeviceSixMacAddress,set=SetDeviceSixMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceSevenMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority seven",get=GetDeviceSevenMacAddress,set=SetDeviceSevenMacAddress,count=6, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DeviceEightMacAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC Address of device with priority eight",get=GetDeviceEightMacAddress,set=SetDeviceEightMacAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.ConnectionPriority.Status", DeviceManagement_ConnectionPriority_Status.ID, DeviceManagement_ConnectionPriority_Status)
