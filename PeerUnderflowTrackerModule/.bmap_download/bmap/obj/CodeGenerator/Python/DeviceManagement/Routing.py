#    obj/CodeGenerator/Python/DeviceManagement/Routing.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/Routing.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Routing_Start :
    ID = 16581
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 12), ("Operator", 5)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (12, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Routing_Start.MSG_OFFSET + DeviceManagement_Routing_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Routing_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Routing_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Routing_Start.MSG_OFFSET + DeviceManagement_Routing_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Routing_Start.ID)
            self.hdr.SetDataLength(DeviceManagement_Routing_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Routing.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRoute(self):
        """Route setup or teardown"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPortNumber(self):
        """Port Number"""
        value = (self.GetRoute() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits."""
        value = (self.GetRoute() >> 2) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAction(self):
        """Action. UP = 1, DOWN = 0."""
        value = (self.GetRoute() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address to begin routing."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Start.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRoute(self, value):
        """Route setup or teardown"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPortNumber(self, value):
        """Port Number"""
        tmp = min(max(value, 0), 3)
        self.SetRoute((self.GetRoute() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits."""
        tmp = min(max(value, 0), 31)
        self.SetRoute((self.GetRoute() & ~(0x1f << 2)) | ((tmp & 0x1f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAction(self, value):
        """Action. UP = 1, DOWN = 0."""
        tmp = min(max(value, 0), 1)
        self.SetRoute((self.GetRoute() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address to begin routing."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Start.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Route",type="int",units="",minVal="0",maxVal="255",description="Route setup or teardown",get=GetRoute,set=SetRoute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PortNumber",type="int",units="",minVal="0",maxVal="3",description="Port Number",get=GetPortNumber,set=SetPortNumber, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="31",description="Unused bits.",get=GetUnusedBits,set=SetUnusedBits, enum = []),\
            BitFieldInfo(name="Action",type="int",units="",minVal="0",maxVal="1",description="Action. UP = 1, DOWN = 0.",get=GetAction,set=SetAction, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address to begin routing.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Routing.Start", DeviceManagement_Routing_Start.ID, DeviceManagement_Routing_Start)
#    obj/CodeGenerator/Python/DeviceManagement/Routing.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/Routing.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Routing_Processing :
    ID = 16583
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 12), ("Operator", 7)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (12, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Routing_Processing.MSG_OFFSET + DeviceManagement_Routing_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Routing_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Routing_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Routing_Processing.MSG_OFFSET + DeviceManagement_Routing_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Routing_Processing.ID)
            self.hdr.SetDataLength(DeviceManagement_Routing_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Routing.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRoute(self):
        """Route setup or teardown"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Processing.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPortNumber(self):
        """Port Number"""
        value = (self.GetRoute() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits."""
        value = (self.GetRoute() >> 2) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAction(self):
        """Action. UP = 1, DOWN = 0."""
        value = (self.GetRoute() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address to begin routing."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Processing.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRoute(self, value):
        """Route setup or teardown"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Processing.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPortNumber(self, value):
        """Port Number"""
        tmp = min(max(value, 0), 3)
        self.SetRoute((self.GetRoute() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits."""
        tmp = min(max(value, 0), 31)
        self.SetRoute((self.GetRoute() & ~(0x1f << 2)) | ((tmp & 0x1f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAction(self, value):
        """Action. UP = 1, DOWN = 0."""
        tmp = min(max(value, 0), 1)
        self.SetRoute((self.GetRoute() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address to begin routing."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Processing.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Route",type="int",units="",minVal="0",maxVal="255",description="Route setup or teardown",get=GetRoute,set=SetRoute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PortNumber",type="int",units="",minVal="0",maxVal="3",description="Port Number",get=GetPortNumber,set=SetPortNumber, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="31",description="Unused bits.",get=GetUnusedBits,set=SetUnusedBits, enum = []),\
            BitFieldInfo(name="Action",type="int",units="",minVal="0",maxVal="1",description="Action. UP = 1, DOWN = 0.",get=GetAction,set=SetAction, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address to begin routing.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Routing.Processing", DeviceManagement_Routing_Processing.ID, DeviceManagement_Routing_Processing)
#    obj/CodeGenerator/Python/DeviceManagement/Routing.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/Routing.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Routing_Result :
    ID = 16582
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 12), ("Operator", 6)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (12, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Routing_Result.MSG_OFFSET + DeviceManagement_Routing_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Routing_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Routing_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Routing_Result.MSG_OFFSET + DeviceManagement_Routing_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Routing_Result.ID)
            self.hdr.SetDataLength(DeviceManagement_Routing_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Routing.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRoute(self):
        """Route setup or teardown"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPortNumber(self):
        """Port Number"""
        value = (self.GetRoute() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits."""
        value = (self.GetRoute() >> 2) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAction(self):
        """Action. UP = 1, DOWN = 0."""
        value = (self.GetRoute() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address to begin routing."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Result.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRoute(self, value):
        """Route setup or teardown"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPortNumber(self, value):
        """Port Number"""
        tmp = min(max(value, 0), 3)
        self.SetRoute((self.GetRoute() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits."""
        tmp = min(max(value, 0), 31)
        self.SetRoute((self.GetRoute() & ~(0x1f << 2)) | ((tmp & 0x1f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAction(self, value):
        """Action. UP = 1, DOWN = 0."""
        tmp = min(max(value, 0), 1)
        self.SetRoute((self.GetRoute() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address to begin routing."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Result.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Route",type="int",units="",minVal="0",maxVal="255",description="Route setup or teardown",get=GetRoute,set=SetRoute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PortNumber",type="int",units="",minVal="0",maxVal="3",description="Port Number",get=GetPortNumber,set=SetPortNumber, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="31",description="Unused bits.",get=GetUnusedBits,set=SetUnusedBits, enum = []),\
            BitFieldInfo(name="Action",type="int",units="",minVal="0",maxVal="1",description="Action. UP = 1, DOWN = 0.",get=GetAction,set=SetAction, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address to begin routing.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Routing.Result", DeviceManagement_Routing_Result.ID, DeviceManagement_Routing_Result)
#    obj/CodeGenerator/Python/DeviceManagement/Routing.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/Routing.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_Routing_Error :
    ID = 16580
    SIZE = 9
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 12), ("Operator", 4)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (12, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_Routing_Error.MSG_OFFSET + DeviceManagement_Routing_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_Routing_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_Routing_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_Routing_Error.MSG_OFFSET + DeviceManagement_Routing_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_Routing_Error.ID)
            self.hdr.SetDataLength(DeviceManagement_Routing_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.Routing.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def GetErrorCode(self, idx):
        """Error Code"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetRoute(self):
        """Route setup or teardown"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetPortNumber(self):
        """Port Number"""
        value = (self.GetRoute() >> 0) & 0x3
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits."""
        value = (self.GetRoute() >> 2) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetAction(self):
        """Action. UP = 1, DOWN = 0."""
        value = (self.GetRoute() >> 7) & 0x1
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(6)
    def GetMACAddress(self, idx):
        """MAC address to begin routing."""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 3+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def SetErrorCode(self, value, idx):
        """Error Code"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetRoute(self, value):
        """Route setup or teardown"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('3')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetPortNumber(self, value):
        """Port Number"""
        tmp = min(max(value, 0), 3)
        self.SetRoute((self.GetRoute() & ~(0x3 << 0)) | ((tmp & 0x3) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits."""
        tmp = min(max(value, 0), 31)
        self.SetRoute((self.GetRoute() & ~(0x1f << 2)) | ((tmp & 0x1f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetAction(self, value):
        """Action. UP = 1, DOWN = 0."""
        tmp = min(max(value, 0), 1)
        self.SetRoute((self.GetRoute() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(6)
    def SetMACAddress(self, value, idx):
        """MAC address to begin routing."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_Routing_Error.MSG_OFFSET + 3+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="int",units="",minVal="0",maxVal="255",description="Error Code",get=GetErrorCode,set=SetErrorCode,count=2, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Route",type="int",units="",minVal="0",maxVal="255",description="Route setup or teardown",get=GetRoute,set=SetRoute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PortNumber",type="int",units="",minVal="0",maxVal="3",description="Port Number",get=GetPortNumber,set=SetPortNumber, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="31",description="Unused bits.",get=GetUnusedBits,set=SetUnusedBits, enum = []),\
            BitFieldInfo(name="Action",type="int",units="",minVal="0",maxVal="1",description="Action. UP = 1, DOWN = 0.",get=GetAction,set=SetAction, enum = [])], enum = []),\
        FieldInfo(name="MACAddress",type="int",units="hex",minVal="0",maxVal="255",description="MAC address to begin routing.",get=GetMACAddress,set=SetMACAddress,count=6, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DeviceManagement.Routing.Error", DeviceManagement_Routing_Error.ID, DeviceManagement_Routing_Error)
