#    obj/CodeGenerator/Python/DeviceManagement/P2PMode.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/P2PMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_P2PMode_Get :
    ID = 16561
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_Get.MSG_OFFSET + DeviceManagement_P2PMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_P2PMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_P2PMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_Get.MSG_OFFSET + DeviceManagement_P2PMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_P2PMode_Get.ID)
            self.hdr.SetDataLength(DeviceManagement_P2PMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.P2PMode.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DeviceManagement.P2PMode.Get", DeviceManagement_P2PMode_Get.ID, DeviceManagement_P2PMode_Get)
#    obj/CodeGenerator/Python/DeviceManagement/P2PMode.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/P2PMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_P2PMode_SetGet :
    ID = 16562
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    P2PMode = OrderedDict([("NonP2PConnection", 0), ("MusicP2PSameTypeStereo", 1), ("MusicP2PSameTypeL", 2), ("MusicP2PSameTypeR", 3), ("VoiceP2PSameType", 4), ("VoiceP2POppositeType", 5)])
    ReverseP2PMode = OrderedDict([(0, "NonP2PConnection"), (1, "MusicP2PSameTypeStereo"), (2, "MusicP2PSameTypeL"), (3, "MusicP2PSameTypeR"), (4, "VoiceP2PSameType"), (5, "VoiceP2POppositeType")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 11), ("Operator", 2)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (11, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_SetGet.MSG_OFFSET + DeviceManagement_P2PMode_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_P2PMode_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_P2PMode_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_SetGet.MSG_OFFSET + DeviceManagement_P2PMode_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_P2PMode_SetGet.ID)
            self.hdr.SetDataLength(DeviceManagement_P2PMode_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.P2PMode.SetGet"
    # Accessors
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetP2PMode(self, enumAsInt=0):
        """P2PMode"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_P2PMode_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = DeviceManagement_P2PMode_SetGet.ReverseP2PMode.get(value, value)
        return value
    
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetP2PMode(self, value):
        """P2PMode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_P2PMode_SetGet.P2PMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_P2PMode_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="P2PMode",type="enumeration",units="P2PMode",minVal="0",maxVal="255",description="P2PMode",get=GetP2PMode,set=SetP2PMode,count=1, bitfieldInfo = [], enum = [P2PMode, ReverseP2PMode])\
    ]

Messaging.Register("DeviceManagement.P2PMode.SetGet", DeviceManagement_P2PMode_SetGet.ID, DeviceManagement_P2PMode_SetGet)
#    obj/CodeGenerator/Python/DeviceManagement/P2PMode.py
#    Created 27/07/2023 at 10:10:24 from:
#        Messages = messages/DeviceManagement/P2PMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DeviceManagement_P2PMode_Status :
    ID = 16563
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    P2PMode = OrderedDict([("NonP2PConnection", 0), ("MusicP2PSameTypeStereo", 1), ("MusicP2PSameTypeL", 2), ("MusicP2PSameTypeR", 3), ("VoiceP2PSameType", 4), ("VoiceP2POppositeType", 5)])
    ReverseP2PMode = OrderedDict([(0, "NonP2PConnection"), (1, "MusicP2PSameTypeStereo"), (2, "MusicP2PSameTypeL"), (3, "MusicP2PSameTypeR"), (4, "VoiceP2PSameType"), (5, "VoiceP2POppositeType")])
    IDs = OrderedDict([("FunctionBlock", 4), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(4, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_Status.MSG_OFFSET + DeviceManagement_P2PMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DeviceManagement_P2PMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DeviceManagement_P2PMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DeviceManagement_P2PMode_Status.MSG_OFFSET + DeviceManagement_P2PMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DeviceManagement_P2PMode_Status.ID)
            self.hdr.SetDataLength(DeviceManagement_P2PMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DeviceManagement.P2PMode.Status"
    # Accessors
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetP2PMode(self, enumAsInt=0):
        """P2PMode"""
        value = struct.unpack_from('B', self.rawBuffer(), DeviceManagement_P2PMode_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = DeviceManagement_P2PMode_Status.ReverseP2PMode.get(value, value)
        return value
    
    @msg.units('P2PMode')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetP2PMode(self, value):
        """P2PMode"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DeviceManagement_P2PMode_Status.P2PMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DeviceManagement_P2PMode_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="P2PMode",type="enumeration",units="P2PMode",minVal="0",maxVal="255",description="P2PMode",get=GetP2PMode,set=SetP2PMode,count=1, bitfieldInfo = [], enum = [P2PMode, ReverseP2PMode])\
    ]

Messaging.Register("DeviceManagement.P2PMode.Status", DeviceManagement_P2PMode_Status.ID, DeviceManagement_P2PMode_Status)
