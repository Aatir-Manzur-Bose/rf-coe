#    obj/CodeGenerator/Python/WiFi/GetSecurityType.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSecurityType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSecurityType_Start :
    ID = 69701
    SIZE = 32
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 4), ("Operator", 5)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (4, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Start.MSG_OFFSET + WiFi_GetSecurityType_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSecurityType_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSecurityType_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Start.MSG_OFFSET + WiFi_GetSecurityType_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSecurityType_Start.ID)
            self.hdr.SetDataLength(WiFi_GetSecurityType_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSecurityType.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def GetSSID(self, idx):
        """Network name"""
        value = struct.unpack_from('B', self.rawBuffer(), WiFi_GetSecurityType_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def SetSSID(self, value, idx):
        """Network name"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), WiFi_GetSecurityType_Start.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SSID",type="int",units="",minVal="0",maxVal="255",description="Network name",get=GetSSID,set=SetSSID,count=32, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("WiFi.GetSecurityType.Start", WiFi_GetSecurityType_Start.ID, WiFi_GetSecurityType_Start)
#    obj/CodeGenerator/Python/WiFi/GetSecurityType.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSecurityType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSecurityType_Processing :
    ID = 69703
    SIZE = 32
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 4), ("Operator", 7)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (4, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Processing.MSG_OFFSET + WiFi_GetSecurityType_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSecurityType_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSecurityType_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Processing.MSG_OFFSET + WiFi_GetSecurityType_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSecurityType_Processing.ID)
            self.hdr.SetDataLength(WiFi_GetSecurityType_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSecurityType.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def GetSSID(self, idx):
        """Network name"""
        value = struct.unpack_from('B', self.rawBuffer(), WiFi_GetSecurityType_Processing.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def SetSSID(self, value, idx):
        """Network name"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), WiFi_GetSecurityType_Processing.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SSID",type="int",units="",minVal="0",maxVal="255",description="Network name",get=GetSSID,set=SetSSID,count=32, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("WiFi.GetSecurityType.Processing", WiFi_GetSecurityType_Processing.ID, WiFi_GetSecurityType_Processing)
#    obj/CodeGenerator/Python/WiFi/GetSecurityType.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSecurityType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSecurityType_Status :
    ID = 69699
    SIZE = 33
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Status.MSG_OFFSET + WiFi_GetSecurityType_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSecurityType_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSecurityType_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Status.MSG_OFFSET + WiFi_GetSecurityType_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSecurityType_Status.ID)
            self.hdr.SetDataLength(WiFi_GetSecurityType_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSecurityType.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def GetSSID(self, idx):
        """Network name"""
        value = struct.unpack_from('B', self.rawBuffer(), WiFi_GetSecurityType_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(1)
    def GetWiFiFlags(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), WiFi_GetSecurityType_Status.MSG_OFFSET + 32)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def GetWiFiSecurityType(self):
        """Network security type"""
        value = (self.GetWiFiFlags() >> 0) & 0xf
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def GetWiFiCanConnect(self):
        """Product can connect to this network (already configured)"""
        value = (self.GetWiFiFlags() >> 4) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def GetWiFiIsConnected(self):
        """Product is currently connected to this network"""
        value = (self.GetWiFiFlags() >> 5) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def GetWiFiIsEnterprise(self):
        """Network uses Enterprise security"""
        value = (self.GetWiFiFlags() >> 6) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bit"""
        value = (self.GetWiFiFlags() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(32)
    def SetSSID(self, value, idx):
        """Network name"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), WiFi_GetSecurityType_Status.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(1)
    def SetWiFiFlags(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), WiFi_GetSecurityType_Status.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def SetWiFiSecurityType(self, value):
        """Network security type"""
        tmp = min(max(value, 0), 15)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0xf << 0)) | ((tmp & 0xf) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def SetWiFiCanConnect(self, value):
        """Product can connect to this network (already configured)"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def SetWiFiIsConnected(self, value):
        """Product is currently connected to this network"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 5)) | ((tmp & 0x1) << 5))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def SetWiFiIsEnterprise(self, value):
        """Network uses Enterprise security"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('32')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bit"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SSID",type="int",units="",minVal="0",maxVal="255",description="Network name",get=GetSSID,set=SetSSID,count=32, bitfieldInfo = [], enum = []),\
        FieldInfo(name="WiFiFlags",type="int",units="",minVal="0",maxVal="255",description="",get=GetWiFiFlags,set=SetWiFiFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="WiFiSecurityType",type="int",units="",minVal="0",maxVal="15",description="Network security type",get=GetWiFiSecurityType,set=SetWiFiSecurityType, enum = []),\
            BitFieldInfo(name="WiFiCanConnect",type="int",units="Boolean",minVal="0",maxVal="1",description="Product can connect to this network (already configured)",get=GetWiFiCanConnect,set=SetWiFiCanConnect, enum = []),\
            BitFieldInfo(name="WiFiIsConnected",type="int",units="Boolean",minVal="0",maxVal="1",description="Product is currently connected to this network",get=GetWiFiIsConnected,set=SetWiFiIsConnected, enum = []),\
            BitFieldInfo(name="WiFiIsEnterprise",type="int",units="Boolean",minVal="0",maxVal="1",description="Network uses Enterprise security",get=GetWiFiIsEnterprise,set=SetWiFiIsEnterprise, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="1",description="Unused bit",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("WiFi.GetSecurityType.Status", WiFi_GetSecurityType_Status.ID, WiFi_GetSecurityType_Status)
#    obj/CodeGenerator/Python/WiFi/GetSecurityType.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSecurityType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSecurityType_Result :
    ID = 69702
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 4), ("Operator", 6)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (4, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Result.MSG_OFFSET + WiFi_GetSecurityType_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSecurityType_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSecurityType_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSecurityType_Result.MSG_OFFSET + WiFi_GetSecurityType_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSecurityType_Result.ID)
            self.hdr.SetDataLength(WiFi_GetSecurityType_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSecurityType.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("WiFi.GetSecurityType.Result", WiFi_GetSecurityType_Result.ID, WiFi_GetSecurityType_Result)
