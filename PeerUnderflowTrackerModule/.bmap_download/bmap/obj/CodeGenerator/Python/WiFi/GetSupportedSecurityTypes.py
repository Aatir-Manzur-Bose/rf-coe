#    obj/CodeGenerator/Python/WiFi/GetSupportedSecurityTypes.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSupportedSecurityTypes.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSupportedSecurityTypes_Get :
    ID = 69745
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSupportedSecurityTypes_Get.MSG_OFFSET + WiFi_GetSupportedSecurityTypes_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSupportedSecurityTypes_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSupportedSecurityTypes_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSupportedSecurityTypes_Get.MSG_OFFSET + WiFi_GetSupportedSecurityTypes_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSupportedSecurityTypes_Get.ID)
            self.hdr.SetDataLength(WiFi_GetSupportedSecurityTypes_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSupportedSecurityTypes.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("WiFi.GetSupportedSecurityTypes.Get", WiFi_GetSupportedSecurityTypes_Get.ID, WiFi_GetSupportedSecurityTypes_Get)
#    obj/CodeGenerator/Python/WiFi/GetSupportedSecurityTypes.py
#    Created 27/07/2023 at 10:11:19 from:
#        Messages = messages/WiFi/GetSupportedSecurityTypes.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class WiFi_GetSupportedSecurityTypes_Status :
    ID = 69747
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 17), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(17, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(WiFi_GetSupportedSecurityTypes_Status.MSG_OFFSET + WiFi_GetSupportedSecurityTypes_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, WiFi_GetSupportedSecurityTypes_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, WiFi_GetSupportedSecurityTypes_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(WiFi_GetSupportedSecurityTypes_Status.MSG_OFFSET + WiFi_GetSupportedSecurityTypes_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(WiFi_GetSupportedSecurityTypes_Status.ID)
            self.hdr.SetDataLength(WiFi_GetSupportedSecurityTypes_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "WiFi.GetSupportedSecurityTypes.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetWiFiFlags(self):
        """Bitfield of supported Wi-Fi security types."""
        value = struct.unpack_from('B', self.rawBuffer(), WiFi_GetSupportedSecurityTypes_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWEPSupported(self):
        """True if WEP security type is supported"""
        value = (self.GetWiFiFlags() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWPASupported(self):
        """True if WPA security type is supported"""
        value = (self.GetWiFiFlags() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWPA2Supported(self):
        """True if WPA2 security type is supported"""
        value = (self.GetWiFiFlags() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetWPA3Supported(self):
        """True if WPA3 security type is supported"""
        value = (self.GetWiFiFlags() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Reserved"""
        value = (self.GetWiFiFlags() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetWiFiFlags(self, value):
        """Bitfield of supported Wi-Fi security types."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), WiFi_GetSupportedSecurityTypes_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWEPSupported(self, value):
        """True if WEP security type is supported"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWPASupported(self, value):
        """True if WPA security type is supported"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWPA2Supported(self, value):
        """True if WPA2 security type is supported"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetWPA3Supported(self, value):
        """True if WPA3 security type is supported"""
        tmp = min(max(value, 0), 1)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 15)
        self.SetWiFiFlags((self.GetWiFiFlags() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="WiFiFlags",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported Wi-Fi security types.",get=GetWiFiFlags,set=SetWiFiFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="WEPSupported",type="int",units="Boolean",minVal="0",maxVal="1",description="True if WEP security type is supported",get=GetWEPSupported,set=SetWEPSupported, enum = []),\
            BitFieldInfo(name="WPASupported",type="int",units="Boolean",minVal="0",maxVal="1",description="True if WPA security type is supported",get=GetWPASupported,set=SetWPASupported, enum = []),\
            BitFieldInfo(name="WPA2Supported",type="int",units="Boolean",minVal="0",maxVal="1",description="True if WPA2 security type is supported",get=GetWPA2Supported,set=SetWPA2Supported, enum = []),\
            BitFieldInfo(name="WPA3Supported",type="int",units="Boolean",minVal="0",maxVal="1",description="True if WPA3 security type is supported",get=GetWPA3Supported,set=SetWPA3Supported, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="15",description="Reserved",get=GetReserved,set=SetReserved, enum = [])], enum = [])\
    ]

Messaging.Register("WiFi.GetSupportedSecurityTypes.Status", WiFi_GetSupportedSecurityTypes_Status.ID, WiFi_GetSupportedSecurityTypes_Status)
