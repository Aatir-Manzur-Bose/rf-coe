#    obj/CodeGenerator/Python/AudioManagement/ChannelParameterCapabilities.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/ChannelParameterCapabilities.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ChannelParameterCapabilities_Get :
    ID = 20705
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 14), ("Operator", 1)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (14, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ChannelParameterCapabilities_Get.MSG_OFFSET + AudioManagement_ChannelParameterCapabilities_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ChannelParameterCapabilities_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ChannelParameterCapabilities_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ChannelParameterCapabilities_Get.MSG_OFFSET + AudioManagement_ChannelParameterCapabilities_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ChannelParameterCapabilities_Get.ID)
            self.hdr.SetDataLength(AudioManagement_ChannelParameterCapabilities_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ChannelParameterCapabilities.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.ChannelParameterCapabilities.Get", AudioManagement_ChannelParameterCapabilities_Get.ID, AudioManagement_ChannelParameterCapabilities_Get)
#    obj/CodeGenerator/Python/AudioManagement/ChannelParameterCapabilities.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/ChannelParameterCapabilities.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ChannelParameterCapabilities_Status :
    ID = 20707
    SIZE = 14
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 14), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (14, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + AudioManagement_ChannelParameterCapabilities_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ChannelParameterCapabilities_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ChannelParameterCapabilities_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + AudioManagement_ChannelParameterCapabilities_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ChannelParameterCapabilities_Status.ID)
            self.hdr.SetDataLength(AudioManagement_ChannelParameterCapabilities_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ChannelParameterCapabilities.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetVolume(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeGlobal(self):
        """Volume support on global channel"""
        value = (self.GetVolume() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeChannel1(self):
        """Volume support on channel 1"""
        value = (self.GetVolume() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeChannel2(self):
        """Volume support on channel 2"""
        value = (self.GetVolume() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeChannel3(self):
        """Volume support on channel 3"""
        value = (self.GetVolume() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeUnused(self):
        """Unused"""
        value = (self.GetVolume() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetTreble(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTrebleGlobal(self):
        """Treble support on global channel"""
        value = (self.GetTreble() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTrebleChannel1(self):
        """Treble support on channel 1"""
        value = (self.GetTreble() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTrebleChannel2(self):
        """Treble support on channel 2"""
        value = (self.GetTreble() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTrebleChannel3(self):
        """Treble support on channel 3"""
        value = (self.GetTreble() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetTrebleUnused(self):
        """Unused"""
        value = (self.GetTreble() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetBass(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetBassGlobal(self):
        """Bass support on global channel"""
        value = (self.GetBass() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetBassChannel1(self):
        """Bass support on channel 1"""
        value = (self.GetBass() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetBassChannel2(self):
        """Bass support on channel 2"""
        value = (self.GetBass() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetBassChannel3(self):
        """Bass support on channel 3"""
        value = (self.GetBass() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetBassUnused(self):
        """Unused"""
        value = (self.GetBass() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetReverb(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReverbGlobal(self):
        """Reverb support on global channel"""
        value = (self.GetReverb() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReverbChannel1(self):
        """Reverb support on channel 1"""
        value = (self.GetReverb() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReverbChannel2(self):
        """Reverb support on channel 2"""
        value = (self.GetReverb() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReverbChannel3(self):
        """Reverb support on channel 3"""
        value = (self.GetReverb() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def GetReverbUnused(self):
        """Unused"""
        value = (self.GetReverb() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetMute(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetMuteGlobal(self):
        """Mute support on global channel"""
        value = (self.GetMute() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetMuteChannel1(self):
        """Mute support on channel 1"""
        value = (self.GetMute() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetMuteChannel2(self):
        """Mute support on channel 2"""
        value = (self.GetMute() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetMuteChannel3(self):
        """Mute support on channel 3"""
        value = (self.GetMute() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetMuteUnused(self):
        """Unused"""
        value = (self.GetMute() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetReverbMute(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def GetReverbMuteGlobal(self):
        """Reverb Mute support on global channel"""
        value = (self.GetReverbMute() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def GetReverbMuteChannel1(self):
        """Reverb Mute support on channel 1"""
        value = (self.GetReverbMute() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def GetReverbMuteChannel2(self):
        """Reverb Mute support on channel 2"""
        value = (self.GetReverbMute() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def GetReverbMuteChannel3(self):
        """Reverb Mute support on channel 3"""
        value = (self.GetReverbMute() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def GetReverbMuteUnused(self):
        """Unused"""
        value = (self.GetReverbMute() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetEQPreset(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetEQPresetGlobal(self):
        """EQ Preset support on global channel"""
        value = (self.GetEQPreset() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetEQPresetChannel1(self):
        """EQ Preset support on channel 1"""
        value = (self.GetEQPreset() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetEQPresetChannel2(self):
        """EQ Preset support on channel 2"""
        value = (self.GetEQPreset() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetEQPresetChannel3(self):
        """EQ Preset support on channel 3"""
        value = (self.GetEQPreset() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def GetEQPresetUnused(self):
        """Unused"""
        value = (self.GetEQPreset() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetPhantomPower(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetPhantomPowerGlobal(self):
        """Phantom Power support on global channel"""
        value = (self.GetPhantomPower() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetPhantomPowerChannel1(self):
        """Phantom Power support on channel 1"""
        value = (self.GetPhantomPower() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetPhantomPowerChannel2(self):
        """Phantom Power support on channel 2"""
        value = (self.GetPhantomPower() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetPhantomPowerChannel3(self):
        """Phantom Power support on channel 3"""
        value = (self.GetPhantomPower() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def GetPhantomPowerUnused(self):
        """Unused"""
        value = (self.GetPhantomPower() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetHouseCurve(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetHouseCurveGlobal(self):
        """House Curve support on global channel"""
        value = (self.GetHouseCurve() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetHouseCurveChannel1(self):
        """House Curve support on channel 1"""
        value = (self.GetHouseCurve() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetHouseCurveChannel2(self):
        """House Curve support on channel 2"""
        value = (self.GetHouseCurve() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetHouseCurveChannel3(self):
        """House Curve support on channel 3"""
        value = (self.GetHouseCurve() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def GetHouseCurveUnused(self):
        """Unused"""
        value = (self.GetHouseCurve() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetEffectsInsert(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def GetEffectsInsertGlobal(self):
        """Effects Insert support on global channel"""
        value = (self.GetEffectsInsert() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def GetEffectsInsertChannel1(self):
        """Effects Insert support on channel 1"""
        value = (self.GetEffectsInsert() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def GetEffectsInsertChannel2(self):
        """Effects Insert support on channel 2"""
        value = (self.GetEffectsInsert() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def GetEffectsInsertChannel3(self):
        """Effects Insert support on channel 3"""
        value = (self.GetEffectsInsert() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def GetEffectsInsertUnused(self):
        """Unused"""
        value = (self.GetEffectsInsert() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetRFWireless(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def GetRFWirelessGlobal(self):
        """RF Wireless support on global channel"""
        value = (self.GetRFWireless() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def GetRFWirelessChannel1(self):
        """RF Wireless support on channel 1"""
        value = (self.GetRFWireless() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def GetRFWirelessChannel2(self):
        """RF Wireless support on channel 2"""
        value = (self.GetRFWireless() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def GetRFWirelessChannel3(self):
        """RF Wireless support on channel 3"""
        value = (self.GetRFWireless() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def GetRFWirelessUnused(self):
        """Unused"""
        value = (self.GetRFWireless() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetPositionEQ(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def GetPositionEQGlobal(self):
        """Position EQ support on global channel"""
        value = (self.GetPositionEQ() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def GetPositionEQChannel1(self):
        """Position EQ support on channel 1"""
        value = (self.GetPositionEQ() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def GetPositionEQChannel2(self):
        """Position EQ support on channel 2"""
        value = (self.GetPositionEQ() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def GetPositionEQChannel3(self):
        """Position EQ support on channel 3"""
        value = (self.GetPositionEQ() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def GetPositionEQUnused(self):
        """Unused"""
        value = (self.GetPositionEQ() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def GetLivestreamMode(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def GetLivestreamModeGlobal(self):
        """Livestream Mode support on global channel"""
        value = (self.GetLivestreamMode() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def GetLivestreamModeChannel1(self):
        """Livestream Mode support on channel 1"""
        value = (self.GetLivestreamMode() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def GetLivestreamModeChannel2(self):
        """Livestream Mode support on channel 2"""
        value = (self.GetLivestreamMode() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def GetLivestreamModeChannel3(self):
        """Livestream Mode support on channel 3"""
        value = (self.GetLivestreamMode() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def GetLivestreamModeUnused(self):
        """Unused"""
        value = (self.GetLivestreamMode() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def GetSubEQ(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetSubEQGlobal(self):
        """Sub EQ support on global channel"""
        value = (self.GetSubEQ() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetSubEQChannel1(self):
        """Sub EQ support on channel 1"""
        value = (self.GetSubEQ() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetSubEQChannel2(self):
        """Sub EQ support on channel 2"""
        value = (self.GetSubEQ() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetSubEQChannel3(self):
        """Sub EQ support on channel 3"""
        value = (self.GetSubEQ() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetSubEQUnused(self):
        """Unused"""
        value = (self.GetSubEQ() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetVolume(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeGlobal(self, value):
        """Volume support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetVolume((self.GetVolume() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeChannel1(self, value):
        """Volume support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetVolume((self.GetVolume() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeChannel2(self, value):
        """Volume support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetVolume((self.GetVolume() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeChannel3(self, value):
        """Volume support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetVolume((self.GetVolume() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetVolume((self.GetVolume() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetTreble(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTrebleGlobal(self, value):
        """Treble support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetTreble((self.GetTreble() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTrebleChannel1(self, value):
        """Treble support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetTreble((self.GetTreble() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTrebleChannel2(self, value):
        """Treble support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetTreble((self.GetTreble() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTrebleChannel3(self, value):
        """Treble support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetTreble((self.GetTreble() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetTrebleUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetTreble((self.GetTreble() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetBass(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetBassGlobal(self, value):
        """Bass support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetBass((self.GetBass() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetBassChannel1(self, value):
        """Bass support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetBass((self.GetBass() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetBassChannel2(self, value):
        """Bass support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetBass((self.GetBass() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetBassChannel3(self, value):
        """Bass support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetBass((self.GetBass() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetBassUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetBass((self.GetBass() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetReverb(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReverbGlobal(self, value):
        """Reverb support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetReverb((self.GetReverb() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReverbChannel1(self, value):
        """Reverb support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetReverb((self.GetReverb() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReverbChannel2(self, value):
        """Reverb support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetReverb((self.GetReverb() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReverbChannel3(self, value):
        """Reverb support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetReverb((self.GetReverb() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('3')
    @msg.size('0')
    @msg.count(1)
    def SetReverbUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetReverb((self.GetReverb() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetMute(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetMuteGlobal(self, value):
        """Mute support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetMute((self.GetMute() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetMuteChannel1(self, value):
        """Mute support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetMute((self.GetMute() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetMuteChannel2(self, value):
        """Mute support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetMute((self.GetMute() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetMuteChannel3(self, value):
        """Mute support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetMute((self.GetMute() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetMuteUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetMute((self.GetMute() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetReverbMute(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def SetReverbMuteGlobal(self, value):
        """Reverb Mute support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetReverbMute((self.GetReverbMute() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def SetReverbMuteChannel1(self, value):
        """Reverb Mute support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetReverbMute((self.GetReverbMute() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def SetReverbMuteChannel2(self, value):
        """Reverb Mute support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetReverbMute((self.GetReverbMute() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def SetReverbMuteChannel3(self, value):
        """Reverb Mute support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetReverbMute((self.GetReverbMute() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('5')
    @msg.size('0')
    @msg.count(1)
    def SetReverbMuteUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetReverbMute((self.GetReverbMute() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetEQPreset(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetEQPresetGlobal(self, value):
        """EQ Preset support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetEQPreset((self.GetEQPreset() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetEQPresetChannel1(self, value):
        """EQ Preset support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetEQPreset((self.GetEQPreset() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetEQPresetChannel2(self, value):
        """EQ Preset support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetEQPreset((self.GetEQPreset() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetEQPresetChannel3(self, value):
        """EQ Preset support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetEQPreset((self.GetEQPreset() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('6')
    @msg.size('0')
    @msg.count(1)
    def SetEQPresetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetEQPreset((self.GetEQPreset() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetPhantomPower(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetPhantomPowerGlobal(self, value):
        """Phantom Power support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetPhantomPower((self.GetPhantomPower() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetPhantomPowerChannel1(self, value):
        """Phantom Power support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetPhantomPower((self.GetPhantomPower() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetPhantomPowerChannel2(self, value):
        """Phantom Power support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetPhantomPower((self.GetPhantomPower() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetPhantomPowerChannel3(self, value):
        """Phantom Power support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetPhantomPower((self.GetPhantomPower() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('7')
    @msg.size('0')
    @msg.count(1)
    def SetPhantomPowerUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetPhantomPower((self.GetPhantomPower() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetHouseCurve(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetHouseCurveGlobal(self, value):
        """House Curve support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetHouseCurve((self.GetHouseCurve() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetHouseCurveChannel1(self, value):
        """House Curve support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetHouseCurve((self.GetHouseCurve() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetHouseCurveChannel2(self, value):
        """House Curve support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetHouseCurve((self.GetHouseCurve() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetHouseCurveChannel3(self, value):
        """House Curve support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetHouseCurve((self.GetHouseCurve() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('8')
    @msg.size('0')
    @msg.count(1)
    def SetHouseCurveUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetHouseCurve((self.GetHouseCurve() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetEffectsInsert(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def SetEffectsInsertGlobal(self, value):
        """Effects Insert support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetEffectsInsert((self.GetEffectsInsert() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def SetEffectsInsertChannel1(self, value):
        """Effects Insert support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetEffectsInsert((self.GetEffectsInsert() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def SetEffectsInsertChannel2(self, value):
        """Effects Insert support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetEffectsInsert((self.GetEffectsInsert() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def SetEffectsInsertChannel3(self, value):
        """Effects Insert support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetEffectsInsert((self.GetEffectsInsert() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('9')
    @msg.size('0')
    @msg.count(1)
    def SetEffectsInsertUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetEffectsInsert((self.GetEffectsInsert() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetRFWireless(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def SetRFWirelessGlobal(self, value):
        """RF Wireless support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetRFWireless((self.GetRFWireless() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def SetRFWirelessChannel1(self, value):
        """RF Wireless support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetRFWireless((self.GetRFWireless() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def SetRFWirelessChannel2(self, value):
        """RF Wireless support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetRFWireless((self.GetRFWireless() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def SetRFWirelessChannel3(self, value):
        """RF Wireless support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetRFWireless((self.GetRFWireless() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('10')
    @msg.size('0')
    @msg.count(1)
    def SetRFWirelessUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetRFWireless((self.GetRFWireless() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetPositionEQ(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def SetPositionEQGlobal(self, value):
        """Position EQ support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetPositionEQ((self.GetPositionEQ() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def SetPositionEQChannel1(self, value):
        """Position EQ support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetPositionEQ((self.GetPositionEQ() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def SetPositionEQChannel2(self, value):
        """Position EQ support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetPositionEQ((self.GetPositionEQ() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def SetPositionEQChannel3(self, value):
        """Position EQ support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetPositionEQ((self.GetPositionEQ() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('11')
    @msg.size('0')
    @msg.count(1)
    def SetPositionEQUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetPositionEQ((self.GetPositionEQ() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('12')
    @msg.size('1')
    @msg.count(1)
    def SetLivestreamMode(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def SetLivestreamModeGlobal(self, value):
        """Livestream Mode support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetLivestreamMode((self.GetLivestreamMode() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def SetLivestreamModeChannel1(self, value):
        """Livestream Mode support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetLivestreamMode((self.GetLivestreamMode() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def SetLivestreamModeChannel2(self, value):
        """Livestream Mode support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetLivestreamMode((self.GetLivestreamMode() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def SetLivestreamModeChannel3(self, value):
        """Livestream Mode support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetLivestreamMode((self.GetLivestreamMode() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('12')
    @msg.size('0')
    @msg.count(1)
    def SetLivestreamModeUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetLivestreamMode((self.GetLivestreamMode() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def SetSubEQ(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameterCapabilities_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetSubEQGlobal(self, value):
        """Sub EQ support on global channel"""
        tmp = min(max(value, 0), 1)
        self.SetSubEQ((self.GetSubEQ() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetSubEQChannel1(self, value):
        """Sub EQ support on channel 1"""
        tmp = min(max(value, 0), 1)
        self.SetSubEQ((self.GetSubEQ() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetSubEQChannel2(self, value):
        """Sub EQ support on channel 2"""
        tmp = min(max(value, 0), 1)
        self.SetSubEQ((self.GetSubEQ() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetSubEQChannel3(self, value):
        """Sub EQ support on channel 3"""
        tmp = min(max(value, 0), 1)
        self.SetSubEQ((self.GetSubEQ() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetSubEQUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetSubEQ((self.GetSubEQ() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Volume",type="int",units="",minVal="0",maxVal="255",description="",get=GetVolume,set=SetVolume,count=1, bitfieldInfo = [\
            BitFieldInfo(name="VolumeGlobal",type="int",units="",minVal="0",maxVal="1",description="Volume support on global channel",get=GetVolumeGlobal,set=SetVolumeGlobal, enum = []),\
            BitFieldInfo(name="VolumeChannel1",type="int",units="",minVal="0",maxVal="1",description="Volume support on channel 1",get=GetVolumeChannel1,set=SetVolumeChannel1, enum = []),\
            BitFieldInfo(name="VolumeChannel2",type="int",units="",minVal="0",maxVal="1",description="Volume support on channel 2",get=GetVolumeChannel2,set=SetVolumeChannel2, enum = []),\
            BitFieldInfo(name="VolumeChannel3",type="int",units="",minVal="0",maxVal="1",description="Volume support on channel 3",get=GetVolumeChannel3,set=SetVolumeChannel3, enum = []),\
            BitFieldInfo(name="VolumeUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetVolumeUnused,set=SetVolumeUnused, enum = [])], enum = []),\
        FieldInfo(name="Treble",type="int",units="",minVal="0",maxVal="255",description="",get=GetTreble,set=SetTreble,count=1, bitfieldInfo = [\
            BitFieldInfo(name="TrebleGlobal",type="int",units="",minVal="0",maxVal="1",description="Treble support on global channel",get=GetTrebleGlobal,set=SetTrebleGlobal, enum = []),\
            BitFieldInfo(name="TrebleChannel1",type="int",units="",minVal="0",maxVal="1",description="Treble support on channel 1",get=GetTrebleChannel1,set=SetTrebleChannel1, enum = []),\
            BitFieldInfo(name="TrebleChannel2",type="int",units="",minVal="0",maxVal="1",description="Treble support on channel 2",get=GetTrebleChannel2,set=SetTrebleChannel2, enum = []),\
            BitFieldInfo(name="TrebleChannel3",type="int",units="",minVal="0",maxVal="1",description="Treble support on channel 3",get=GetTrebleChannel3,set=SetTrebleChannel3, enum = []),\
            BitFieldInfo(name="TrebleUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetTrebleUnused,set=SetTrebleUnused, enum = [])], enum = []),\
        FieldInfo(name="Bass",type="int",units="",minVal="0",maxVal="255",description="",get=GetBass,set=SetBass,count=1, bitfieldInfo = [\
            BitFieldInfo(name="BassGlobal",type="int",units="",minVal="0",maxVal="1",description="Bass support on global channel",get=GetBassGlobal,set=SetBassGlobal, enum = []),\
            BitFieldInfo(name="BassChannel1",type="int",units="",minVal="0",maxVal="1",description="Bass support on channel 1",get=GetBassChannel1,set=SetBassChannel1, enum = []),\
            BitFieldInfo(name="BassChannel2",type="int",units="",minVal="0",maxVal="1",description="Bass support on channel 2",get=GetBassChannel2,set=SetBassChannel2, enum = []),\
            BitFieldInfo(name="BassChannel3",type="int",units="",minVal="0",maxVal="1",description="Bass support on channel 3",get=GetBassChannel3,set=SetBassChannel3, enum = []),\
            BitFieldInfo(name="BassUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetBassUnused,set=SetBassUnused, enum = [])], enum = []),\
        FieldInfo(name="Reverb",type="int",units="",minVal="0",maxVal="255",description="",get=GetReverb,set=SetReverb,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ReverbGlobal",type="int",units="",minVal="0",maxVal="1",description="Reverb support on global channel",get=GetReverbGlobal,set=SetReverbGlobal, enum = []),\
            BitFieldInfo(name="ReverbChannel1",type="int",units="",minVal="0",maxVal="1",description="Reverb support on channel 1",get=GetReverbChannel1,set=SetReverbChannel1, enum = []),\
            BitFieldInfo(name="ReverbChannel2",type="int",units="",minVal="0",maxVal="1",description="Reverb support on channel 2",get=GetReverbChannel2,set=SetReverbChannel2, enum = []),\
            BitFieldInfo(name="ReverbChannel3",type="int",units="",minVal="0",maxVal="1",description="Reverb support on channel 3",get=GetReverbChannel3,set=SetReverbChannel3, enum = []),\
            BitFieldInfo(name="ReverbUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetReverbUnused,set=SetReverbUnused, enum = [])], enum = []),\
        FieldInfo(name="Mute",type="int",units="",minVal="0",maxVal="255",description="",get=GetMute,set=SetMute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="MuteGlobal",type="int",units="",minVal="0",maxVal="1",description="Mute support on global channel",get=GetMuteGlobal,set=SetMuteGlobal, enum = []),\
            BitFieldInfo(name="MuteChannel1",type="int",units="",minVal="0",maxVal="1",description="Mute support on channel 1",get=GetMuteChannel1,set=SetMuteChannel1, enum = []),\
            BitFieldInfo(name="MuteChannel2",type="int",units="",minVal="0",maxVal="1",description="Mute support on channel 2",get=GetMuteChannel2,set=SetMuteChannel2, enum = []),\
            BitFieldInfo(name="MuteChannel3",type="int",units="",minVal="0",maxVal="1",description="Mute support on channel 3",get=GetMuteChannel3,set=SetMuteChannel3, enum = []),\
            BitFieldInfo(name="MuteUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetMuteUnused,set=SetMuteUnused, enum = [])], enum = []),\
        FieldInfo(name="ReverbMute",type="int",units="",minVal="0",maxVal="255",description="",get=GetReverbMute,set=SetReverbMute,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ReverbMuteGlobal",type="int",units="",minVal="0",maxVal="1",description="Reverb Mute support on global channel",get=GetReverbMuteGlobal,set=SetReverbMuteGlobal, enum = []),\
            BitFieldInfo(name="ReverbMuteChannel1",type="int",units="",minVal="0",maxVal="1",description="Reverb Mute support on channel 1",get=GetReverbMuteChannel1,set=SetReverbMuteChannel1, enum = []),\
            BitFieldInfo(name="ReverbMuteChannel2",type="int",units="",minVal="0",maxVal="1",description="Reverb Mute support on channel 2",get=GetReverbMuteChannel2,set=SetReverbMuteChannel2, enum = []),\
            BitFieldInfo(name="ReverbMuteChannel3",type="int",units="",minVal="0",maxVal="1",description="Reverb Mute support on channel 3",get=GetReverbMuteChannel3,set=SetReverbMuteChannel3, enum = []),\
            BitFieldInfo(name="ReverbMuteUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetReverbMuteUnused,set=SetReverbMuteUnused, enum = [])], enum = []),\
        FieldInfo(name="EQPreset",type="int",units="",minVal="0",maxVal="255",description="",get=GetEQPreset,set=SetEQPreset,count=1, bitfieldInfo = [\
            BitFieldInfo(name="EQPresetGlobal",type="int",units="",minVal="0",maxVal="1",description="EQ Preset support on global channel",get=GetEQPresetGlobal,set=SetEQPresetGlobal, enum = []),\
            BitFieldInfo(name="EQPresetChannel1",type="int",units="",minVal="0",maxVal="1",description="EQ Preset support on channel 1",get=GetEQPresetChannel1,set=SetEQPresetChannel1, enum = []),\
            BitFieldInfo(name="EQPresetChannel2",type="int",units="",minVal="0",maxVal="1",description="EQ Preset support on channel 2",get=GetEQPresetChannel2,set=SetEQPresetChannel2, enum = []),\
            BitFieldInfo(name="EQPresetChannel3",type="int",units="",minVal="0",maxVal="1",description="EQ Preset support on channel 3",get=GetEQPresetChannel3,set=SetEQPresetChannel3, enum = []),\
            BitFieldInfo(name="EQPresetUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetEQPresetUnused,set=SetEQPresetUnused, enum = [])], enum = []),\
        FieldInfo(name="PhantomPower",type="int",units="",minVal="0",maxVal="255",description="",get=GetPhantomPower,set=SetPhantomPower,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PhantomPowerGlobal",type="int",units="",minVal="0",maxVal="1",description="Phantom Power support on global channel",get=GetPhantomPowerGlobal,set=SetPhantomPowerGlobal, enum = []),\
            BitFieldInfo(name="PhantomPowerChannel1",type="int",units="",minVal="0",maxVal="1",description="Phantom Power support on channel 1",get=GetPhantomPowerChannel1,set=SetPhantomPowerChannel1, enum = []),\
            BitFieldInfo(name="PhantomPowerChannel2",type="int",units="",minVal="0",maxVal="1",description="Phantom Power support on channel 2",get=GetPhantomPowerChannel2,set=SetPhantomPowerChannel2, enum = []),\
            BitFieldInfo(name="PhantomPowerChannel3",type="int",units="",minVal="0",maxVal="1",description="Phantom Power support on channel 3",get=GetPhantomPowerChannel3,set=SetPhantomPowerChannel3, enum = []),\
            BitFieldInfo(name="PhantomPowerUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetPhantomPowerUnused,set=SetPhantomPowerUnused, enum = [])], enum = []),\
        FieldInfo(name="HouseCurve",type="int",units="",minVal="0",maxVal="255",description="",get=GetHouseCurve,set=SetHouseCurve,count=1, bitfieldInfo = [\
            BitFieldInfo(name="HouseCurveGlobal",type="int",units="",minVal="0",maxVal="1",description="House Curve support on global channel",get=GetHouseCurveGlobal,set=SetHouseCurveGlobal, enum = []),\
            BitFieldInfo(name="HouseCurveChannel1",type="int",units="",minVal="0",maxVal="1",description="House Curve support on channel 1",get=GetHouseCurveChannel1,set=SetHouseCurveChannel1, enum = []),\
            BitFieldInfo(name="HouseCurveChannel2",type="int",units="",minVal="0",maxVal="1",description="House Curve support on channel 2",get=GetHouseCurveChannel2,set=SetHouseCurveChannel2, enum = []),\
            BitFieldInfo(name="HouseCurveChannel3",type="int",units="",minVal="0",maxVal="1",description="House Curve support on channel 3",get=GetHouseCurveChannel3,set=SetHouseCurveChannel3, enum = []),\
            BitFieldInfo(name="HouseCurveUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetHouseCurveUnused,set=SetHouseCurveUnused, enum = [])], enum = []),\
        FieldInfo(name="EffectsInsert",type="int",units="",minVal="0",maxVal="255",description="",get=GetEffectsInsert,set=SetEffectsInsert,count=1, bitfieldInfo = [\
            BitFieldInfo(name="EffectsInsertGlobal",type="int",units="",minVal="0",maxVal="1",description="Effects Insert support on global channel",get=GetEffectsInsertGlobal,set=SetEffectsInsertGlobal, enum = []),\
            BitFieldInfo(name="EffectsInsertChannel1",type="int",units="",minVal="0",maxVal="1",description="Effects Insert support on channel 1",get=GetEffectsInsertChannel1,set=SetEffectsInsertChannel1, enum = []),\
            BitFieldInfo(name="EffectsInsertChannel2",type="int",units="",minVal="0",maxVal="1",description="Effects Insert support on channel 2",get=GetEffectsInsertChannel2,set=SetEffectsInsertChannel2, enum = []),\
            BitFieldInfo(name="EffectsInsertChannel3",type="int",units="",minVal="0",maxVal="1",description="Effects Insert support on channel 3",get=GetEffectsInsertChannel3,set=SetEffectsInsertChannel3, enum = []),\
            BitFieldInfo(name="EffectsInsertUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetEffectsInsertUnused,set=SetEffectsInsertUnused, enum = [])], enum = []),\
        FieldInfo(name="RFWireless",type="int",units="",minVal="0",maxVal="255",description="",get=GetRFWireless,set=SetRFWireless,count=1, bitfieldInfo = [\
            BitFieldInfo(name="RFWirelessGlobal",type="int",units="",minVal="0",maxVal="1",description="RF Wireless support on global channel",get=GetRFWirelessGlobal,set=SetRFWirelessGlobal, enum = []),\
            BitFieldInfo(name="RFWirelessChannel1",type="int",units="",minVal="0",maxVal="1",description="RF Wireless support on channel 1",get=GetRFWirelessChannel1,set=SetRFWirelessChannel1, enum = []),\
            BitFieldInfo(name="RFWirelessChannel2",type="int",units="",minVal="0",maxVal="1",description="RF Wireless support on channel 2",get=GetRFWirelessChannel2,set=SetRFWirelessChannel2, enum = []),\
            BitFieldInfo(name="RFWirelessChannel3",type="int",units="",minVal="0",maxVal="1",description="RF Wireless support on channel 3",get=GetRFWirelessChannel3,set=SetRFWirelessChannel3, enum = []),\
            BitFieldInfo(name="RFWirelessUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetRFWirelessUnused,set=SetRFWirelessUnused, enum = [])], enum = []),\
        FieldInfo(name="PositionEQ",type="int",units="",minVal="0",maxVal="255",description="",get=GetPositionEQ,set=SetPositionEQ,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PositionEQGlobal",type="int",units="",minVal="0",maxVal="1",description="Position EQ support on global channel",get=GetPositionEQGlobal,set=SetPositionEQGlobal, enum = []),\
            BitFieldInfo(name="PositionEQChannel1",type="int",units="",minVal="0",maxVal="1",description="Position EQ support on channel 1",get=GetPositionEQChannel1,set=SetPositionEQChannel1, enum = []),\
            BitFieldInfo(name="PositionEQChannel2",type="int",units="",minVal="0",maxVal="1",description="Position EQ support on channel 2",get=GetPositionEQChannel2,set=SetPositionEQChannel2, enum = []),\
            BitFieldInfo(name="PositionEQChannel3",type="int",units="",minVal="0",maxVal="1",description="Position EQ support on channel 3",get=GetPositionEQChannel3,set=SetPositionEQChannel3, enum = []),\
            BitFieldInfo(name="PositionEQUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetPositionEQUnused,set=SetPositionEQUnused, enum = [])], enum = []),\
        FieldInfo(name="LivestreamMode",type="int",units="",minVal="0",maxVal="255",description="",get=GetLivestreamMode,set=SetLivestreamMode,count=1, bitfieldInfo = [\
            BitFieldInfo(name="LivestreamModeGlobal",type="int",units="",minVal="0",maxVal="1",description="Livestream Mode support on global channel",get=GetLivestreamModeGlobal,set=SetLivestreamModeGlobal, enum = []),\
            BitFieldInfo(name="LivestreamModeChannel1",type="int",units="",minVal="0",maxVal="1",description="Livestream Mode support on channel 1",get=GetLivestreamModeChannel1,set=SetLivestreamModeChannel1, enum = []),\
            BitFieldInfo(name="LivestreamModeChannel2",type="int",units="",minVal="0",maxVal="1",description="Livestream Mode support on channel 2",get=GetLivestreamModeChannel2,set=SetLivestreamModeChannel2, enum = []),\
            BitFieldInfo(name="LivestreamModeChannel3",type="int",units="",minVal="0",maxVal="1",description="Livestream Mode support on channel 3",get=GetLivestreamModeChannel3,set=SetLivestreamModeChannel3, enum = []),\
            BitFieldInfo(name="LivestreamModeUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetLivestreamModeUnused,set=SetLivestreamModeUnused, enum = [])], enum = []),\
        FieldInfo(name="SubEQ",type="int",units="",minVal="0",maxVal="255",description="",get=GetSubEQ,set=SetSubEQ,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SubEQGlobal",type="int",units="",minVal="0",maxVal="1",description="Sub EQ support on global channel",get=GetSubEQGlobal,set=SetSubEQGlobal, enum = []),\
            BitFieldInfo(name="SubEQChannel1",type="int",units="",minVal="0",maxVal="1",description="Sub EQ support on channel 1",get=GetSubEQChannel1,set=SetSubEQChannel1, enum = []),\
            BitFieldInfo(name="SubEQChannel2",type="int",units="",minVal="0",maxVal="1",description="Sub EQ support on channel 2",get=GetSubEQChannel2,set=SetSubEQChannel2, enum = []),\
            BitFieldInfo(name="SubEQChannel3",type="int",units="",minVal="0",maxVal="1",description="Sub EQ support on channel 3",get=GetSubEQChannel3,set=SetSubEQChannel3, enum = []),\
            BitFieldInfo(name="SubEQUnused",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetSubEQUnused,set=SetSubEQUnused, enum = [])], enum = [])\
    ]

Messaging.Register("AudioManagement.ChannelParameterCapabilities.Status", AudioManagement_ChannelParameterCapabilities_Status.ID, AudioManagement_ChannelParameterCapabilities_Status)
