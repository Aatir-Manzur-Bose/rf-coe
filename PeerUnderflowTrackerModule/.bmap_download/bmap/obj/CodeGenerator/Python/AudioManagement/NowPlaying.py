#    obj/CodeGenerator/Python/AudioManagement/NowPlaying.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/NowPlaying.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_NowPlaying_Start :
    ID = 20581
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 6), ("Operator", 5)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (6, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Start.MSG_OFFSET + AudioManagement_NowPlaying_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_NowPlaying_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_NowPlaying_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Start.MSG_OFFSET + AudioManagement_NowPlaying_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_NowPlaying_Start.ID)
            self.hdr.SetDataLength(AudioManagement_NowPlaying_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.NowPlaying.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.NowPlaying.Start", AudioManagement_NowPlaying_Start.ID, AudioManagement_NowPlaying_Start)
#    obj/CodeGenerator/Python/AudioManagement/NowPlaying.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/NowPlaying.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_NowPlaying_Processing :
    ID = 20583
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 6), ("Operator", 7)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (6, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Processing.MSG_OFFSET + AudioManagement_NowPlaying_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_NowPlaying_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_NowPlaying_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Processing.MSG_OFFSET + AudioManagement_NowPlaying_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_NowPlaying_Processing.ID)
            self.hdr.SetDataLength(AudioManagement_NowPlaying_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.NowPlaying.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.NowPlaying.Processing", AudioManagement_NowPlaying_Processing.ID, AudioManagement_NowPlaying_Processing)
#    obj/CodeGenerator/Python/AudioManagement/NowPlaying.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/NowPlaying.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_NowPlaying_Result :
    ID = 20582
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 6), ("Operator", 6)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (6, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Result.MSG_OFFSET + AudioManagement_NowPlaying_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_NowPlaying_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_NowPlaying_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Result.MSG_OFFSET + AudioManagement_NowPlaying_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_NowPlaying_Result.ID)
            self.hdr.SetDataLength(AudioManagement_NowPlaying_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.NowPlaying.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.NowPlaying.Result", AudioManagement_NowPlaying_Result.ID, AudioManagement_NowPlaying_Result)
#    obj/CodeGenerator/Python/AudioManagement/NowPlaying.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/NowPlaying.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_NowPlaying_Status :
    ID = 20579
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AttributeID = OrderedDict([("SongTitle", 0), ("Artist", 1), ("Album", 2), ("TrackNumber", 3), ("TotalNumberOfTracks", 4), ("Genre", 5), ("PlayingTime", 6)])
    ReverseAttributeID = OrderedDict([(0, "SongTitle"), (1, "Artist"), (2, "Album"), (3, "TrackNumber"), (4, "TotalNumberOfTracks"), (5, "Genre"), (6, "PlayingTime")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Status.MSG_OFFSET + AudioManagement_NowPlaying_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_NowPlaying_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_NowPlaying_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_NowPlaying_Status.MSG_OFFSET + AudioManagement_NowPlaying_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_NowPlaying_Status.ID)
            self.hdr.SetDataLength(AudioManagement_NowPlaying_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.NowPlaying.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAttributeID(self, enumAsInt=0):
        """Now Playing attribute id"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_NowPlaying_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_NowPlaying_Status.ReverseAttributeID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def GetNowPlayingAttribute(self, idx):
        """Now playing attribute value"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_NowPlaying_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAttributeID(self, value):
        """Now Playing attribute id"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_NowPlaying_Status.AttributeID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_NowPlaying_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def SetNowPlayingAttribute(self, value, idx):
        """Now playing attribute value"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_NowPlaying_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AttributeID",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Now Playing attribute id",get=GetAttributeID,set=SetAttributeID,count=1, bitfieldInfo = [], enum = [AttributeID, ReverseAttributeID]),\
        FieldInfo(name="NowPlayingAttribute",type="int",units="",minVal="0",maxVal="255",description="Now playing attribute value",get=GetNowPlayingAttribute,set=SetNowPlayingAttribute,count=59, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.NowPlaying.Status", AudioManagement_NowPlaying_Status.ID, AudioManagement_NowPlaying_Status)
