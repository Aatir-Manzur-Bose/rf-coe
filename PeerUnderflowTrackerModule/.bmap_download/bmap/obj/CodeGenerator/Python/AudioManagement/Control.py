#    obj/CodeGenerator/Python/AudioManagement/Control.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_Control_Get :
    ID = 20529
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_Control_Get.MSG_OFFSET + AudioManagement_Control_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_Control_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_Control_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_Control_Get.MSG_OFFSET + AudioManagement_Control_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_Control_Get.ID)
            self.hdr.SetDataLength(AudioManagement_Control_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.Control.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.Control.Get", AudioManagement_Control_Get.ID, AudioManagement_Control_Get)
#    obj/CodeGenerator/Python/AudioManagement/Control.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_Control_Start :
    ID = 20533
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ControlValue = OrderedDict([("Stop", 0), ("Play", 1), ("Pause", 2), ("TrackForward", 3), ("TrackBack", 4), ("FastForwardPress", 5), ("FastForwardRelease", 6), ("RewindPress", 7), ("RewindRelease", 8)])
    ReverseControlValue = OrderedDict([(0, "Stop"), (1, "Play"), (2, "Pause"), (3, "TrackForward"), (4, "TrackBack"), (5, "FastForwardPress"), (6, "FastForwardRelease"), (7, "RewindPress"), (8, "RewindRelease")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 3), ("Operator", 5)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (3, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_Control_Start.MSG_OFFSET + AudioManagement_Control_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_Control_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_Control_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_Control_Start.MSG_OFFSET + AudioManagement_Control_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_Control_Start.ID)
            self.hdr.SetDataLength(AudioManagement_Control_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.Control.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetControlValue(self, enumAsInt=0):
        """Audio control value."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_Control_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_Control_Start.ReverseControlValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetControlValue(self, value):
        """Audio control value."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_Control_Start.ControlValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_Control_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ControlValue",type="enumeration",units="",minVal="0",maxVal="255",description="Audio control value.",get=GetControlValue,set=SetControlValue,count=1, bitfieldInfo = [], enum = [ControlValue, ReverseControlValue])\
    ]

Messaging.Register("AudioManagement.Control.Start", AudioManagement_Control_Start.ID, AudioManagement_Control_Start)
#    obj/CodeGenerator/Python/AudioManagement/Control.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_Control_Processing :
    ID = 20535
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ControlValue = OrderedDict([("Stop", 0), ("Play", 1), ("Pause", 2), ("TrackForward", 3), ("TrackBack", 4), ("FastForwardPress", 5), ("FastForwardRelease", 6), ("RewindPress", 7), ("RewindRelease", 8)])
    ReverseControlValue = OrderedDict([(0, "Stop"), (1, "Play"), (2, "Pause"), (3, "TrackForward"), (4, "TrackBack"), (5, "FastForwardPress"), (6, "FastForwardRelease"), (7, "RewindPress"), (8, "RewindRelease")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 3), ("Operator", 7)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (3, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_Control_Processing.MSG_OFFSET + AudioManagement_Control_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_Control_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_Control_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_Control_Processing.MSG_OFFSET + AudioManagement_Control_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_Control_Processing.ID)
            self.hdr.SetDataLength(AudioManagement_Control_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.Control.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetControlValue(self, enumAsInt=0):
        """Audio control value."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_Control_Processing.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_Control_Processing.ReverseControlValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetControlValue(self, value):
        """Audio control value."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_Control_Processing.ControlValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_Control_Processing.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ControlValue",type="enumeration",units="",minVal="0",maxVal="255",description="Audio control value.",get=GetControlValue,set=SetControlValue,count=1, bitfieldInfo = [], enum = [ControlValue, ReverseControlValue])\
    ]

Messaging.Register("AudioManagement.Control.Processing", AudioManagement_Control_Processing.ID, AudioManagement_Control_Processing)
#    obj/CodeGenerator/Python/AudioManagement/Control.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_Control_Result :
    ID = 20534
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ControlValue = OrderedDict([("Stop", 0), ("Play", 1), ("Pause", 2), ("TrackForward", 3), ("TrackBack", 4), ("FastForwardPress", 5), ("FastForwardRelease", 6), ("RewindPress", 7), ("RewindRelease", 8)])
    ReverseControlValue = OrderedDict([(0, "Stop"), (1, "Play"), (2, "Pause"), (3, "TrackForward"), (4, "TrackBack"), (5, "FastForwardPress"), (6, "FastForwardRelease"), (7, "RewindPress"), (8, "RewindRelease")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 3), ("Operator", 6)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (3, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_Control_Result.MSG_OFFSET + AudioManagement_Control_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_Control_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_Control_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_Control_Result.MSG_OFFSET + AudioManagement_Control_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_Control_Result.ID)
            self.hdr.SetDataLength(AudioManagement_Control_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.Control.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetControlValue(self, enumAsInt=0):
        """Audio control value."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_Control_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_Control_Result.ReverseControlValue.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetControlValue(self, value):
        """Audio control value."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_Control_Result.ControlValue.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_Control_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ControlValue",type="enumeration",units="",minVal="0",maxVal="255",description="Audio control value.",get=GetControlValue,set=SetControlValue,count=1, bitfieldInfo = [], enum = [ControlValue, ReverseControlValue])\
    ]

Messaging.Register("AudioManagement.Control.Result", AudioManagement_Control_Result.ID, AudioManagement_Control_Result)
#    obj/CodeGenerator/Python/AudioManagement/Control.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/Control.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_Control_Status :
    ID = 20531
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_Control_Status.MSG_OFFSET + AudioManagement_Control_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_Control_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_Control_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_Control_Status.MSG_OFFSET + AudioManagement_Control_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_Control_Status.ID)
            self.hdr.SetDataLength(AudioManagement_Control_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.Control.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def GetSupportedAudioControls(self, idx):
        """Supported audio controls bitmask"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_Control_Status.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def SetSupportedAudioControls(self, value, idx):
        """Supported audio controls bitmask"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_Control_Status.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SupportedAudioControls",type="int",units="",minVal="0",maxVal="255",description="Supported audio controls bitmask",get=GetSupportedAudioControls,set=SetSupportedAudioControls,count=60, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.Control.Status", AudioManagement_Control_Status.ID, AudioManagement_Control_Status)
