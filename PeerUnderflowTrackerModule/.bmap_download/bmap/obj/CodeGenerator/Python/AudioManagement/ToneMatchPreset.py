#    obj/CodeGenerator/Python/AudioManagement/ToneMatchPreset.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioManagement/ToneMatchPreset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ToneMatchPreset_SetGet :
    ID = 20658
    SIZE = 104
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 11), ("Operator", 2)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (11, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + AudioManagement_ToneMatchPreset_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ToneMatchPreset_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ToneMatchPreset_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + AudioManagement_ToneMatchPreset_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ToneMatchPreset_SetGet.ID)
            self.hdr.SetDataLength(AudioManagement_ToneMatchPreset_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ToneMatchPreset.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel where the EQ preset is being assigned"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSlot(self):
        """Preset slot where the EQ preset is being assigned"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetID(self):
        """Unique ID for the preset"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def GetB0Combined(self):
        """Product of all B0s for the SOSs in the preset"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_1(self):
        """Normalized B1 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_1(self):
        """Normalized B2 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_1(self):
        """Negative A1 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_1(self):
        """Negative A2 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_2(self):
        """Normalized B1 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_2(self):
        """Normalized B2 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('32')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_2(self):
        """Negative A1 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 32)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('36')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_2(self):
        """Negative A2 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 36)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('40')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_3(self):
        """Normalized B1 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 40)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('44')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_3(self):
        """Normalized B2 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 44)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('48')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_3(self):
        """Negative A1 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 48)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('52')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_3(self):
        """Negative A2 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 52)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('56')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_4(self):
        """Normalized B1 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 56)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('60')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_4(self):
        """Normalized B2 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 60)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('64')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_4(self):
        """Negative A1 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 64)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('68')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_4(self):
        """Negative A2 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 68)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('72')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_5(self):
        """Normalized B1 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 72)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('76')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_5(self):
        """Normalized B2 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 76)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('80')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_5(self):
        """Negative A1 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 80)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('84')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_5(self):
        """Negative A2 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 84)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('88')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_6(self):
        """Normalized B1 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 88)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('92')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_6(self):
        """Normalized B2 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 92)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('96')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_6(self):
        """Negative A1 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 96)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('100')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_6(self):
        """Negative A2 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 100)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel where the EQ preset is being assigned"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSlot(self, value):
        """Preset slot where the EQ preset is being assigned"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetID(self, value):
        """Unique ID for the preset"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def SetB0Combined(self, value):
        """Product of all B0s for the SOSs in the preset"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_1(self, value):
        """Normalized B1 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_1(self, value):
        """Normalized B2 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_1(self, value):
        """Negative A1 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_1(self, value):
        """Negative A2 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_2(self, value):
        """Normalized B1 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 24, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_2(self, value):
        """Normalized B2 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 28, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('32')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_2(self, value):
        """Negative A1 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('36')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_2(self, value):
        """Negative A2 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 36, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('40')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_3(self, value):
        """Normalized B1 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 40, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('44')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_3(self, value):
        """Normalized B2 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 44, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('48')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_3(self, value):
        """Negative A1 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 48, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('52')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_3(self, value):
        """Negative A2 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 52, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('56')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_4(self, value):
        """Normalized B1 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 56, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('60')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_4(self, value):
        """Normalized B2 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 60, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('64')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_4(self, value):
        """Negative A1 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 64, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('68')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_4(self, value):
        """Negative A2 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 68, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('72')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_5(self, value):
        """Normalized B1 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 72, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('76')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_5(self, value):
        """Normalized B2 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 76, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('80')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_5(self, value):
        """Negative A1 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 80, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('84')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_5(self, value):
        """Negative A2 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 84, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('88')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_6(self, value):
        """Normalized B1 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 88, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('92')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_6(self, value):
        """Normalized B2 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 92, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('96')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_6(self, value):
        """Negative A1 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 96, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('100')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_6(self, value):
        """Negative A2 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_SetGet.MSG_OFFSET + 100, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel where the EQ preset is being assigned",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Slot",type="int",units="",minVal="0",maxVal="255",description="Preset slot where the EQ preset is being assigned",get=GetSlot,set=SetSlot,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ID",type="int",units="",minVal="0",maxVal="65535",description="Unique ID for the preset",get=GetID,set=SetID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B0Combined",type="int",units="",minVal="0",maxVal="4294967295",description="Product of all B0s for the SOSs in the preset",get=GetB0Combined,set=SetB0Combined,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_1",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the first SOS",get=GetB1Norm_1,set=SetB1Norm_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_1",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the first SOS",get=GetB2Norm_1,set=SetB2Norm_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_1",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the first SOS",get=GetA1Neg_1,set=SetA1Neg_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_1",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the first SOS",get=GetA2Neg_1,set=SetA2Neg_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_2",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the second SOS",get=GetB1Norm_2,set=SetB1Norm_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_2",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the second SOS",get=GetB2Norm_2,set=SetB2Norm_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_2",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the second SOS",get=GetA1Neg_2,set=SetA1Neg_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_2",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the second SOS",get=GetA2Neg_2,set=SetA2Neg_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_3",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the third SOS",get=GetB1Norm_3,set=SetB1Norm_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_3",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the third SOS",get=GetB2Norm_3,set=SetB2Norm_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_3",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the third SOS",get=GetA1Neg_3,set=SetA1Neg_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_3",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the third SOS",get=GetA2Neg_3,set=SetA2Neg_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_4",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the fourth SOS",get=GetB1Norm_4,set=SetB1Norm_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_4",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the fourth SOS",get=GetB2Norm_4,set=SetB2Norm_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_4",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the fourth SOS",get=GetA1Neg_4,set=SetA1Neg_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_4",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the fourth SOS",get=GetA2Neg_4,set=SetA2Neg_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_5",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the fifth SOS",get=GetB1Norm_5,set=SetB1Norm_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_5",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the fifth SOS",get=GetB2Norm_5,set=SetB2Norm_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_5",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the fifth SOS",get=GetA1Neg_5,set=SetA1Neg_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_5",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the fifth SOS",get=GetA2Neg_5,set=SetA2Neg_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_6",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the sixth SOS",get=GetB1Norm_6,set=SetB1Norm_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_6",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the sixth SOS",get=GetB2Norm_6,set=SetB2Norm_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_6",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the sixth SOS",get=GetA1Neg_6,set=SetA1Neg_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_6",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the sixth SOS",get=GetA2Neg_6,set=SetA2Neg_6,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.ToneMatchPreset.SetGet", AudioManagement_ToneMatchPreset_SetGet.ID, AudioManagement_ToneMatchPreset_SetGet)
#    obj/CodeGenerator/Python/AudioManagement/ToneMatchPreset.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioManagement/ToneMatchPreset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ToneMatchPreset_Get :
    ID = 20657
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + AudioManagement_ToneMatchPreset_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ToneMatchPreset_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ToneMatchPreset_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + AudioManagement_ToneMatchPreset_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ToneMatchPreset_Get.ID)
            self.hdr.SetDataLength(AudioManagement_ToneMatchPreset_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ToneMatchPreset.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel where the EQ preset is being requested"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSlot(self):
        """Preset slot where the EQ preset is being requested"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel where the EQ preset is being requested"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSlot(self, value):
        """Preset slot where the EQ preset is being requested"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Get.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel where the EQ preset is being requested",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Slot",type="int",units="",minVal="0",maxVal="255",description="Preset slot where the EQ preset is being requested",get=GetSlot,set=SetSlot,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.ToneMatchPreset.Get", AudioManagement_ToneMatchPreset_Get.ID, AudioManagement_ToneMatchPreset_Get)
#    obj/CodeGenerator/Python/AudioManagement/ToneMatchPreset.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioManagement/ToneMatchPreset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ToneMatchPreset_Status :
    ID = 20659
    SIZE = 104
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + AudioManagement_ToneMatchPreset_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ToneMatchPreset_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ToneMatchPreset_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + AudioManagement_ToneMatchPreset_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ToneMatchPreset_Status.ID)
            self.hdr.SetDataLength(AudioManagement_ToneMatchPreset_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ToneMatchPreset.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel where the EQ preset is being assigned"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSlot(self):
        """Preset slot where the EQ preset is being assigned"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetID(self):
        """Unique ID for the preset"""
        value = struct.unpack_from('>H', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def GetB0Combined(self):
        """Product of all B0s for the SOSs in the preset"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_1(self):
        """Normalized B1 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_1(self):
        """Normalized B2 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_1(self):
        """Negative A1 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_1(self):
        """Negative A2 for the first SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_2(self):
        """Normalized B1 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_2(self):
        """Normalized B2 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 28)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('32')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_2(self):
        """Negative A1 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 32)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('36')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_2(self):
        """Negative A2 for the second SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 36)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('40')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_3(self):
        """Normalized B1 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 40)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('44')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_3(self):
        """Normalized B2 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 44)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('48')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_3(self):
        """Negative A1 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 48)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('52')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_3(self):
        """Negative A2 for the third SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 52)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('56')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_4(self):
        """Normalized B1 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 56)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('60')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_4(self):
        """Normalized B2 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 60)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('64')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_4(self):
        """Negative A1 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 64)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('68')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_4(self):
        """Negative A2 for the fourth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 68)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('72')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_5(self):
        """Normalized B1 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 72)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('76')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_5(self):
        """Normalized B2 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 76)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('80')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_5(self):
        """Negative A1 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 80)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('84')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_5(self):
        """Negative A2 for the fifth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 84)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('88')
    @msg.size('4')
    @msg.count(1)
    def GetB1Norm_6(self):
        """Normalized B1 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 88)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('92')
    @msg.size('4')
    @msg.count(1)
    def GetB2Norm_6(self):
        """Normalized B2 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 92)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('96')
    @msg.size('4')
    @msg.count(1)
    def GetA1Neg_6(self):
        """Negative A1 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 96)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('100')
    @msg.size('4')
    @msg.count(1)
    def GetA2Neg_6(self):
        """Negative A2 for the sixth SOS"""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 100)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel where the EQ preset is being assigned"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSlot(self, value):
        """Preset slot where the EQ preset is being assigned"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetID(self, value):
        """Unique ID for the preset"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('4')
    @msg.size('4')
    @msg.count(1)
    def SetB0Combined(self, value):
        """Product of all B0s for the SOSs in the preset"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('8')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_1(self, value):
        """Normalized B1 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('12')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_1(self, value):
        """Normalized B2 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('16')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_1(self, value):
        """Negative A1 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_1(self, value):
        """Negative A2 for the first SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('24')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_2(self, value):
        """Normalized B1 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 24, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('28')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_2(self, value):
        """Normalized B2 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 28, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('32')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_2(self, value):
        """Negative A1 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 32, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('36')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_2(self, value):
        """Negative A2 for the second SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 36, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('40')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_3(self, value):
        """Normalized B1 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 40, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('44')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_3(self, value):
        """Normalized B2 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 44, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('48')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_3(self, value):
        """Negative A1 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 48, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('52')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_3(self, value):
        """Negative A2 for the third SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 52, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('56')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_4(self, value):
        """Normalized B1 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 56, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('60')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_4(self, value):
        """Normalized B2 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 60, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('64')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_4(self, value):
        """Negative A1 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 64, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('68')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_4(self, value):
        """Negative A2 for the fourth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 68, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('72')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_5(self, value):
        """Normalized B1 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 72, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('76')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_5(self, value):
        """Normalized B2 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 76, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('80')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_5(self, value):
        """Negative A1 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 80, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('84')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_5(self, value):
        """Negative A2 for the fifth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 84, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('88')
    @msg.size('4')
    @msg.count(1)
    def SetB1Norm_6(self, value):
        """Normalized B1 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 88, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('92')
    @msg.size('4')
    @msg.count(1)
    def SetB2Norm_6(self, value):
        """Normalized B2 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 92, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('96')
    @msg.size('4')
    @msg.count(1)
    def SetA1Neg_6(self, value):
        """Negative A1 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 96, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('100')
    @msg.size('4')
    @msg.count(1)
    def SetA2Neg_6(self, value):
        """Negative A2 for the sixth SOS"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioManagement_ToneMatchPreset_Status.MSG_OFFSET + 100, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel where the EQ preset is being assigned",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Slot",type="int",units="",minVal="0",maxVal="255",description="Preset slot where the EQ preset is being assigned",get=GetSlot,set=SetSlot,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ID",type="int",units="",minVal="0",maxVal="65535",description="Unique ID for the preset",get=GetID,set=SetID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B0Combined",type="int",units="",minVal="0",maxVal="4294967295",description="Product of all B0s for the SOSs in the preset",get=GetB0Combined,set=SetB0Combined,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_1",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the first SOS",get=GetB1Norm_1,set=SetB1Norm_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_1",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the first SOS",get=GetB2Norm_1,set=SetB2Norm_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_1",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the first SOS",get=GetA1Neg_1,set=SetA1Neg_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_1",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the first SOS",get=GetA2Neg_1,set=SetA2Neg_1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_2",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the second SOS",get=GetB1Norm_2,set=SetB1Norm_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_2",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the second SOS",get=GetB2Norm_2,set=SetB2Norm_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_2",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the second SOS",get=GetA1Neg_2,set=SetA1Neg_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_2",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the second SOS",get=GetA2Neg_2,set=SetA2Neg_2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_3",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the third SOS",get=GetB1Norm_3,set=SetB1Norm_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_3",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the third SOS",get=GetB2Norm_3,set=SetB2Norm_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_3",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the third SOS",get=GetA1Neg_3,set=SetA1Neg_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_3",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the third SOS",get=GetA2Neg_3,set=SetA2Neg_3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_4",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the fourth SOS",get=GetB1Norm_4,set=SetB1Norm_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_4",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the fourth SOS",get=GetB2Norm_4,set=SetB2Norm_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_4",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the fourth SOS",get=GetA1Neg_4,set=SetA1Neg_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_4",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the fourth SOS",get=GetA2Neg_4,set=SetA2Neg_4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_5",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the fifth SOS",get=GetB1Norm_5,set=SetB1Norm_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_5",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the fifth SOS",get=GetB2Norm_5,set=SetB2Norm_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_5",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the fifth SOS",get=GetA1Neg_5,set=SetA1Neg_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_5",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the fifth SOS",get=GetA2Neg_5,set=SetA2Neg_5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B1Norm_6",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B1 for the sixth SOS",get=GetB1Norm_6,set=SetB1Norm_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="B2Norm_6",type="int",units="",minVal="0",maxVal="4294967295",description="Normalized B2 for the sixth SOS",get=GetB2Norm_6,set=SetB2Norm_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A1Neg_6",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A1 for the sixth SOS",get=GetA1Neg_6,set=SetA1Neg_6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="A2Neg_6",type="int",units="",minVal="0",maxVal="4294967295",description="Negative A2 for the sixth SOS",get=GetA2Neg_6,set=SetA2Neg_6,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.ToneMatchPreset.Status", AudioManagement_ToneMatchPreset_Status.ID, AudioManagement_ToneMatchPreset_Status)
