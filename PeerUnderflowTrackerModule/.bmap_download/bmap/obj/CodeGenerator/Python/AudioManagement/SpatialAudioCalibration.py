#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Get :
    ID = 20753
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 1)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Get.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Get.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Get.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Get", AudioManagement_SpatialAudioCalibration_Get.ID, AudioManagement_SpatialAudioCalibration_Get)
#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Status :
    ID = 20755
    SIZE = 98
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SpatialAudioCalibrationTypes = OrderedDict([("SpatialAudioCalibrationFactory", 0), ("SpatialAudioCalibrationManual", 1), ("SpatialAudioCalibrationAutomatic", 2)])
    ReverseSpatialAudioCalibrationTypes = OrderedDict([(0, "SpatialAudioCalibrationFactory"), (1, "SpatialAudioCalibrationManual"), (2, "SpatialAudioCalibrationAutomatic")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Status.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSpatialAudioCalibrationType(self, enumAsInt=0):
        """The type of Spatial Audio Calibration in effect"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_SpatialAudioCalibration_Status.ReverseSpatialAudioCalibrationTypes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSpatialAudioCalibrationDataLength(self):
        """The size of the data currently used for calibration"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(96)
    def GetSpatialAudioCalibrationData(self, idx):
        """The data currently used for calibration"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 2+idx*1)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSpatialAudioCalibrationType(self, value):
        """The type of Spatial Audio Calibration in effect"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_SpatialAudioCalibration_Status.SpatialAudioCalibrationTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSpatialAudioCalibrationDataLength(self, value):
        """The size of the data currently used for calibration"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(96)
    def SetSpatialAudioCalibrationData(self, value, idx):
        """The data currently used for calibration"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Status.MSG_OFFSET + 2+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SpatialAudioCalibrationType",type="enumeration",units="Enum",minVal="0",maxVal="255",description="The type of Spatial Audio Calibration in effect",get=GetSpatialAudioCalibrationType,set=SetSpatialAudioCalibrationType,count=1, bitfieldInfo = [], enum = [SpatialAudioCalibrationTypes, ReverseSpatialAudioCalibrationTypes]),\
        FieldInfo(name="SpatialAudioCalibrationDataLength",type="int",units="",minVal="0",maxVal="255",description="The size of the data currently used for calibration",get=GetSpatialAudioCalibrationDataLength,set=SetSpatialAudioCalibrationDataLength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SpatialAudioCalibrationData",type="int",units="",minVal="0",maxVal="255",description="The data currently used for calibration",get=GetSpatialAudioCalibrationData,set=SetSpatialAudioCalibrationData,count=96, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Status", AudioManagement_SpatialAudioCalibration_Status.ID, AudioManagement_SpatialAudioCalibration_Status)
#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Start :
    ID = 20757
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 5)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Start.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Start.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Start.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Start", AudioManagement_SpatialAudioCalibration_Start.ID, AudioManagement_SpatialAudioCalibration_Start)
#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Processing :
    ID = 20759
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 7)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Processing.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Processing.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Processing.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Processing", AudioManagement_SpatialAudioCalibration_Processing.ID, AudioManagement_SpatialAudioCalibration_Processing)
#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Error :
    ID = 20756
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 4)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Error.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Error.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Error.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self):
        """Error Code, uses standard BMAP errors like BMAP_ERROR_INVALID_STATE"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Error.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """Error Code, uses standard BMAP errors like BMAP_ERROR_INVALID_STATE"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="int",units="",minVal="0",maxVal="255",description="Error Code, uses standard BMAP errors like BMAP_ERROR_INVALID_STATE",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Error", AudioManagement_SpatialAudioCalibration_Error.ID, AudioManagement_SpatialAudioCalibration_Error)
#    obj/CodeGenerator/Python/AudioManagement/SpatialAudioCalibration.py
#    Created 27/07/2023 at 10:09:38 from:
#        Messages = messages/AudioManagement/SpatialAudioCalibration.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_SpatialAudioCalibration_Result :
    ID = 20758
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SpatialAudioCalibrationTypes = OrderedDict([("SpatialAudioCalibrationFactory", 0), ("SpatialAudioCalibrationManual", 1), ("SpatialAudioCalibrationAutomatic", 2)])
    ReverseSpatialAudioCalibrationTypes = OrderedDict([(0, "SpatialAudioCalibrationFactory"), (1, "SpatialAudioCalibrationManual"), (2, "SpatialAudioCalibrationAutomatic")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 17), ("Operator", 6)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (17, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Result.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_SpatialAudioCalibration_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_SpatialAudioCalibration_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_SpatialAudioCalibration_Result.MSG_OFFSET + AudioManagement_SpatialAudioCalibration_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_SpatialAudioCalibration_Result.ID)
            self.hdr.SetDataLength(AudioManagement_SpatialAudioCalibration_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.SpatialAudioCalibration.Result"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSpatialAudioCalibrationStatus(self, enumAsInt=0):
        """The type of Spatial Audio Calibration in effect; after SpatialAudioCalibration.Start this will be SpatialAudioCalibrationManual"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = AudioManagement_SpatialAudioCalibration_Result.ReverseSpatialAudioCalibrationTypes.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSpatialAudioCalibrationStatus(self, value):
        """The type of Spatial Audio Calibration in effect; after SpatialAudioCalibration.Start this will be SpatialAudioCalibrationManual"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_SpatialAudioCalibration_Result.SpatialAudioCalibrationTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_SpatialAudioCalibration_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SpatialAudioCalibrationStatus",type="enumeration",units="Enum",minVal="0",maxVal="255",description="The type of Spatial Audio Calibration in effect; after SpatialAudioCalibration.Start this will be SpatialAudioCalibrationManual",get=GetSpatialAudioCalibrationStatus,set=SetSpatialAudioCalibrationStatus,count=1, bitfieldInfo = [], enum = [SpatialAudioCalibrationTypes, ReverseSpatialAudioCalibrationTypes])\
    ]

Messaging.Register("AudioManagement.SpatialAudioCalibration.Result", AudioManagement_SpatialAudioCalibration_Result.ID, AudioManagement_SpatialAudioCalibration_Result)
