#    obj/CodeGenerator/Python/AudioManagement/ChannelParameter.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/ChannelParameter.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ChannelParameter_Get :
    ID = 20609
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ParameterTypes = OrderedDict([("Volume", 0), ("Treble", 1), ("Bass", 2), ("Reverb", 3), ("Mute", 4), ("Reverb Mute", 5), ("EQ Preset", 6), ("Phantom Power", 7), ("House Curve", 8), ("Effects Insert Mode", 9), ("RF Wireless Mode", 10), ("Position EQ", 11), ("Livestream Mode", 12), ("Sub EQ", 13)])
    ReverseParameterTypes = OrderedDict([(0, "Volume"), (1, "Treble"), (2, "Bass"), (3, "Reverb"), (4, "Mute"), (5, "Reverb Mute"), (6, "EQ Preset"), (7, "Phantom Power"), (8, "House Curve"), (9, "Effects Insert Mode"), (10, "RF Wireless Mode"), (11, "Position EQ"), (12, "Livestream Mode"), (13, "Sub EQ")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 8), ("Operator", 1)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (8, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_Get.MSG_OFFSET + AudioManagement_ChannelParameter_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ChannelParameter_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ChannelParameter_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_Get.MSG_OFFSET + AudioManagement_ChannelParameter_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ChannelParameter_Get.ID)
            self.hdr.SetDataLength(AudioManagement_ChannelParameter_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ChannelParameter.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel being requested"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self, enumAsInt=0):
        """Audio parameter being requested"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioManagement_ChannelParameter_Get.ReverseParameterTypes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel being requested"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Audio parameter being requested"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_ChannelParameter_Get.ParameterTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Get.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel being requested",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="enumeration",units="",minVal="0",maxVal="255",description="Audio parameter being requested",get=GetParam,set=SetParam,count=1, bitfieldInfo = [], enum = [ParameterTypes, ReverseParameterTypes])\
    ]

Messaging.Register("AudioManagement.ChannelParameter.Get", AudioManagement_ChannelParameter_Get.ID, AudioManagement_ChannelParameter_Get)
#    obj/CodeGenerator/Python/AudioManagement/ChannelParameter.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/ChannelParameter.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ChannelParameter_SetGet :
    ID = 20610
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ParameterTypes = OrderedDict([("Volume", 0), ("Treble", 1), ("Bass", 2), ("Reverb", 3), ("Mute", 4), ("Reverb Mute", 5), ("EQ Preset", 6), ("Phantom Power", 7), ("House Curve", 8), ("Effects Insert Mode", 9), ("RF Wireless Mode", 10), ("Position EQ", 11), ("Livestream Mode", 12), ("Sub EQ", 13)])
    ReverseParameterTypes = OrderedDict([(0, "Volume"), (1, "Treble"), (2, "Bass"), (3, "Reverb"), (4, "Mute"), (5, "Reverb Mute"), (6, "EQ Preset"), (7, "Phantom Power"), (8, "House Curve"), (9, "Effects Insert Mode"), (10, "RF Wireless Mode"), (11, "Position EQ"), (12, "Livestream Mode"), (13, "Sub EQ")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 8), ("Operator", 2)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (8, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + AudioManagement_ChannelParameter_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ChannelParameter_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ChannelParameter_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + AudioManagement_ChannelParameter_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ChannelParameter_SetGet.ID)
            self.hdr.SetDataLength(AudioManagement_ChannelParameter_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ChannelParameter.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel being set"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self, enumAsInt=0):
        """Audio parameter being set"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioManagement_ChannelParameter_SetGet.ReverseParameterTypes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetTargetStep(self):
        """Target parameter step being set"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel being set"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Audio parameter being set"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_ChannelParameter_SetGet.ParameterTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetTargetStep(self, value):
        """Target parameter step being set"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_SetGet.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel being set",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="enumeration",units="",minVal="0",maxVal="255",description="Audio parameter being set",get=GetParam,set=SetParam,count=1, bitfieldInfo = [], enum = [ParameterTypes, ReverseParameterTypes]),\
        FieldInfo(name="TargetStep",type="int",units="",minVal="0",maxVal="255",description="Target parameter step being set",get=GetTargetStep,set=SetTargetStep,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.ChannelParameter.SetGet", AudioManagement_ChannelParameter_SetGet.ID, AudioManagement_ChannelParameter_SetGet)
#    obj/CodeGenerator/Python/AudioManagement/ChannelParameter.py
#    Created 27/07/2023 at 10:09:37 from:
#        Messages = messages/AudioManagement/ChannelParameter.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioManagement_ChannelParameter_Status :
    ID = 20611
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ParameterTypes = OrderedDict([("Volume", 0), ("Treble", 1), ("Bass", 2), ("Reverb", 3), ("Mute", 4), ("Reverb Mute", 5), ("EQ Preset", 6), ("Phantom Power", 7), ("House Curve", 8), ("Effects Insert Mode", 9), ("RF Wireless Mode", 10), ("Position EQ", 11), ("Livestream Mode", 12), ("Sub EQ", 13)])
    ReverseParameterTypes = OrderedDict([(0, "Volume"), (1, "Treble"), (2, "Bass"), (3, "Reverb"), (4, "Mute"), (5, "Reverb Mute"), (6, "EQ Preset"), (7, "Phantom Power"), (8, "House Curve"), (9, "Effects Insert Mode"), (10, "RF Wireless Mode"), (11, "Position EQ"), (12, "Livestream Mode"), (13, "Sub EQ")])
    IDs = OrderedDict([("FunctionBlock", 5), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(5, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_Status.MSG_OFFSET + AudioManagement_ChannelParameter_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioManagement_ChannelParameter_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioManagement_ChannelParameter_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioManagement_ChannelParameter_Status.MSG_OFFSET + AudioManagement_ChannelParameter_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioManagement_ChannelParameter_Status.ID)
            self.hdr.SetDataLength(AudioManagement_ChannelParameter_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioManagement.ChannelParameter.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Channel being set"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetParam(self, enumAsInt=0):
        """Audio parameter being set"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = AudioManagement_ChannelParameter_Status.ReverseParameterTypes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetTotalSteps(self):
        """Total parameter steps"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentStep(self):
        """Current parameter step"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Channel being set"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetParam(self, value):
        """Audio parameter being set"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = AudioManagement_ChannelParameter_Status.ParameterTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetTotalSteps(self, value):
        """Total parameter steps"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentStep(self, value):
        """Current parameter step"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioManagement_ChannelParameter_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Channel being set",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Param",type="enumeration",units="",minVal="0",maxVal="255",description="Audio parameter being set",get=GetParam,set=SetParam,count=1, bitfieldInfo = [], enum = [ParameterTypes, ReverseParameterTypes]),\
        FieldInfo(name="TotalSteps",type="int",units="",minVal="0",maxVal="255",description="Total parameter steps",get=GetTotalSteps,set=SetTotalSteps,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentStep",type="int",units="",minVal="0",maxVal="255",description="Current parameter step",get=GetCurrentStep,set=SetCurrentStep,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioManagement.ChannelParameter.Status", AudioManagement_ChannelParameter_Status.ID, AudioManagement_ChannelParameter_Status)
