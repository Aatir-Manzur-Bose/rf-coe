#    obj/CodeGenerator/Python/AudioModes/Capabilities.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/Capabilities.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_Capabilities_Get :
    ID = 127009
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_Capabilities_Get.MSG_OFFSET + AudioModes_Capabilities_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_Capabilities_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_Capabilities_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_Capabilities_Get.MSG_OFFSET + AudioModes_Capabilities_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_Capabilities_Get.ID)
            self.hdr.SetDataLength(AudioModes_Capabilities_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.Capabilities.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioModes.Capabilities.Get", AudioModes_Capabilities_Get.ID, AudioModes_Capabilities_Get)
#    obj/CodeGenerator/Python/AudioModes/Capabilities.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/Capabilities.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_Capabilities_Status :
    ID = 127011
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_Capabilities_Status.MSG_OFFSET + AudioModes_Capabilities_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_Capabilities_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_Capabilities_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_Capabilities_Status.MSG_OFFSET + AudioModes_Capabilities_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_Capabilities_Status.ID)
            self.hdr.SetDataLength(AudioModes_Capabilities_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.Capabilities.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFixedModes(self):
        """The number of Bose-defined modes supported by this product."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCustomModes(self):
        """The number of user-defined modes supported by this product."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def GetFeatureFlags(self):
        """Bitfield denoting which Audio Modes features are supported by this product."""
        value = struct.unpack_from('>L', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetCNCSupported(self):
        """CNCSupported - If set, indicates that this device supports setting the CNC level."""
        value = (self.GetFeatureFlags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetAutoCNCSupported(self):
        """AutoCNCSupported - If set, indicates that this device supports automatic noise reduction control."""
        value = (self.GetFeatureFlags() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetSpatialAudioFixedToHeadAndFixedToRoomSupported(self):
        """SpatialAudioFixedToHeadAndFixedToRoomSupported - If set, indicates that this device supports the two spatial audio modes fixed-to-head and fixed-to-room."""
        value = (self.GetFeatureFlags() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetANRWindToggleSupported(self):
        """ANRWindToggleSupported - If set, indicates that this device supports a wind-mitigating algorithm while in full ANR."""
        value = (self.GetFeatureFlags() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUserFavoritesSupported(self):
        """UserFavoritesSupported - If set, indicates that this device supports favoriting and unfavoriting both fixed and custom modes."""
        value = (self.GetFeatureFlags() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('134217727')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnassigned(self):
        """Unassigned"""
        value = (self.GetFeatureFlags() >> 5) & 0x7ffffff
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetMinNumberOfFavoritedModes(self):
        """The minimum allowable amount of simulatneously favorited modes."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFixedModes(self, value):
        """The number of Bose-defined modes supported by this product."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCustomModes(self, value):
        """The number of user-defined modes supported by this product."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('2')
    @msg.size('4')
    @msg.count(1)
    def SetFeatureFlags(self, value):
        """Bitfield denoting which Audio Modes features are supported by this product."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetCNCSupported(self, value):
        """CNCSupported - If set, indicates that this device supports setting the CNC level."""
        tmp = min(max(value, 0), 1)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetAutoCNCSupported(self, value):
        """AutoCNCSupported - If set, indicates that this device supports automatic noise reduction control."""
        tmp = min(max(value, 0), 1)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetSpatialAudioFixedToHeadAndFixedToRoomSupported(self, value):
        """SpatialAudioFixedToHeadAndFixedToRoomSupported - If set, indicates that this device supports the two spatial audio modes fixed-to-head and fixed-to-room."""
        tmp = min(max(value, 0), 1)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetANRWindToggleSupported(self, value):
        """ANRWindToggleSupported - If set, indicates that this device supports a wind-mitigating algorithm while in full ANR."""
        tmp = min(max(value, 0), 1)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUserFavoritesSupported(self, value):
        """UserFavoritesSupported - If set, indicates that this device supports favoriting and unfavoriting both fixed and custom modes."""
        tmp = min(max(value, 0), 1)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('134217727')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnassigned(self, value):
        """Unassigned"""
        tmp = min(max(value, 0), 134217727)
        self.SetFeatureFlags((self.GetFeatureFlags() & ~(0x7ffffff << 5)) | ((tmp & 0x7ffffff) << 5))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetMinNumberOfFavoritedModes(self, value):
        """The minimum allowable amount of simulatneously favorited modes."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_Capabilities_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="FixedModes",type="int",units="",minVal="0",maxVal="255",description="The number of Bose-defined modes supported by this product.",get=GetFixedModes,set=SetFixedModes,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CustomModes",type="int",units="",minVal="0",maxVal="255",description="The number of user-defined modes supported by this product.",get=GetCustomModes,set=SetCustomModes,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FeatureFlags",type="int",units="",minVal="0",maxVal="4294967295",description="Bitfield denoting which Audio Modes features are supported by this product.",get=GetFeatureFlags,set=SetFeatureFlags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="CNCSupported",type="int",units="",minVal="0",maxVal="1",description="CNCSupported - If set, indicates that this device supports setting the CNC level.",get=GetCNCSupported,set=SetCNCSupported, enum = []),\
            BitFieldInfo(name="AutoCNCSupported",type="int",units="",minVal="0",maxVal="1",description="AutoCNCSupported - If set, indicates that this device supports automatic noise reduction control.",get=GetAutoCNCSupported,set=SetAutoCNCSupported, enum = []),\
            BitFieldInfo(name="SpatialAudioFixedToHeadAndFixedToRoomSupported",type="int",units="",minVal="0",maxVal="1",description="SpatialAudioFixedToHeadAndFixedToRoomSupported - If set, indicates that this device supports the two spatial audio modes fixed-to-head and fixed-to-room.",get=GetSpatialAudioFixedToHeadAndFixedToRoomSupported,set=SetSpatialAudioFixedToHeadAndFixedToRoomSupported, enum = []),\
            BitFieldInfo(name="ANRWindToggleSupported",type="int",units="",minVal="0",maxVal="1",description="ANRWindToggleSupported - If set, indicates that this device supports a wind-mitigating algorithm while in full ANR.",get=GetANRWindToggleSupported,set=SetANRWindToggleSupported, enum = []),\
            BitFieldInfo(name="UserFavoritesSupported",type="int",units="",minVal="0",maxVal="1",description="UserFavoritesSupported - If set, indicates that this device supports favoriting and unfavoriting both fixed and custom modes.",get=GetUserFavoritesSupported,set=SetUserFavoritesSupported, enum = []),\
            BitFieldInfo(name="Unassigned",type="int",units="",minVal="0",maxVal="134217727",description="Unassigned",get=GetUnassigned,set=SetUnassigned, enum = [])], enum = []),\
        FieldInfo(name="MinNumberOfFavoritedModes",type="int",units="",minVal="0",maxVal="255",description="The minimum allowable amount of simulatneously favorited modes.",get=GetMinNumberOfFavoritedModes,set=SetMinNumberOfFavoritedModes,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioModes.Capabilities.Status", AudioModes_Capabilities_Status.ID, AudioModes_Capabilities_Status)
