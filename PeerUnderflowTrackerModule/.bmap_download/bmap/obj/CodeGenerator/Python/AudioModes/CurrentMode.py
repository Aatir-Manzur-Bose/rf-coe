#    obj/CodeGenerator/Python/AudioModes/CurrentMode.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/CurrentMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_CurrentMode_Start :
    ID = 127029
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 3), ("Operator", 5)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (3, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Start.MSG_OFFSET + AudioModes_CurrentMode_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_CurrentMode_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_CurrentMode_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Start.MSG_OFFSET + AudioModes_CurrentMode_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_CurrentMode_Start.ID)
            self.hdr.SetDataLength(AudioModes_CurrentMode_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.CurrentMode.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetModeIndex(self):
        """Index of mode to be initiated."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_CurrentMode_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetPlayPrompt(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_CurrentMode_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetPlayTone(self):
        """Flag indicating whether or not to play the voice prompt for this mode (0 = don't play, 1 = play)."""
        value = (self.GetPlayPrompt() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetPlayPrompt() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetModeIndex(self, value):
        """Index of mode to be initiated."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_CurrentMode_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetPlayPrompt(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_CurrentMode_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetPlayTone(self, value):
        """Flag indicating whether or not to play the voice prompt for this mode (0 = don't play, 1 = play)."""
        tmp = min(max(value, 0), 1)
        self.SetPlayPrompt((self.GetPlayPrompt() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetPlayPrompt((self.GetPlayPrompt() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ModeIndex",type="int",units="",minVal="0",maxVal="255",description="Index of mode to be initiated.",get=GetModeIndex,set=SetModeIndex,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PlayPrompt",type="int",units="",minVal="0",maxVal="255",description="",get=GetPlayPrompt,set=SetPlayPrompt,count=1, bitfieldInfo = [\
            BitFieldInfo(name="PlayTone",type="int",units="",minVal="0",maxVal="1",description="Flag indicating whether or not to play the voice prompt for this mode (0 = don't play, 1 = play).",get=GetPlayTone,set=SetPlayTone, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("AudioModes.CurrentMode.Start", AudioModes_CurrentMode_Start.ID, AudioModes_CurrentMode_Start)
#    obj/CodeGenerator/Python/AudioModes/CurrentMode.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/CurrentMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_CurrentMode_Get :
    ID = 127025
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Get.MSG_OFFSET + AudioModes_CurrentMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_CurrentMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_CurrentMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Get.MSG_OFFSET + AudioModes_CurrentMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_CurrentMode_Get.ID)
            self.hdr.SetDataLength(AudioModes_CurrentMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.CurrentMode.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioModes.CurrentMode.Get", AudioModes_CurrentMode_Get.ID, AudioModes_CurrentMode_Get)
#    obj/CodeGenerator/Python/AudioModes/CurrentMode.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/CurrentMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_CurrentMode_Processing :
    ID = 127031
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 3), ("Operator", 7)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (3, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Processing.MSG_OFFSET + AudioModes_CurrentMode_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_CurrentMode_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_CurrentMode_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Processing.MSG_OFFSET + AudioModes_CurrentMode_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_CurrentMode_Processing.ID)
            self.hdr.SetDataLength(AudioModes_CurrentMode_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.CurrentMode.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("AudioModes.CurrentMode.Processing", AudioModes_CurrentMode_Processing.ID, AudioModes_CurrentMode_Processing)
#    obj/CodeGenerator/Python/AudioModes/CurrentMode.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/CurrentMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_CurrentMode_Result :
    ID = 127030
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 3), ("Operator", 6)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (3, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Result.MSG_OFFSET + AudioModes_CurrentMode_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_CurrentMode_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_CurrentMode_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Result.MSG_OFFSET + AudioModes_CurrentMode_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_CurrentMode_Result.ID)
            self.hdr.SetDataLength(AudioModes_CurrentMode_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.CurrentMode.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetModeIndex(self):
        """Index of audio mode that has been initiated."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_CurrentMode_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetModeIndex(self, value):
        """Index of audio mode that has been initiated."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_CurrentMode_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ModeIndex",type="int",units="",minVal="0",maxVal="255",description="Index of audio mode that has been initiated.",get=GetModeIndex,set=SetModeIndex,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioModes.CurrentMode.Result", AudioModes_CurrentMode_Result.ID, AudioModes_CurrentMode_Result)
#    obj/CodeGenerator/Python/AudioModes/CurrentMode.py
#    Created 27/07/2023 at 10:09:39 from:
#        Messages = messages/AudioModes/CurrentMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class AudioModes_CurrentMode_Status :
    ID = 127027
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 31), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(31, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Status.MSG_OFFSET + AudioModes_CurrentMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, AudioModes_CurrentMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, AudioModes_CurrentMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(AudioModes_CurrentMode_Status.MSG_OFFSET + AudioModes_CurrentMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(AudioModes_CurrentMode_Status.ID)
            self.hdr.SetDataLength(AudioModes_CurrentMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "AudioModes.CurrentMode.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetModeIndex(self):
        """Index of the current mode. This is 0xFF (255) if no mode is currently selected."""
        value = struct.unpack_from('B', self.rawBuffer(), AudioModes_CurrentMode_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetModeIndex(self, value):
        """Index of the current mode. This is 0xFF (255) if no mode is currently selected."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), AudioModes_CurrentMode_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ModeIndex",type="int",units="",minVal="0",maxVal="255",description="Index of the current mode. This is 0xFF (255) if no mode is currently selected.",get=GetModeIndex,set=SetModeIndex,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("AudioModes.CurrentMode.Status", AudioModes_CurrentMode_Status.ID, AudioModes_CurrentMode_Status)
