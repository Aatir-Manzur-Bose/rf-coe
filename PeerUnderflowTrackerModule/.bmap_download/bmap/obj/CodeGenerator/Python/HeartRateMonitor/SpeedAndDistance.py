#    obj/CodeGenerator/Python/HeartRateMonitor/SpeedAndDistance.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/SpeedAndDistance.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_SpeedAndDistance_Get :
    ID = 57409
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 4), ("Operator", 1)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (4, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_SpeedAndDistance_Get.MSG_OFFSET + HeartRateMonitor_SpeedAndDistance_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_SpeedAndDistance_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_SpeedAndDistance_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_SpeedAndDistance_Get.MSG_OFFSET + HeartRateMonitor_SpeedAndDistance_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_SpeedAndDistance_Get.ID)
            self.hdr.SetDataLength(HeartRateMonitor_SpeedAndDistance_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.SpeedAndDistance.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HeartRateMonitor.SpeedAndDistance.Get", HeartRateMonitor_SpeedAndDistance_Get.ID, HeartRateMonitor_SpeedAndDistance_Get)
#    obj/CodeGenerator/Python/HeartRateMonitor/SpeedAndDistance.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/SpeedAndDistance.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_SpeedAndDistance_Status :
    ID = 57411
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 4), ("Operator", 3)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (4, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + HeartRateMonitor_SpeedAndDistance_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_SpeedAndDistance_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_SpeedAndDistance_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + HeartRateMonitor_SpeedAndDistance_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_SpeedAndDistance_Status.ID)
            self.hdr.SetDataLength(HeartRateMonitor_SpeedAndDistance_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.SpeedAndDistance.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetSpeed(self):
        """Speed (meters per hour)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetDistance(self):
        """Distance (meters)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetSpeed(self, value):
        """Speed (meters per hour)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetDistance(self, value):
        """Distance (meters)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_SpeedAndDistance_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Speed",type="int",units="",minVal="0",maxVal="65535",description="Speed (meters per hour)",get=GetSpeed,set=SetSpeed,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Distance",type="int",units="",minVal="0",maxVal="65535",description="Distance (meters)",get=GetDistance,set=SetDistance,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.SpeedAndDistance.Status", HeartRateMonitor_SpeedAndDistance_Status.ID, HeartRateMonitor_SpeedAndDistance_Status)
