#    obj/CodeGenerator/Python/HeartRateMonitor/WorkoutInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/WorkoutInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_WorkoutInfo_Get :
    ID = 57489
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 9), ("Operator", 1)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (9, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_Get.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_WorkoutInfo_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_WorkoutInfo_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_Get.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_WorkoutInfo_Get.ID)
            self.hdr.SetDataLength(HeartRateMonitor_WorkoutInfo_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.WorkoutInfo.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HeartRateMonitor.WorkoutInfo.Get", HeartRateMonitor_WorkoutInfo_Get.ID, HeartRateMonitor_WorkoutInfo_Get)
#    obj/CodeGenerator/Python/HeartRateMonitor/WorkoutInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/WorkoutInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_WorkoutInfo_SetGet :
    ID = 57490
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ActivityMode = OrderedDict([("NotSet", 0), ("Running", 1), ("LowHeartRate", 2), ("Cycling", 3), ("WeightsAndSports", 4), ("Aerobics", 5)])
    ReverseActivityMode = OrderedDict([(0, "NotSet"), (1, "Running"), (2, "LowHeartRate"), (3, "Cycling"), (4, "WeightsAndSports"), (5, "Aerobics")])
    HeartRateZones = OrderedDict([("NotSet", 0), ("ModerateZone", 1), ("FitnessZone", 2), ("AerobicZone", 3), ("AnaerobicZone", 4), ("MaximumEffort", 5)])
    ReverseHeartRateZones = OrderedDict([(0, "NotSet"), (1, "ModerateZone"), (2, "FitnessZone"), (3, "AerobicZone"), (4, "AnaerobicZone"), (5, "MaximumEffort")])
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 9), ("Operator", 2)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (9, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_SetGet.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_WorkoutInfo_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_WorkoutInfo_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_SetGet.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_WorkoutInfo_SetGet.ID)
            self.hdr.SetDataLength(HeartRateMonitor_WorkoutInfo_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.WorkoutInfo.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSetGetData(self):
        """WorkoutInfo Data"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_WorkoutInfo_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetActivityMode(self, enumAsInt=0):
        """Activity Mode of User"""
        value = (self.GetSetGetData() >> 0) & 0xf
        if not enumAsInt:
            value = HeartRateMonitor_WorkoutInfo_SetGet.ReverseActivityMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetHeartRateZone(self, enumAsInt=0):
        """Heart rate zone of User"""
        value = (self.GetSetGetData() >> 4) & 0xf
        if not enumAsInt:
            value = HeartRateMonitor_WorkoutInfo_SetGet.ReverseHeartRateZones.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSetGetData(self, value):
        """WorkoutInfo Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_WorkoutInfo_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetActivityMode(self, value):
        """Activity Mode of User"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HeartRateMonitor_WorkoutInfo_SetGet.ActivityMode.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetSetGetData((self.GetSetGetData() & ~(0xf << 0)) | ((tmp & 0xf) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetHeartRateZone(self, value):
        """Heart rate zone of User"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HeartRateMonitor_WorkoutInfo_SetGet.HeartRateZones.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetSetGetData((self.GetSetGetData() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SetGetData",type="int",units="",minVal="0",maxVal="255",description="WorkoutInfo Data",get=GetSetGetData,set=SetSetGetData,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ActivityMode",type="enumeration",units="",minVal="0",maxVal="15",description="Activity Mode of User",get=GetActivityMode,set=SetActivityMode, enum = [ActivityMode, ReverseActivityMode]),\
            BitFieldInfo(name="HeartRateZone",type="enumeration",units="",minVal="0",maxVal="15",description="Heart rate zone of User",get=GetHeartRateZone,set=SetHeartRateZone, enum = [HeartRateZones, ReverseHeartRateZones])], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.WorkoutInfo.SetGet", HeartRateMonitor_WorkoutInfo_SetGet.ID, HeartRateMonitor_WorkoutInfo_SetGet)
#    obj/CodeGenerator/Python/HeartRateMonitor/WorkoutInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/WorkoutInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_WorkoutInfo_Status :
    ID = 57491
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ActivityMode = OrderedDict([("NotSet", 0), ("Running", 1), ("LowHeartRate", 2), ("Cycling", 3), ("WeightsAndSports", 4), ("Aerobics", 5)])
    ReverseActivityMode = OrderedDict([(0, "NotSet"), (1, "Running"), (2, "LowHeartRate"), (3, "Cycling"), (4, "WeightsAndSports"), (5, "Aerobics")])
    HeartRateZones = OrderedDict([("NotSet", 0), ("ModerateZone", 1), ("FitnessZone", 2), ("AerobicZone", 3), ("AnaerobicZone", 4), ("MaximumEffort", 5)])
    ReverseHeartRateZones = OrderedDict([(0, "NotSet"), (1, "ModerateZone"), (2, "FitnessZone"), (3, "AerobicZone"), (4, "AnaerobicZone"), (5, "MaximumEffort")])
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 9), ("Operator", 3)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (9, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_Status.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_WorkoutInfo_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_WorkoutInfo_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_WorkoutInfo_Status.MSG_OFFSET + HeartRateMonitor_WorkoutInfo_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_WorkoutInfo_Status.ID)
            self.hdr.SetDataLength(HeartRateMonitor_WorkoutInfo_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.WorkoutInfo.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSetGetData(self):
        """WorkoutInfo Data"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_WorkoutInfo_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetActivityMode(self, enumAsInt=0):
        """Activity Mode of User"""
        value = (self.GetSetGetData() >> 0) & 0xf
        if not enumAsInt:
            value = HeartRateMonitor_WorkoutInfo_Status.ReverseActivityMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetHeartRateZone(self, enumAsInt=0):
        """Heart rate zone of User"""
        value = (self.GetSetGetData() >> 4) & 0xf
        if not enumAsInt:
            value = HeartRateMonitor_WorkoutInfo_Status.ReverseHeartRateZones.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSetGetData(self, value):
        """WorkoutInfo Data"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_WorkoutInfo_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetActivityMode(self, value):
        """Activity Mode of User"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HeartRateMonitor_WorkoutInfo_Status.ActivityMode.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetSetGetData((self.GetSetGetData() & ~(0xf << 0)) | ((tmp & 0xf) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetHeartRateZone(self, value):
        """Heart rate zone of User"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HeartRateMonitor_WorkoutInfo_Status.HeartRateZones.get(value, defaultValue)
        tmp = min(max(value, 0), 15)
        self.SetSetGetData((self.GetSetGetData() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SetGetData",type="int",units="",minVal="0",maxVal="255",description="WorkoutInfo Data",get=GetSetGetData,set=SetSetGetData,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ActivityMode",type="enumeration",units="",minVal="0",maxVal="15",description="Activity Mode of User",get=GetActivityMode,set=SetActivityMode, enum = [ActivityMode, ReverseActivityMode]),\
            BitFieldInfo(name="HeartRateZone",type="enumeration",units="",minVal="0",maxVal="15",description="Heart rate zone of User",get=GetHeartRateZone,set=SetHeartRateZone, enum = [HeartRateZones, ReverseHeartRateZones])], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.WorkoutInfo.Status", HeartRateMonitor_WorkoutInfo_Status.ID, HeartRateMonitor_WorkoutInfo_Status)
