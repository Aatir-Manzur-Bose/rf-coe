#    obj/CodeGenerator/Python/HeartRateMonitor/UserInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/UserInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_UserInfo_Get :
    ID = 57473
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 8), ("Operator", 1)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (8, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_Get.MSG_OFFSET + HeartRateMonitor_UserInfo_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_UserInfo_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_UserInfo_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_Get.MSG_OFFSET + HeartRateMonitor_UserInfo_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_UserInfo_Get.ID)
            self.hdr.SetDataLength(HeartRateMonitor_UserInfo_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.UserInfo.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HeartRateMonitor.UserInfo.Get", HeartRateMonitor_UserInfo_Get.ID, HeartRateMonitor_UserInfo_Get)
#    obj/CodeGenerator/Python/HeartRateMonitor/UserInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/UserInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_UserInfo_SetGet :
    ID = 57474
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 8), ("Operator", 2)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (8, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + HeartRateMonitor_UserInfo_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_UserInfo_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_UserInfo_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + HeartRateMonitor_UserInfo_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_UserInfo_SetGet.ID)
            self.hdr.SetDataLength(HeartRateMonitor_UserInfo_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.UserInfo.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetAge(self):
        """Age (in months)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetIsMale(self):
        """Gender true if male, false if female"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetWeight(self):
        """Weight (in 1/10 kg)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetHeight(self):
        """Height (in cm)"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetRestingHeartRate(self):
        """Resting heart rate (in BPM)"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetAge(self, value):
        """Age (in months)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetIsMale(self, value):
        """Gender true if male, false if female"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetWeight(self, value):
        """Weight (in 1/10 kg)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetHeight(self, value):
        """Height (in cm)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetRestingHeartRate(self, value):
        """Resting heart rate (in BPM)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_SetGet.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Age",type="int",units="",minVal="0",maxVal="65535",description="Age (in months)",get=GetAge,set=SetAge,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="IsMale",type="int",units="Boolean",minVal="0",maxVal="255",description="Gender true if male, false if female",get=GetIsMale,set=SetIsMale,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Weight",type="int",units="",minVal="0",maxVal="65535",description="Weight (in 1/10 kg)",get=GetWeight,set=SetWeight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Height",type="int",units="",minVal="0",maxVal="255",description="Height (in cm)",get=GetHeight,set=SetHeight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RestingHeartRate",type="int",units="",minVal="0",maxVal="255",description="Resting heart rate (in BPM)",get=GetRestingHeartRate,set=SetRestingHeartRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.UserInfo.SetGet", HeartRateMonitor_UserInfo_SetGet.ID, HeartRateMonitor_UserInfo_SetGet)
#    obj/CodeGenerator/Python/HeartRateMonitor/UserInfo.py
#    Created 27/07/2023 at 10:10:49 from:
#        Messages = messages/HeartRateMonitor/UserInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_UserInfo_Status :
    ID = 57475
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_Status.MSG_OFFSET + HeartRateMonitor_UserInfo_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_UserInfo_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_UserInfo_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_UserInfo_Status.MSG_OFFSET + HeartRateMonitor_UserInfo_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_UserInfo_Status.ID)
            self.hdr.SetDataLength(HeartRateMonitor_UserInfo_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.UserInfo.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetAge(self):
        """Age (in months)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetIsMale(self):
        """Gender true if male, false if female"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def GetWeight(self):
        """Weight (in 1/10 kg)"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetHeight(self):
        """Height (in cm)"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetRestingHeartRate(self):
        """Resting heart rate (in BPM)"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetAge(self, value):
        """Age (in months)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetIsMale(self, value):
        """Gender true if male, false if female"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('3')
    @msg.size('2')
    @msg.count(1)
    def SetWeight(self, value):
        """Weight (in 1/10 kg)"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetHeight(self, value):
        """Height (in cm)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetRestingHeartRate(self, value):
        """Resting heart rate (in BPM)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_UserInfo_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Age",type="int",units="",minVal="0",maxVal="65535",description="Age (in months)",get=GetAge,set=SetAge,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="IsMale",type="int",units="Boolean",minVal="0",maxVal="255",description="Gender true if male, false if female",get=GetIsMale,set=SetIsMale,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Weight",type="int",units="",minVal="0",maxVal="65535",description="Weight (in 1/10 kg)",get=GetWeight,set=SetWeight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Height",type="int",units="",minVal="0",maxVal="255",description="Height (in cm)",get=GetHeight,set=SetHeight,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RestingHeartRate",type="int",units="",minVal="0",maxVal="255",description="Resting heart rate (in BPM)",get=GetRestingHeartRate,set=SetRestingHeartRate,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.UserInfo.Status", HeartRateMonitor_UserInfo_Status.ID, HeartRateMonitor_UserInfo_Status)
