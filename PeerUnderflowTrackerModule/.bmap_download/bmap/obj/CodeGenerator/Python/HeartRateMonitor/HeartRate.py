#    obj/CodeGenerator/Python/HeartRateMonitor/HeartRate.py
#    Created 27/07/2023 at 10:10:48 from:
#        Messages = messages/HeartRateMonitor/HeartRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_HeartRate_Get :
    ID = 57377
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_HeartRate_Get.MSG_OFFSET + HeartRateMonitor_HeartRate_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_HeartRate_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_HeartRate_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_HeartRate_Get.MSG_OFFSET + HeartRateMonitor_HeartRate_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_HeartRate_Get.ID)
            self.hdr.SetDataLength(HeartRateMonitor_HeartRate_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.HeartRate.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HeartRateMonitor.HeartRate.Get", HeartRateMonitor_HeartRate_Get.ID, HeartRateMonitor_HeartRate_Get)
#    obj/CodeGenerator/Python/HeartRateMonitor/HeartRate.py
#    Created 27/07/2023 at 10:10:48 from:
#        Messages = messages/HeartRateMonitor/HeartRate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_HeartRate_Status :
    ID = 57379
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    HeartRateMonitorStatus = OrderedDict([("Unknown", 0), ("IsOff", 1), ("Initializing", 2), ("AcquiringHeartRate", 3), ("SensorNotContactingBody", 4), ("AcquiredHeartRate", 5), ("Error", 6)])
    ReverseHeartRateMonitorStatus = OrderedDict([(0, "Unknown"), (1, "IsOff"), (2, "Initializing"), (3, "AcquiringHeartRate"), (4, "SensorNotContactingBody"), (5, "AcquiredHeartRate"), (6, "Error")])
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_HeartRate_Status.MSG_OFFSET + HeartRateMonitor_HeartRate_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_HeartRate_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_HeartRate_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_HeartRate_Status.MSG_OFFSET + HeartRateMonitor_HeartRate_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_HeartRate_Status.ID)
            self.hdr.SetDataLength(HeartRateMonitor_HeartRate_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.HeartRate.Status"
    # Accessors
    @msg.units('HeartRateMonitorStatus')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetHeartRateMonitorStatus(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), HeartRateMonitor_HeartRate_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = HeartRateMonitor_HeartRate_Status.ReverseHeartRateMonitorStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def GetBPM(self):
        """Heart Rate in BPMs"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HeartRate_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('HeartRateMonitorStatus')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetHeartRateMonitorStatus(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = HeartRateMonitor_HeartRate_Status.HeartRateMonitorStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), HeartRateMonitor_HeartRate_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('1')
    @msg.size('2')
    @msg.count(1)
    def SetBPM(self, value):
        """Heart Rate in BPMs"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HeartRate_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="HeartRateMonitorStatus",type="enumeration",units="HeartRateMonitorStatus",minVal="0",maxVal="255",description="",get=GetHeartRateMonitorStatus,set=SetHeartRateMonitorStatus,count=1, bitfieldInfo = [], enum = [HeartRateMonitorStatus, ReverseHeartRateMonitorStatus]),\
        FieldInfo(name="BPM",type="int",units="",minVal="0",maxVal="65535",description="Heart Rate in BPMs",get=GetBPM,set=SetBPM,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.HeartRate.Status", HeartRateMonitor_HeartRate_Status.ID, HeartRateMonitor_HeartRate_Status)
