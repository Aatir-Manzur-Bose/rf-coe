#    obj/CodeGenerator/Python/HeartRateMonitor/HardwareInfo.py
#    Created 27/07/2023 at 10:10:48 from:
#        Messages = messages/HeartRateMonitor/HardwareInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_HardwareInfo_Get :
    ID = 57585
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 15), ("Operator", 1)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (15, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_HardwareInfo_Get.MSG_OFFSET + HeartRateMonitor_HardwareInfo_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_HardwareInfo_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_HardwareInfo_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_HardwareInfo_Get.MSG_OFFSET + HeartRateMonitor_HardwareInfo_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_HardwareInfo_Get.ID)
            self.hdr.SetDataLength(HeartRateMonitor_HardwareInfo_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.HardwareInfo.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("HeartRateMonitor.HardwareInfo.Get", HeartRateMonitor_HardwareInfo_Get.ID, HeartRateMonitor_HardwareInfo_Get)
#    obj/CodeGenerator/Python/HeartRateMonitor/HardwareInfo.py
#    Created 27/07/2023 at 10:10:48 from:
#        Messages = messages/HeartRateMonitor/HardwareInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class HeartRateMonitor_HardwareInfo_Status :
    ID = 57587
    SIZE = 18
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 14), ("Function", 15), ("Operator", 3)])
    ReverseIDs = OrderedDict([(14, "FunctionBlock"), (15, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + HeartRateMonitor_HardwareInfo_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, HeartRateMonitor_HardwareInfo_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, HeartRateMonitor_HardwareInfo_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + HeartRateMonitor_HardwareInfo_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(HeartRateMonitor_HardwareInfo_Status.ID)
            self.hdr.SetDataLength(HeartRateMonitor_HardwareInfo_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "HeartRateMonitor.HardwareInfo.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetMicroprocessorPartID(self):
        """Microprocessor - Part ID"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetMicroprocessorSerialIDUpper(self):
        """Microprocessor - Serial ID Upper"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetMicroprocessorSerialIDLower(self):
        """Microprocessor - Serial ID Lower"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetSensorPartID(self):
        """Sensor - Part ID"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetSensorSerialIDUpper(self):
        """Sensor - Serial ID Upper"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetSensorSerialIDLower(self):
        """Sensor - Serial ID Lower"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetAccelerometerPartID(self):
        """Accelerometer - Part ID"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetAccelerometerSerialIDUpper(self):
        """Accelerometer - Serial ID Upper"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetAccelerometerSerialIDLower(self):
        """Accelerometer - Serial ID Lower"""
        value = struct.unpack_from('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetMicroprocessorPartID(self, value):
        """Microprocessor - Part ID"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetMicroprocessorSerialIDUpper(self, value):
        """Microprocessor - Serial ID Upper"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetMicroprocessorSerialIDLower(self, value):
        """Microprocessor - Serial ID Lower"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetSensorPartID(self, value):
        """Sensor - Part ID"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetSensorSerialIDUpper(self, value):
        """Sensor - Serial ID Upper"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetSensorSerialIDLower(self, value):
        """Sensor - Serial ID Lower"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetAccelerometerPartID(self, value):
        """Accelerometer - Part ID"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetAccelerometerSerialIDUpper(self, value):
        """Accelerometer - Serial ID Upper"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetAccelerometerSerialIDLower(self, value):
        """Accelerometer - Serial ID Lower"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), HeartRateMonitor_HardwareInfo_Status.MSG_OFFSET + 16, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MicroprocessorPartID",type="int",units="",minVal="0",maxVal="65535",description="Microprocessor - Part ID",get=GetMicroprocessorPartID,set=SetMicroprocessorPartID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MicroprocessorSerialIDUpper",type="int",units="",minVal="0",maxVal="65535",description="Microprocessor - Serial ID Upper",get=GetMicroprocessorSerialIDUpper,set=SetMicroprocessorSerialIDUpper,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MicroprocessorSerialIDLower",type="int",units="",minVal="0",maxVal="65535",description="Microprocessor - Serial ID Lower",get=GetMicroprocessorSerialIDLower,set=SetMicroprocessorSerialIDLower,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorPartID",type="int",units="",minVal="0",maxVal="65535",description="Sensor - Part ID",get=GetSensorPartID,set=SetSensorPartID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorSerialIDUpper",type="int",units="",minVal="0",maxVal="65535",description="Sensor - Serial ID Upper",get=GetSensorSerialIDUpper,set=SetSensorSerialIDUpper,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorSerialIDLower",type="int",units="",minVal="0",maxVal="65535",description="Sensor - Serial ID Lower",get=GetSensorSerialIDLower,set=SetSensorSerialIDLower,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccelerometerPartID",type="int",units="",minVal="0",maxVal="65535",description="Accelerometer - Part ID",get=GetAccelerometerPartID,set=SetAccelerometerPartID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccelerometerSerialIDUpper",type="int",units="",minVal="0",maxVal="65535",description="Accelerometer - Serial ID Upper",get=GetAccelerometerSerialIDUpper,set=SetAccelerometerSerialIDUpper,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AccelerometerSerialIDLower",type="int",units="",minVal="0",maxVal="65535",description="Accelerometer - Serial ID Lower",get=GetAccelerometerSerialIDLower,set=SetAccelerometerSerialIDLower,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("HeartRateMonitor.HardwareInfo.Status", HeartRateMonitor_HardwareInfo_Status.ID, HeartRateMonitor_HardwareInfo_Status)
