#    obj/CodeGenerator/Python/Network/LogStatus.py
#    Created 27/07/2023 at 10:10:56 from:
#        Messages = messages/Network/LogStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class LogStatus :
    ID = 4294967048
    SIZE = 66
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    LogFileTypes = OrderedDict([("Binary", 0), ("JSON", 1)])
    ReverseLogFileTypes = OrderedDict([(0, "Binary"), (1, "JSON")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(LogStatus.MSG_OFFSET + LogStatus.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, LogStatus.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, LogStatus.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(LogStatus.MSG_OFFSET + LogStatus.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(LogStatus.ID)
            self.hdr.SetDataLength(LogStatus.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Network.LogStatus"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetLogOpen(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), LogStatus.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetLogFileType(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), LogStatus.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = LogStatus.ReverseLogFileTypes.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(64)
    def GetLogFileName(self):
        """The name of the log file."""
        count = 64
        if count > len(self.rawBuffer())-(LogStatus.MSG_OFFSET + 2):
            count = len(self.rawBuffer())-(LogStatus.MSG_OFFSET + 2)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), LogStatus.MSG_OFFSET + 2)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetLogOpen(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), LogStatus.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetLogFileType(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = LogStatus.LogFileTypes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), LogStatus.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(64)
    def SetLogFileName(self, value):
        """The name of the log file."""
        tmp = value.encode('utf-8')
        struct.pack_into('64s', self.rawBuffer(), LogStatus.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="LogOpen",type="int",units="Boolean",minVal="0",maxVal="255",description="",get=GetLogOpen,set=SetLogOpen,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="LogFileType",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetLogFileType,set=SetLogFileType,count=1, bitfieldInfo = [], enum = [LogFileTypes, ReverseLogFileTypes]),\
        FieldInfo(name="LogFileName",type="string",units="ASCII",minVal="0",maxVal="255",description="The name of the log file.",get=GetLogFileName,set=SetLogFileName,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Network.LogStatus", LogStatus.ID, LogStatus)
