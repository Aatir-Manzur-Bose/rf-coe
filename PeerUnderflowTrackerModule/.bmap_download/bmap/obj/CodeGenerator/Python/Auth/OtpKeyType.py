#    obj/CodeGenerator/Python/Auth/OtpKeyType.py
#    Created 27/07/2023 at 10:09:44 from:
#        Messages = messages/Auth/OtpKeyType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_OtpKeyType_Get :
    ID = 73905
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_OtpKeyType_Get.MSG_OFFSET + Auth_OtpKeyType_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_OtpKeyType_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_OtpKeyType_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_OtpKeyType_Get.MSG_OFFSET + Auth_OtpKeyType_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_OtpKeyType_Get.ID)
            self.hdr.SetDataLength(Auth_OtpKeyType_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.OtpKeyType.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.OtpKeyType.Get", Auth_OtpKeyType_Get.ID, Auth_OtpKeyType_Get)
#    obj/CodeGenerator/Python/Auth/OtpKeyType.py
#    Created 27/07/2023 at 10:09:44 from:
#        Messages = messages/Auth/OtpKeyType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_OtpKeyType_Status :
    ID = 73907
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    OtpKeyType = OrderedDict([("otp_invalid", 0), ("otp_none", 1), ("otp_deve", 2), ("otp_prod", 3)])
    ReverseOtpKeyType = OrderedDict([(0, "otp_invalid"), (1, "otp_none"), (2, "otp_deve"), (3, "otp_prod")])
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_OtpKeyType_Status.MSG_OFFSET + Auth_OtpKeyType_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_OtpKeyType_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_OtpKeyType_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_OtpKeyType_Status.MSG_OFFSET + Auth_OtpKeyType_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_OtpKeyType_Status.ID)
            self.hdr.SetDataLength(Auth_OtpKeyType_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.OtpKeyType.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentOtpKeyType(self, enumAsInt=0):
        """Current OTP key type."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_OtpKeyType_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Auth_OtpKeyType_Status.ReverseOtpKeyType.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentOtpKeyType(self, value):
        """Current OTP key type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Auth_OtpKeyType_Status.OtpKeyType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_OtpKeyType_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentOtpKeyType",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Current OTP key type.",get=GetCurrentOtpKeyType,set=SetCurrentOtpKeyType,count=1, bitfieldInfo = [], enum = [OtpKeyType, ReverseOtpKeyType])\
    ]

Messaging.Register("Auth.OtpKeyType.Status", Auth_OtpKeyType_Status.ID, Auth_OtpKeyType_Status)
