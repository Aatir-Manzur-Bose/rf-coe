#    obj/CodeGenerator/Python/Auth/VerifyFastActivationChallengeResponse.py
#    Created 27/07/2023 at 10:09:46 from:
#        Messages = messages/Auth/VerifyFastActivationChallengeResponse.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_VerifyFastActivationChallengeResponse_Start :
    ID = 74101
    SIZE = 64
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 23), ("Operator", 5)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (23, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_VerifyFastActivationChallengeResponse_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_VerifyFastActivationChallengeResponse_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_VerifyFastActivationChallengeResponse_Start.ID)
            self.hdr.SetDataLength(Auth_VerifyFastActivationChallengeResponse_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.VerifyFastActivationChallengeResponse.Start"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Getnonce(self, idx):
        """A 128-bit activation nonce generated by the external system."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(32)
    def Getsignature(self, idx):
        """Signature of activation nonce and optionally the group ID. External system generates this signature using ECDHE secret and SHA-256 HMAC algorithm."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 16+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('48')
    @msg.size('1')
    @msg.count(16)
    def GetgroupID(self, idx):
        """Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 48+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Setnonce(self, value, idx):
        """A 128-bit activation nonce generated by the external system."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(32)
    def Setsignature(self, value, idx):
        """Signature of activation nonce and optionally the group ID. External system generates this signature using ECDHE secret and SHA-256 HMAC algorithm."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 16+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('48')
    @msg.size('1')
    @msg.count(16)
    def SetgroupID(self, value, idx):
        """Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_VerifyFastActivationChallengeResponse_Start.MSG_OFFSET + 48+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="nonce",type="int",units="hex",minVal="0",maxVal="255",description="A 128-bit activation nonce generated by the external system.",get=Getnonce,set=Setnonce,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="signature",type="int",units="hex",minVal="0",maxVal="255",description="Signature of activation nonce and optionally the group ID. External system generates this signature using ECDHE secret and SHA-256 HMAC algorithm.",get=Getsignature,set=Setsignature,count=32, bitfieldInfo = [], enum = []),\
        FieldInfo(name="groupID",type="int",units="hex",minVal="0",maxVal="255",description="Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation.",get=GetgroupID,set=SetgroupID,count=16, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.VerifyFastActivationChallengeResponse.Start", Auth_VerifyFastActivationChallengeResponse_Start.ID, Auth_VerifyFastActivationChallengeResponse_Start)
#    obj/CodeGenerator/Python/Auth/VerifyFastActivationChallengeResponse.py
#    Created 27/07/2023 at 10:09:46 from:
#        Messages = messages/Auth/VerifyFastActivationChallengeResponse.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_VerifyFastActivationChallengeResponse_Processing :
    ID = 74103
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 23), ("Operator", 7)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (23, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Processing.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_VerifyFastActivationChallengeResponse_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_VerifyFastActivationChallengeResponse_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Processing.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_VerifyFastActivationChallengeResponse_Processing.ID)
            self.hdr.SetDataLength(Auth_VerifyFastActivationChallengeResponse_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.VerifyFastActivationChallengeResponse.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.VerifyFastActivationChallengeResponse.Processing", Auth_VerifyFastActivationChallengeResponse_Processing.ID, Auth_VerifyFastActivationChallengeResponse_Processing)
#    obj/CodeGenerator/Python/Auth/VerifyFastActivationChallengeResponse.py
#    Created 27/07/2023 at 10:09:46 from:
#        Messages = messages/Auth/VerifyFastActivationChallengeResponse.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_VerifyFastActivationChallengeResponse_Result :
    ID = 74102
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 23), ("Operator", 6)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (23, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Result.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_VerifyFastActivationChallengeResponse_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_VerifyFastActivationChallengeResponse_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_VerifyFastActivationChallengeResponse_Result.MSG_OFFSET + Auth_VerifyFastActivationChallengeResponse_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_VerifyFastActivationChallengeResponse_Result.ID)
            self.hdr.SetDataLength(Auth_VerifyFastActivationChallengeResponse_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.VerifyFastActivationChallengeResponse.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.VerifyFastActivationChallengeResponse.Result", Auth_VerifyFastActivationChallengeResponse_Result.ID, Auth_VerifyFastActivationChallengeResponse_Result)
