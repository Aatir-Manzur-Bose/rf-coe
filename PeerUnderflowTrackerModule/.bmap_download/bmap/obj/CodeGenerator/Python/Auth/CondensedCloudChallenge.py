#    obj/CodeGenerator/Python/Auth/CondensedCloudChallenge.py
#    Created 27/07/2023 at 10:09:43 from:
#        Messages = messages/Auth/CondensedCloudChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_CondensedCloudChallenge_Start :
    ID = 74021
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 18), ("Operator", 5)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (18, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Start.MSG_OFFSET + Auth_CondensedCloudChallenge_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_CondensedCloudChallenge_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_CondensedCloudChallenge_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Start.MSG_OFFSET + Auth_CondensedCloudChallenge_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_CondensedCloudChallenge_Start.ID)
            self.hdr.SetDataLength(Auth_CondensedCloudChallenge_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.CondensedCloudChallenge.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.CondensedCloudChallenge.Start", Auth_CondensedCloudChallenge_Start.ID, Auth_CondensedCloudChallenge_Start)
#    obj/CodeGenerator/Python/Auth/CondensedCloudChallenge.py
#    Created 27/07/2023 at 10:09:43 from:
#        Messages = messages/Auth/CondensedCloudChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_CondensedCloudChallenge_Processing :
    ID = 74023
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 18), ("Operator", 7)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (18, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Processing.MSG_OFFSET + Auth_CondensedCloudChallenge_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_CondensedCloudChallenge_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_CondensedCloudChallenge_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Processing.MSG_OFFSET + Auth_CondensedCloudChallenge_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_CondensedCloudChallenge_Processing.ID)
            self.hdr.SetDataLength(Auth_CondensedCloudChallenge_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.CondensedCloudChallenge.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.CondensedCloudChallenge.Processing", Auth_CondensedCloudChallenge_Processing.ID, Auth_CondensedCloudChallenge_Processing)
#    obj/CodeGenerator/Python/Auth/CondensedCloudChallenge.py
#    Created 27/07/2023 at 10:09:43 from:
#        Messages = messages/Auth/CondensedCloudChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_CondensedCloudChallenge_Result :
    ID = 74022
    SIZE = 136
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 18), ("Operator", 6)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (18, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Result.MSG_OFFSET + Auth_CondensedCloudChallenge_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_CondensedCloudChallenge_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_CondensedCloudChallenge_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_CondensedCloudChallenge_Result.MSG_OFFSET + Auth_CondensedCloudChallenge_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_CondensedCloudChallenge_Result.ID)
            self.hdr.SetDataLength(Auth_CondensedCloudChallenge_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.CondensedCloudChallenge.Result"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def GetTimestamp(self):
        """Challenge Timestamp. For more details, refer to the section  textit{Cloud Challenge Timestamp} below."""
        count = 16
        if count > len(self.rawBuffer())-(Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(16)
    def GetGUID(self, idx):
        """GUID"""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 16+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(104)
    def GetSignature(self, idx):
        """Signature"""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 32+idx*1)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def SetTimestamp(self, value):
        """Challenge Timestamp. For more details, refer to the section  textit{Cloud Challenge Timestamp} below."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(16)
    def SetGUID(self, value, idx):
        """GUID"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 16+idx*1, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(104)
    def SetSignature(self, value, idx):
        """Signature"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_CondensedCloudChallenge_Result.MSG_OFFSET + 32+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Timestamp",type="string",units="ASCII",minVal="0",maxVal="255",description="Challenge Timestamp. For more details, refer to the section  textit{Cloud Challenge Timestamp} below.",get=GetTimestamp,set=SetTimestamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="GUID",type="int",units="hex",minVal="0",maxVal="255",description="GUID",get=GetGUID,set=SetGUID,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Signature",type="int",units="hex",minVal="0",maxVal="255",description="Signature",get=GetSignature,set=SetSignature,count=104, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.CondensedCloudChallenge.Result", Auth_CondensedCloudChallenge_Result.ID, Auth_CondensedCloudChallenge_Result)
