#    obj/CodeGenerator/Python/Auth/Activation.py
#    Created 27/07/2023 at 10:09:42 from:
#        Messages = messages/Auth/Activation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_Activation_Get :
    ID = 74001
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 17), ("Operator", 1)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (17, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_Activation_Get.MSG_OFFSET + Auth_Activation_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_Activation_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_Activation_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_Activation_Get.MSG_OFFSET + Auth_Activation_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_Activation_Get.ID)
            self.hdr.SetDataLength(Auth_Activation_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.Activation.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.Activation.Get", Auth_Activation_Get.ID, Auth_Activation_Get)
#    obj/CodeGenerator/Python/Auth/Activation.py
#    Created 27/07/2023 at 10:09:42 from:
#        Messages = messages/Auth/Activation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_Activation_SetGet :
    ID = 74002
    SIZE = 16
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 17), ("Operator", 2)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (17, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_Activation_SetGet.MSG_OFFSET + Auth_Activation_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_Activation_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_Activation_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_Activation_SetGet.MSG_OFFSET + Auth_Activation_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_Activation_SetGet.ID)
            self.hdr.SetDataLength(Auth_Activation_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.Activation.SetGet"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def GetGroupID(self, idx):
        """Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_Activation_SetGet.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def SetGroupID(self, value, idx):
        """Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_Activation_SetGet.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="GroupID",type="int",units="hex",minVal="0",maxVal="255",description="Group ID, a 128-bit UUID generated by an external system for a multi-component product upon activation.",get=GetGroupID,set=SetGroupID,count=16, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.Activation.SetGet", Auth_Activation_SetGet.ID, Auth_Activation_SetGet)
#    obj/CodeGenerator/Python/Auth/Activation.py
#    Created 27/07/2023 at 10:09:42 from:
#        Messages = messages/Auth/Activation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_Activation_Status :
    ID = 74003
    SIZE = 17
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ActivationBit = OrderedDict([("not_activated", 0), ("activated", 1)])
    ReverseActivationBit = OrderedDict([(0, "not_activated"), (1, "activated")])
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_Activation_Status.MSG_OFFSET + Auth_Activation_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_Activation_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_Activation_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_Activation_Status.MSG_OFFSET + Auth_Activation_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_Activation_Status.ID)
            self.hdr.SetDataLength(Auth_Activation_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.Activation.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetActivationBit(self, enumAsInt=0):
        """Flag indicating if Activation bit is set in the product's persistent storage (1=activated, 0=not_activated)"""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_Activation_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Auth_Activation_Status.ReverseActivationBit.get(value, value)
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def GetGroupID(self, idx):
        """If activation bit is set and the product is multi-component, this parameter contains the product's group ID, a 128-bit UUID generated by an external system when the product was activated."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_Activation_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetActivationBit(self, value):
        """Flag indicating if Activation bit is set in the product's persistent storage (1=activated, 0=not_activated)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Auth_Activation_Status.ActivationBit.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_Activation_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def SetGroupID(self, value, idx):
        """If activation bit is set and the product is multi-component, this parameter contains the product's group ID, a 128-bit UUID generated by an external system when the product was activated."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_Activation_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ActivationBit",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Flag indicating if Activation bit is set in the product's persistent storage (1=activated, 0=not_activated)",get=GetActivationBit,set=SetActivationBit,count=1, bitfieldInfo = [], enum = [ActivationBit, ReverseActivationBit]),\
        FieldInfo(name="GroupID",type="int",units="hex",minVal="0",maxVal="255",description="If activation bit is set and the product is multi-component, this parameter contains the product's group ID, a 128-bit UUID generated by an external system when the product was activated.",get=GetGroupID,set=SetGroupID,count=16, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.Activation.Status", Auth_Activation_Status.ID, Auth_Activation_Status)
