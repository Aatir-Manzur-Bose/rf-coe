#    obj/CodeGenerator/Python/Auth/PublicKeyWithCipher.py
#    Created 27/07/2023 at 10:09:45 from:
#        Messages = messages/Auth/PublicKeyWithCipher.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_PublicKeyWithCipher_Get :
    ID = 74225
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AuthCipherSuites = OrderedDict([("None", 0), ("AES-256-CBC-HMAC-SHA256", 1)])
    ReverseAuthCipherSuites = OrderedDict([(0, "None"), (1, "AES-256-CBC-HMAC-SHA256")])
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 31), ("Operator", 1)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (31, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_PublicKeyWithCipher_Get.MSG_OFFSET + Auth_PublicKeyWithCipher_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_PublicKeyWithCipher_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_PublicKeyWithCipher_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_PublicKeyWithCipher_Get.MSG_OFFSET + Auth_PublicKeyWithCipher_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_PublicKeyWithCipher_Get.ID)
            self.hdr.SetDataLength(Auth_PublicKeyWithCipher_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.PublicKeyWithCipher.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCipherSuite(self, enumAsInt=0):
        """Cipher suite"""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Auth_PublicKeyWithCipher_Get.ReverseAuthCipherSuites.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCipherSuite(self, value):
        """Cipher suite"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Auth_PublicKeyWithCipher_Get.AuthCipherSuites.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CipherSuite",type="enumeration",units="",minVal="0",maxVal="255",description="Cipher suite",get=GetCipherSuite,set=SetCipherSuite,count=1, bitfieldInfo = [], enum = [AuthCipherSuites, ReverseAuthCipherSuites])\
    ]

Messaging.Register("Auth.PublicKeyWithCipher.Get", Auth_PublicKeyWithCipher_Get.ID, Auth_PublicKeyWithCipher_Get)
#    obj/CodeGenerator/Python/Auth/PublicKeyWithCipher.py
#    Created 27/07/2023 at 10:09:45 from:
#        Messages = messages/Auth/PublicKeyWithCipher.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_PublicKeyWithCipher_Status :
    ID = 74227
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AuthCipherSuites = OrderedDict([("None", 0), ("AES-256-CBC-HMAC-SHA256", 1)])
    ReverseAuthCipherSuites = OrderedDict([(0, "None"), (1, "AES-256-CBC-HMAC-SHA256")])
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 31), ("Operator", 3)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (31, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_PublicKeyWithCipher_Status.MSG_OFFSET + Auth_PublicKeyWithCipher_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_PublicKeyWithCipher_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_PublicKeyWithCipher_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_PublicKeyWithCipher_Status.MSG_OFFSET + Auth_PublicKeyWithCipher_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_PublicKeyWithCipher_Status.ID)
            self.hdr.SetDataLength(Auth_PublicKeyWithCipher_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.PublicKeyWithCipher.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCipherSuite(self, enumAsInt=0):
        """Cipher suite"""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Auth_PublicKeyWithCipher_Status.ReverseAuthCipherSuites.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(254)
    def GetPublicKey(self, idx):
        """Public key of product. Length varies based on the chosen cipher suite."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCipherSuite(self, value):
        """Cipher suite"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Auth_PublicKeyWithCipher_Status.AuthCipherSuites.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(254)
    def SetPublicKey(self, value, idx):
        """Public key of product. Length varies based on the chosen cipher suite."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_PublicKeyWithCipher_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CipherSuite",type="enumeration",units="",minVal="0",maxVal="255",description="Cipher suite",get=GetCipherSuite,set=SetCipherSuite,count=1, bitfieldInfo = [], enum = [AuthCipherSuites, ReverseAuthCipherSuites]),\
        FieldInfo(name="PublicKey",type="int",units="",minVal="0",maxVal="255",description="Public key of product. Length varies based on the chosen cipher suite.",get=GetPublicKey,set=SetPublicKey,count=254, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.PublicKeyWithCipher.Status", Auth_PublicKeyWithCipher_Status.ID, Auth_PublicKeyWithCipher_Status)
