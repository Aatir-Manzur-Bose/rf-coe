#    obj/CodeGenerator/Python/Auth/NoTokenChallenge.py
#    Created 27/07/2023 at 10:09:44 from:
#        Messages = messages/Auth/NoTokenChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_NoTokenChallenge_Start :
    ID = 74149
    SIZE = 208
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 26), ("Operator", 5)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (26, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Start.MSG_OFFSET + Auth_NoTokenChallenge_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_NoTokenChallenge_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_NoTokenChallenge_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Start.MSG_OFFSET + Auth_NoTokenChallenge_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_NoTokenChallenge_Start.ID)
            self.hdr.SetDataLength(Auth_NoTokenChallenge_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.NoTokenChallenge.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Gettimestamp(self, idx):
        """External system's auth challenge nonce optionally prepended with space characters. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(88)
    def GetecdhePublicKey(self, idx):
        """External system's base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 16+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('104')
    @msg.size('1')
    @msg.count(104)
    def Getsignature(self, idx):
        """External system's ECDSA signature. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 104+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Settimestamp(self, value, idx):
        """External system's auth challenge nonce optionally prepended with space characters. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(88)
    def SetecdhePublicKey(self, value, idx):
        """External system's base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 16+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('104')
    @msg.size('1')
    @msg.count(104)
    def Setsignature(self, value, idx):
        """External system's ECDSA signature. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Start.MSG_OFFSET + 104+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="timestamp",type="int",units="",minVal="0",maxVal="255",description="External system's auth challenge nonce optionally prepended with space characters. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}.",get=Gettimestamp,set=Settimestamp,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ecdhePublicKey",type="int",units="",minVal="0",maxVal="255",description="External system's base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}.",get=GetecdhePublicKey,set=SetecdhePublicKey,count=88, bitfieldInfo = [], enum = []),\
        FieldInfo(name="signature",type="int",units="",minVal="0",maxVal="255",description="External system's ECDSA signature. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}.",get=Getsignature,set=Setsignature,count=104, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.NoTokenChallenge.Start", Auth_NoTokenChallenge_Start.ID, Auth_NoTokenChallenge_Start)
#    obj/CodeGenerator/Python/Auth/NoTokenChallenge.py
#    Created 27/07/2023 at 10:09:44 from:
#        Messages = messages/Auth/NoTokenChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_NoTokenChallenge_Processing :
    ID = 74151
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 26), ("Operator", 7)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (26, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Processing.MSG_OFFSET + Auth_NoTokenChallenge_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_NoTokenChallenge_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_NoTokenChallenge_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Processing.MSG_OFFSET + Auth_NoTokenChallenge_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_NoTokenChallenge_Processing.ID)
            self.hdr.SetDataLength(Auth_NoTokenChallenge_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.NoTokenChallenge.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Auth.NoTokenChallenge.Processing", Auth_NoTokenChallenge_Processing.ID, Auth_NoTokenChallenge_Processing)
#    obj/CodeGenerator/Python/Auth/NoTokenChallenge.py
#    Created 27/07/2023 at 10:09:44 from:
#        Messages = messages/Auth/NoTokenChallenge.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Auth_NoTokenChallenge_Result :
    ID = 74150
    SIZE = 224
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 18), ("Function", 26), ("Operator", 6)])
    ReverseIDs = OrderedDict([(18, "FunctionBlock"), (26, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Result.MSG_OFFSET + Auth_NoTokenChallenge_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Auth_NoTokenChallenge_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Auth_NoTokenChallenge_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Auth_NoTokenChallenge_Result.MSG_OFFSET + Auth_NoTokenChallenge_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Auth_NoTokenChallenge_Result.ID)
            self.hdr.SetDataLength(Auth_NoTokenChallenge_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Auth.NoTokenChallenge.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Getguid(self, idx):
        """Product's GUID. For more details, refer to the detailed description of  textit{Product GUID} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(16)
    def Gettimestamp(self, idx):
        """Challenge Timestamp. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 16+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(88)
    def GetecdhePublicKey(self, idx):
        """Base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 32+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('120')
    @msg.size('1')
    @msg.count(104)
    def Getsignature(self, idx):
        """ECDSA signature of auth challenge nonce and ECDHE public key. Generated by the product using its ECC-384 device identity private key. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}."""
        value = struct.unpack_from('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 120+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def Setguid(self, value, idx):
        """Product's GUID. For more details, refer to the detailed description of  textit{Product GUID} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(16)
    def Settimestamp(self, value, idx):
        """Challenge Timestamp. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 16+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('32')
    @msg.size('1')
    @msg.count(88)
    def SetecdhePublicKey(self, value, idx):
        """Base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 32+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('120')
    @msg.size('1')
    @msg.count(104)
    def Setsignature(self, value, idx):
        """ECDSA signature of auth challenge nonce and ECDHE public key. Generated by the product using its ECC-384 device identity private key. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Auth_NoTokenChallenge_Result.MSG_OFFSET + 120+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="guid",type="int",units="",minVal="0",maxVal="255",description="Product's GUID. For more details, refer to the detailed description of  textit{Product GUID} field in  textit{NoTokenChallenge}.",get=Getguid,set=Setguid,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="timestamp",type="int",units="",minVal="0",maxVal="255",description="Challenge Timestamp. For more details, refer to the detailed description of  textit{Challenge Nonce} field in  textit{NoTokenChallenge}.",get=Gettimestamp,set=Settimestamp,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ecdhePublicKey",type="int",units="",minVal="0",maxVal="255",description="Base-64 encoded ECDHE public key. For more details, refer to the detailed description of  textit{ECDHE Public Key} field in  textit{NoTokenChallenge}.",get=GetecdhePublicKey,set=SetecdhePublicKey,count=88, bitfieldInfo = [], enum = []),\
        FieldInfo(name="signature",type="int",units="",minVal="0",maxVal="255",description="ECDSA signature of auth challenge nonce and ECDHE public key. Generated by the product using its ECC-384 device identity private key. Length varies between 102 and 104 bytes. For more details, refer to the detailed description of  textit{ECSDA Signature} field in  textit{NoTokenChallenge}.",get=Getsignature,set=Setsignature,count=104, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Auth.NoTokenChallenge.Result", Auth_NoTokenChallenge_Result.ID, Auth_NoTokenChallenge_Result)
