#    obj/CodeGenerator/Python/BatteryDebug/Summary.py
#    Created 27/07/2023 at 10:09:54 from:
#        Messages = messages/BatteryDebug/Summary.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_Summary_Get :
    ID = 103393
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 62), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (62, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_Summary_Get.MSG_OFFSET + BatteryDebug_Summary_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_Summary_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_Summary_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_Summary_Get.MSG_OFFSET + BatteryDebug_Summary_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_Summary_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_Summary_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.Summary.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("BatteryDebug.Summary.Get", BatteryDebug_Summary_Get.ID, BatteryDebug_Summary_Get)
#    obj/CodeGenerator/Python/BatteryDebug/Summary.py
#    Created 27/07/2023 at 10:09:54 from:
#        Messages = messages/BatteryDebug/Summary.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_Summary_Status :
    ID = 103395
    SIZE = 25
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SourceStatus = OrderedDict([("Disconnected", 0), ("Connected", 1), ("Suspended", 2), ("Error", 3)])
    ReverseSourceStatus = OrderedDict([(0, "Disconnected"), (1, "Connected"), (2, "Suspended"), (3, "Error")])
    ChargerStatus = OrderedDict([("Charging", 0), ("NotCharging", 1), ("Suspended", 2), ("Error", 3), ("ChargerReset", 4), ("ChargerDisableUntilReconnect", 5)])
    ReverseChargerStatus = OrderedDict([(0, "Charging"), (1, "NotCharging"), (2, "Suspended"), (3, "Error"), (4, "ChargerReset"), (5, "ChargerDisableUntilReconnect")])
    RegionType = OrderedDict([("QuickChargeDischarge", 0), ("QuickCharge", 1), ("FastChargeDischarge", 2), ("FastCharge", 3), ("StandardChargeDischarge", 4), ("StandardCharge", 5), ("PrechargeChargeDischarge", 6), ("PrechargeCharge", 7), ("TrickleCharge", 8), ("ZeroVoltTrickleCharge", 9), ("Discharge", 10), ("Brick", 11), ("LowPowerState", 12), ("ShipMode", 13), ("ShelfMode", 14), ("LowPowerStateHighVoltage", 15), ("LowPowerStateLowVoltage", 16), ("Preliminary", 17), ("QuickChargeDischargeVariant1", 18), ("QuickChargeDischargeVariant2", 19), ("QuickChargeDischargeVariant3", 20), ("QuickChargeDischargeVariant4", 21), ("FastChargeDischargeVariant1", 22), ("StandardChargeDischargeVariant1", 23), ("TrickleChargeVariant1", 24), ("SlowChargeDischarge", 25), ("Invalid", 26)])
    ReverseRegionType = OrderedDict([(0, "QuickChargeDischarge"), (1, "QuickCharge"), (2, "FastChargeDischarge"), (3, "FastCharge"), (4, "StandardChargeDischarge"), (5, "StandardCharge"), (6, "PrechargeChargeDischarge"), (7, "PrechargeCharge"), (8, "TrickleCharge"), (9, "ZeroVoltTrickleCharge"), (10, "Discharge"), (11, "Brick"), (12, "LowPowerState"), (13, "ShipMode"), (14, "ShelfMode"), (15, "LowPowerStateHighVoltage"), (16, "LowPowerStateLowVoltage"), (17, "Preliminary"), (18, "QuickChargeDischargeVariant1"), (19, "QuickChargeDischargeVariant2"), (20, "QuickChargeDischargeVariant3"), (21, "QuickChargeDischargeVariant4"), (22, "FastChargeDischargeVariant1"), (23, "StandardChargeDischargeVariant1"), (24, "TrickleChargeVariant1"), (25, "SlowChargeDischarge"), (26, "Invalid")])
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 62), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (62, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_Summary_Status.MSG_OFFSET + BatteryDebug_Summary_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_Summary_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_Summary_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_Summary_Status.MSG_OFFSET + BatteryDebug_Summary_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_Summary_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_Summary_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.Summary.Status"
    # Accessors
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetVoltageAverage(self):
        """Voltage averaged in mV"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('C')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetTemperatureAverage(self):
        """Temperature averaged in C"""
        value = struct.unpack_from('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentRegionType(self, enumAsInt=0):
        """Region type for current region"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = BatteryDebug_Summary_Status.ReverseRegionType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def GetCurrentRegionIndex(self):
        """Index of current region"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('mC')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('7')
    @msg.size('2')
    @msg.count(1)
    def GetChargeCapacityCurrent(self):
        """Maximum charge current in mC"""
        value = struct.unpack_from('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('mA')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('9')
    @msg.size('2')
    @msg.count(1)
    def GetNetChargeCurrent(self):
        """Maximum source current in mA"""
        value = struct.unpack_from('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetSOCPercentage(self):
        """State of charge percentage"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetSOCTime(self):
        """Time to play in minutes"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetCurrentRegionTimeLeft(self):
        """Current region time left in minutes"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def GetSourceStatus(self, enumAsInt=0):
        """Source status"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 16)[0]
        if not enumAsInt:
            value = BatteryDebug_Summary_Status.ReverseSourceStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetChargerStatus(self, enumAsInt=0):
        """Charger status"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 17)[0]
        if not enumAsInt:
            value = BatteryDebug_Summary_Status.ReverseChargerStatus.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetBrickCounter(self):
        """Current brick counter"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def GetConditionBits(self):
        """Value of the various condition bits"""
        value = struct.unpack_from('>L', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetDoNotDischarge(self):
        """Battery should not be dischared"""
        value = (self.GetConditionBits() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetDoNotCharge(self):
        """Battery should not be charged"""
        value = (self.GetConditionBits() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('16383')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPlaceholder1(self):
        """Empty/place holder 1"""
        value = (self.GetConditionBits() >> 2) & 0x3fff
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetCurrentInitializing(self):
        """Battery system is initializing"""
        value = (self.GetConditionBits() >> 16) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetCurrentRecovering(self):
        """Battery system is recovering"""
        value = (self.GetConditionBits() >> 17) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetCurrentSupportMode(self):
        """Battery system is in support mode"""
        value = (self.GetConditionBits() >> 18) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetCurrentSupportModeRecoverable(self):
        """Battery system is in support mode and recoverable"""
        value = (self.GetConditionBits() >> 19) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetCurrentSupportModeUnrecoverable(self):
        """Battery system is in support mode and unrecoverable"""
        value = (self.GetConditionBits() >> 20) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetFullyOperational(self):
        """Battery system is operating normally"""
        value = (self.GetConditionBits() >> 21) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPreviousInitializing(self):
        """Battery system was previously initializing"""
        value = (self.GetConditionBits() >> 22) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPreviousRecovering(self):
        """Battery system was previously recovering"""
        value = (self.GetConditionBits() >> 23) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPreviousSupportMode(self):
        """Battery system was previously in support mode"""
        value = (self.GetConditionBits() >> 24) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPreviousFullyOperational(self):
        """Battery system was previously fully operational"""
        value = (self.GetConditionBits() >> 25) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def GetPlaceholder2(self):
        """Empty/place holder 2"""
        value = (self.GetConditionBits() >> 26) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def GetBatteryLevel(self):
        """Battery level in percentage"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('mV')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetVoltageAverage(self, value):
        """Voltage averaged in mV"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('C')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetTemperatureAverage(self, value):
        """Temperature averaged in C"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentRegionType(self, value):
        """Region type for current region"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = BatteryDebug_Summary_Status.RegionType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('5')
    @msg.size('2')
    @msg.count(1)
    def SetCurrentRegionIndex(self, value):
        """Index of current region"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('mC')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('7')
    @msg.size('2')
    @msg.count(1)
    def SetChargeCapacityCurrent(self, value):
        """Maximum charge current in mC"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('mA')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('9')
    @msg.size('2')
    @msg.count(1)
    def SetNetChargeCurrent(self, value):
        """Maximum source current in mA"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetSOCPercentage(self, value):
        """State of charge percentage"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetSOCTime(self, value):
        """Time to play in minutes"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetCurrentRegionTimeLeft(self, value):
        """Current region time left in minutes"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(1)
    def SetSourceStatus(self, value):
        """Source status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = BatteryDebug_Summary_Status.SourceStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetChargerStatus(self, value):
        """Charger status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = BatteryDebug_Summary_Status.ChargerStatus.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetBrickCounter(self, value):
        """Current brick counter"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('20')
    @msg.size('4')
    @msg.count(1)
    def SetConditionBits(self, value):
        """Value of the various condition bits"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 20, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetDoNotDischarge(self, value):
        """Battery should not be dischared"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetDoNotCharge(self, value):
        """Battery should not be charged"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('16383')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPlaceholder1(self, value):
        """Empty/place holder 1"""
        tmp = min(max(value, 0), 16383)
        self.SetConditionBits((self.GetConditionBits() & ~(0x3fff << 2)) | ((tmp & 0x3fff) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetCurrentInitializing(self, value):
        """Battery system is initializing"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 16)) | ((tmp & 0x1) << 16))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetCurrentRecovering(self, value):
        """Battery system is recovering"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 17)) | ((tmp & 0x1) << 17))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetCurrentSupportMode(self, value):
        """Battery system is in support mode"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 18)) | ((tmp & 0x1) << 18))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetCurrentSupportModeRecoverable(self, value):
        """Battery system is in support mode and recoverable"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 19)) | ((tmp & 0x1) << 19))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetCurrentSupportModeUnrecoverable(self, value):
        """Battery system is in support mode and unrecoverable"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 20)) | ((tmp & 0x1) << 20))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetFullyOperational(self, value):
        """Battery system is operating normally"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 21)) | ((tmp & 0x1) << 21))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPreviousInitializing(self, value):
        """Battery system was previously initializing"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 22)) | ((tmp & 0x1) << 22))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPreviousRecovering(self, value):
        """Battery system was previously recovering"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 23)) | ((tmp & 0x1) << 23))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPreviousSupportMode(self, value):
        """Battery system was previously in support mode"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 24)) | ((tmp & 0x1) << 24))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPreviousFullyOperational(self, value):
        """Battery system was previously fully operational"""
        tmp = min(max(value, 0), 1)
        self.SetConditionBits((self.GetConditionBits() & ~(0x1 << 25)) | ((tmp & 0x1) << 25))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('20')
    @msg.size('0')
    @msg.count(1)
    def SetPlaceholder2(self, value):
        """Empty/place holder 2"""
        tmp = min(max(value, 0), 63)
        self.SetConditionBits((self.GetConditionBits() & ~(0x3f << 26)) | ((tmp & 0x3f) << 26))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('24')
    @msg.size('1')
    @msg.count(1)
    def SetBatteryLevel(self, value):
        """Battery level in percentage"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_Summary_Status.MSG_OFFSET + 24, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="VoltageAverage",type="int",units="mV",minVal="0",maxVal="65535",description="Voltage averaged in mV",get=GetVoltageAverage,set=SetVoltageAverage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TemperatureAverage",type="int",units="C",minVal="-32768",maxVal="32767",description="Temperature averaged in C",get=GetTemperatureAverage,set=SetTemperatureAverage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentRegionType",type="enumeration",units="",minVal="0",maxVal="255",description="Region type for current region",get=GetCurrentRegionType,set=SetCurrentRegionType,count=1, bitfieldInfo = [], enum = [RegionType, ReverseRegionType]),\
        FieldInfo(name="CurrentRegionIndex",type="int",units="",minVal="0",maxVal="65535",description="Index of current region",get=GetCurrentRegionIndex,set=SetCurrentRegionIndex,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ChargeCapacityCurrent",type="int",units="mC",minVal="-32768",maxVal="32767",description="Maximum charge current in mC",get=GetChargeCapacityCurrent,set=SetChargeCapacityCurrent,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NetChargeCurrent",type="int",units="mA",minVal="-32768",maxVal="32767",description="Maximum source current in mA",get=GetNetChargeCurrent,set=SetNetChargeCurrent,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SOCPercentage",type="int",units="",minVal="0",maxVal="255",description="State of charge percentage",get=GetSOCPercentage,set=SetSOCPercentage,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SOCTime",type="int",units="min",minVal="0",maxVal="65535",description="Time to play in minutes",get=GetSOCTime,set=SetSOCTime,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentRegionTimeLeft",type="int",units="min",minVal="0",maxVal="65535",description="Current region time left in minutes",get=GetCurrentRegionTimeLeft,set=SetCurrentRegionTimeLeft,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SourceStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Source status",get=GetSourceStatus,set=SetSourceStatus,count=1, bitfieldInfo = [], enum = [SourceStatus, ReverseSourceStatus]),\
        FieldInfo(name="ChargerStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Charger status",get=GetChargerStatus,set=SetChargerStatus,count=1, bitfieldInfo = [], enum = [ChargerStatus, ReverseChargerStatus]),\
        FieldInfo(name="BrickCounter",type="int",units="",minVal="0",maxVal="65535",description="Current brick counter",get=GetBrickCounter,set=SetBrickCounter,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ConditionBits",type="int",units="",minVal="0",maxVal="4294967295",description="Value of the various condition bits",get=GetConditionBits,set=SetConditionBits,count=1, bitfieldInfo = [\
            BitFieldInfo(name="DoNotDischarge",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery should not be dischared",get=GetDoNotDischarge,set=SetDoNotDischarge, enum = []),\
            BitFieldInfo(name="DoNotCharge",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery should not be charged",get=GetDoNotCharge,set=SetDoNotCharge, enum = []),\
            BitFieldInfo(name="Placeholder1",type="int",units="Boolean",minVal="0",maxVal="16383",description="Empty/place holder 1",get=GetPlaceholder1,set=SetPlaceholder1, enum = []),\
            BitFieldInfo(name="CurrentInitializing",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is initializing",get=GetCurrentInitializing,set=SetCurrentInitializing, enum = []),\
            BitFieldInfo(name="CurrentRecovering",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is recovering",get=GetCurrentRecovering,set=SetCurrentRecovering, enum = []),\
            BitFieldInfo(name="CurrentSupportMode",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is in support mode",get=GetCurrentSupportMode,set=SetCurrentSupportMode, enum = []),\
            BitFieldInfo(name="CurrentSupportModeRecoverable",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is in support mode and recoverable",get=GetCurrentSupportModeRecoverable,set=SetCurrentSupportModeRecoverable, enum = []),\
            BitFieldInfo(name="CurrentSupportModeUnrecoverable",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is in support mode and unrecoverable",get=GetCurrentSupportModeUnrecoverable,set=SetCurrentSupportModeUnrecoverable, enum = []),\
            BitFieldInfo(name="FullyOperational",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system is operating normally",get=GetFullyOperational,set=SetFullyOperational, enum = []),\
            BitFieldInfo(name="PreviousInitializing",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system was previously initializing",get=GetPreviousInitializing,set=SetPreviousInitializing, enum = []),\
            BitFieldInfo(name="PreviousRecovering",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system was previously recovering",get=GetPreviousRecovering,set=SetPreviousRecovering, enum = []),\
            BitFieldInfo(name="PreviousSupportMode",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system was previously in support mode",get=GetPreviousSupportMode,set=SetPreviousSupportMode, enum = []),\
            BitFieldInfo(name="PreviousFullyOperational",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery system was previously fully operational",get=GetPreviousFullyOperational,set=SetPreviousFullyOperational, enum = []),\
            BitFieldInfo(name="Placeholder2",type="int",units="Boolean",minVal="0",maxVal="63",description="Empty/place holder 2",get=GetPlaceholder2,set=SetPlaceholder2, enum = [])], enum = []),\
        FieldInfo(name="BatteryLevel",type="int",units="",minVal="0",maxVal="255",description="Battery level in percentage",get=GetBatteryLevel,set=SetBatteryLevel,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.Summary.Status", BatteryDebug_Summary_Status.ID, BatteryDebug_Summary_Status)
