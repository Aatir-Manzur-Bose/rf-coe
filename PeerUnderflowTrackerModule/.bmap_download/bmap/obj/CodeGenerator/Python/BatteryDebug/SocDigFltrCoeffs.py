#    obj/CodeGenerator/Python/BatteryDebug/SocDigFltrCoeffs.py
#    Created 27/07/2023 at 10:09:53 from:
#        Messages = messages/BatteryDebug/SocDigFltrCoeffs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocDigFltrCoeffs_Get :
    ID = 103441
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 65), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (65, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_Get.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocDigFltrCoeffs_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocDigFltrCoeffs_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_Get.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocDigFltrCoeffs_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_SocDigFltrCoeffs_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocDigFltrCoeffs.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("BatteryDebug.SocDigFltrCoeffs.Get", BatteryDebug_SocDigFltrCoeffs_Get.ID, BatteryDebug_SocDigFltrCoeffs_Get)
#    obj/CodeGenerator/Python/BatteryDebug/SocDigFltrCoeffs.py
#    Created 27/07/2023 at 10:09:53 from:
#        Messages = messages/BatteryDebug/SocDigFltrCoeffs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocDigFltrCoeffs_SetGet :
    ID = 103442
    SIZE = 22
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 65), ("Operator", 2)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (65, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocDigFltrCoeffs_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocDigFltrCoeffs_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocDigFltrCoeffs_SetGet.ID)
            self.hdr.SetDataLength(BatteryDebug_SocDigFltrCoeffs_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocDigFltrCoeffs.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetScaleAB(self):
        """ScaleAB - Scale factor for constant forward and feedback terms"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetScaleXY(self):
        """ScaleXY - Scale factor for XY data"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA0(self):
        """CoeffA0 - SOC Digital filter coefficient A0"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA1(self):
        """CoeffA1 - SOC Digital filter coefficient A1"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA2(self):
        """CoeffA2 - SOC Digital filter coefficient A2"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB0(self):
        """CoeffB0 - SOC Digital filter coefficient B0"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB1(self):
        """CoeffB1 - SOC Digital filter coefficient B1"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB2(self):
        """CoeffB2 - SOC Digital filter Coefficient B2"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetDownSampleRate(self):
        """DownSampleRate - Frequency of SOC filter execution in period of 5s. Default is 6."""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetGain(self):
        """Gain - factor used in terms calculations"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetScaleAB(self, value):
        """ScaleAB - Scale factor for constant forward and feedback terms"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetScaleXY(self, value):
        """ScaleXY - Scale factor for XY data"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA0(self, value):
        """CoeffA0 - SOC Digital filter coefficient A0"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA1(self, value):
        """CoeffA1 - SOC Digital filter coefficient A1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA2(self, value):
        """CoeffA2 - SOC Digital filter coefficient A2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB0(self, value):
        """CoeffB0 - SOC Digital filter coefficient B0"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB1(self, value):
        """CoeffB1 - SOC Digital filter coefficient B1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB2(self, value):
        """CoeffB2 - SOC Digital filter Coefficient B2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetDownSampleRate(self, value):
        """DownSampleRate - Frequency of SOC filter execution in period of 5s. Default is 6."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetGain(self, value):
        """Gain - factor used in terms calculations"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_SetGet.MSG_OFFSET + 18, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ScaleAB",type="int",units="",minVal="0",maxVal="65535",description="ScaleAB - Scale factor for constant forward and feedback terms",get=GetScaleAB,set=SetScaleAB,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ScaleXY",type="int",units="",minVal="0",maxVal="65535",description="ScaleXY - Scale factor for XY data",get=GetScaleXY,set=SetScaleXY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA0",type="int",units="",minVal="0",maxVal="65535",description="CoeffA0 - SOC Digital filter coefficient A0",get=GetCoeffA0,set=SetCoeffA0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA1",type="int",units="",minVal="0",maxVal="65535",description="CoeffA1 - SOC Digital filter coefficient A1",get=GetCoeffA1,set=SetCoeffA1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA2",type="int",units="",minVal="0",maxVal="65535",description="CoeffA2 - SOC Digital filter coefficient A2",get=GetCoeffA2,set=SetCoeffA2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB0",type="int",units="",minVal="0",maxVal="65535",description="CoeffB0 - SOC Digital filter coefficient B0",get=GetCoeffB0,set=SetCoeffB0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB1",type="int",units="",minVal="0",maxVal="65535",description="CoeffB1 - SOC Digital filter coefficient B1",get=GetCoeffB1,set=SetCoeffB1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB2",type="int",units="",minVal="0",maxVal="65535",description="CoeffB2 - SOC Digital filter Coefficient B2",get=GetCoeffB2,set=SetCoeffB2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DownSampleRate",type="int",units="",minVal="0",maxVal="65535",description="DownSampleRate - Frequency of SOC filter execution in period of 5s. Default is 6.",get=GetDownSampleRate,set=SetDownSampleRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Gain",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Gain - factor used in terms calculations",get=GetGain,set=SetGain,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.SocDigFltrCoeffs.SetGet", BatteryDebug_SocDigFltrCoeffs_SetGet.ID, BatteryDebug_SocDigFltrCoeffs_SetGet)
#    obj/CodeGenerator/Python/BatteryDebug/SocDigFltrCoeffs.py
#    Created 27/07/2023 at 10:09:53 from:
#        Messages = messages/BatteryDebug/SocDigFltrCoeffs.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocDigFltrCoeffs_Status :
    ID = 103443
    SIZE = 22
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 65), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (65, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocDigFltrCoeffs_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocDigFltrCoeffs_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + BatteryDebug_SocDigFltrCoeffs_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocDigFltrCoeffs_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_SocDigFltrCoeffs_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocDigFltrCoeffs.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetScaleAB(self):
        """SclaeAB - Scale factor for constant forward and feedback terms"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetScaleXY(self):
        """ScaleXY - Scale factor for XY data"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA0(self):
        """CoeffA0 - SOC Digital filter coefficient A0"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA1(self):
        """CoeffA1 - SOC Digital filter coefficient A1"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffA2(self):
        """CoeffA2 - SOC Digital filter coefficient A2"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB0(self):
        """CoeffB0 - SOC Digital filter coefficient B0"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB1(self):
        """CoeffB1 - SOC Digital filter coefficient B1"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetCoeffB2(self):
        """CoeffB2 - SOC Digital filter Coefficient B2"""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetDownSampleRate(self):
        """DownSampleRate - frequency of SOC filter execution in periods of 5s. Default setting is 6."""
        value = struct.unpack_from('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetGain(self):
        """Gain - factor used in terms calculations"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetScaleAB(self, value):
        """SclaeAB - Scale factor for constant forward and feedback terms"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetScaleXY(self, value):
        """ScaleXY - Scale factor for XY data"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA0(self, value):
        """CoeffA0 - SOC Digital filter coefficient A0"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA1(self, value):
        """CoeffA1 - SOC Digital filter coefficient A1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffA2(self, value):
        """CoeffA2 - SOC Digital filter coefficient A2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB0(self, value):
        """CoeffB0 - SOC Digital filter coefficient B0"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB1(self, value):
        """CoeffB1 - SOC Digital filter coefficient B1"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetCoeffB2(self, value):
        """CoeffB2 - SOC Digital filter Coefficient B2"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetDownSampleRate(self, value):
        """DownSampleRate - frequency of SOC filter execution in periods of 5s. Default setting is 6."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetGain(self, value):
        """Gain - factor used in terms calculations"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_SocDigFltrCoeffs_Status.MSG_OFFSET + 18, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ScaleAB",type="int",units="",minVal="0",maxVal="65535",description="SclaeAB - Scale factor for constant forward and feedback terms",get=GetScaleAB,set=SetScaleAB,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ScaleXY",type="int",units="",minVal="0",maxVal="65535",description="ScaleXY - Scale factor for XY data",get=GetScaleXY,set=SetScaleXY,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA0",type="int",units="",minVal="0",maxVal="65535",description="CoeffA0 - SOC Digital filter coefficient A0",get=GetCoeffA0,set=SetCoeffA0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA1",type="int",units="",minVal="0",maxVal="65535",description="CoeffA1 - SOC Digital filter coefficient A1",get=GetCoeffA1,set=SetCoeffA1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffA2",type="int",units="",minVal="0",maxVal="65535",description="CoeffA2 - SOC Digital filter coefficient A2",get=GetCoeffA2,set=SetCoeffA2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB0",type="int",units="",minVal="0",maxVal="65535",description="CoeffB0 - SOC Digital filter coefficient B0",get=GetCoeffB0,set=SetCoeffB0,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB1",type="int",units="",minVal="0",maxVal="65535",description="CoeffB1 - SOC Digital filter coefficient B1",get=GetCoeffB1,set=SetCoeffB1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffB2",type="int",units="",minVal="0",maxVal="65535",description="CoeffB2 - SOC Digital filter Coefficient B2",get=GetCoeffB2,set=SetCoeffB2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DownSampleRate",type="int",units="",minVal="0",maxVal="65535",description="DownSampleRate - frequency of SOC filter execution in periods of 5s. Default setting is 6.",get=GetDownSampleRate,set=SetDownSampleRate,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Gain",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Gain - factor used in terms calculations",get=GetGain,set=SetGain,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.SocDigFltrCoeffs.Status", BatteryDebug_SocDigFltrCoeffs_Status.ID, BatteryDebug_SocDigFltrCoeffs_Status)
