#    obj/CodeGenerator/Python/BatteryDebug/TemperatureTimeStamp.py
#    Created 27/07/2023 at 10:09:55 from:
#        Messages = messages/BatteryDebug/TemperatureTimeStamp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_TemperatureTimeStamp_Get :
    ID = 102513
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_Get.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_TemperatureTimeStamp_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_TemperatureTimeStamp_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_Get.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_TemperatureTimeStamp_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_TemperatureTimeStamp_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.TemperatureTimeStamp.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("BatteryDebug.TemperatureTimeStamp.Get", BatteryDebug_TemperatureTimeStamp_Get.ID, BatteryDebug_TemperatureTimeStamp_Get)
#    obj/CodeGenerator/Python/BatteryDebug/TemperatureTimeStamp.py
#    Created 27/07/2023 at 10:09:55 from:
#        Messages = messages/BatteryDebug/TemperatureTimeStamp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_TemperatureTimeStamp_SetGet :
    ID = 102514
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 7), ("Operator", 2)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (7, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_SetGet.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_TemperatureTimeStamp_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_TemperatureTimeStamp_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_SetGet.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_TemperatureTimeStamp_SetGet.ID)
            self.hdr.SetDataLength(BatteryDebug_TemperatureTimeStamp_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.TemperatureTimeStamp.SetGet"
    # Accessors
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTemperatureTimeStamp(self):
        """Timestamp for temperature"""
        value = struct.unpack_from('>L', self.rawBuffer(), BatteryDebug_TemperatureTimeStamp_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTemperatureTimeStamp(self, value):
        """Timestamp for temperature"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), BatteryDebug_TemperatureTimeStamp_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TemperatureTimeStamp",type="int",units="min",minVal="0",maxVal="4294967295",description="Timestamp for temperature",get=GetTemperatureTimeStamp,set=SetTemperatureTimeStamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.TemperatureTimeStamp.SetGet", BatteryDebug_TemperatureTimeStamp_SetGet.ID, BatteryDebug_TemperatureTimeStamp_SetGet)
#    obj/CodeGenerator/Python/BatteryDebug/TemperatureTimeStamp.py
#    Created 27/07/2023 at 10:09:55 from:
#        Messages = messages/BatteryDebug/TemperatureTimeStamp.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_TemperatureTimeStamp_Status :
    ID = 102515
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_Status.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_TemperatureTimeStamp_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_TemperatureTimeStamp_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_TemperatureTimeStamp_Status.MSG_OFFSET + BatteryDebug_TemperatureTimeStamp_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_TemperatureTimeStamp_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_TemperatureTimeStamp_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.TemperatureTimeStamp.Status"
    # Accessors
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTemperatureTimeStamp(self):
        """Timestamp for temperature"""
        value = struct.unpack_from('>L', self.rawBuffer(), BatteryDebug_TemperatureTimeStamp_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('min')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTemperatureTimeStamp(self, value):
        """Timestamp for temperature"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), BatteryDebug_TemperatureTimeStamp_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TemperatureTimeStamp",type="int",units="min",minVal="0",maxVal="4294967295",description="Timestamp for temperature",get=GetTemperatureTimeStamp,set=SetTemperatureTimeStamp,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.TemperatureTimeStamp.Status", BatteryDebug_TemperatureTimeStamp_Status.ID, BatteryDebug_TemperatureTimeStamp_Status)
