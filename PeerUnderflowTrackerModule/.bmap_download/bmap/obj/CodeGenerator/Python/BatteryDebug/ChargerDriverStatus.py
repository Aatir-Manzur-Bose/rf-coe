#    obj/CodeGenerator/Python/BatteryDebug/ChargerDriverStatus.py
#    Created 27/07/2023 at 10:09:48 from:
#        Messages = messages/BatteryDebug/ChargerDriverStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_ChargerDriverStatus_Get :
    ID = 103121
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 45), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (45, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Get.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_ChargerDriverStatus_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_ChargerDriverStatus_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Get.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_ChargerDriverStatus_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_ChargerDriverStatus_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.ChargerDriverStatus.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChargerID(self):
        """Charger ID"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChargerID(self, value):
        """Charger ID"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChargerID",type="int",units="",minVal="0",maxVal="255",description="Charger ID",get=GetChargerID,set=SetChargerID,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.ChargerDriverStatus.Get", BatteryDebug_ChargerDriverStatus_Get.ID, BatteryDebug_ChargerDriverStatus_Get)
#    obj/CodeGenerator/Python/BatteryDebug/ChargerDriverStatus.py
#    Created 27/07/2023 at 10:09:48 from:
#        Messages = messages/BatteryDebug/ChargerDriverStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_ChargerDriverStatus_Set :
    ID = 103120
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 45), ("Operator", 0)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (45, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Set.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_ChargerDriverStatus_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_ChargerDriverStatus_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Set.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_ChargerDriverStatus_Set.ID)
            self.hdr.SetDataLength(BatteryDebug_ChargerDriverStatus_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.ChargerDriverStatus.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChargerDriverStatus(self):
        """Charger Driver Status"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChargerDriverStatus(self, value):
        """Charger Driver Status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Set.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChargerDriverStatus",type="int",units="",minVal="0",maxVal="255",description="Charger Driver Status",get=GetChargerDriverStatus,set=SetChargerDriverStatus,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.ChargerDriverStatus.Set", BatteryDebug_ChargerDriverStatus_Set.ID, BatteryDebug_ChargerDriverStatus_Set)
#    obj/CodeGenerator/Python/BatteryDebug/ChargerDriverStatus.py
#    Created 27/07/2023 at 10:09:48 from:
#        Messages = messages/BatteryDebug/ChargerDriverStatus.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_ChargerDriverStatus_Status :
    ID = 103123
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 45), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (45, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_ChargerDriverStatus_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_ChargerDriverStatus_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + BatteryDebug_ChargerDriverStatus_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_ChargerDriverStatus_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_ChargerDriverStatus_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.ChargerDriverStatus.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChargerID(self):
        """Charger ID"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetChargerDriverStatus(self):
        """Charger Driver Status"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetChargerEnabled(self):
        """Charger is enabled"""
        value = (self.GetChargerDriverStatus() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetCharging(self):
        """Charger is charging or not charging/suspended"""
        value = (self.GetChargerDriverStatus() >> 1) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetSourceVoltage(self):
        """Source voltage available/unavailable"""
        value = (self.GetChargerDriverStatus() >> 2) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetBatteryCapacity(self):
        """Battery full"""
        value = (self.GetChargerDriverStatus() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChargerID(self, value):
        """Charger ID"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetChargerDriverStatus(self, value):
        """Charger Driver Status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_ChargerDriverStatus_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetChargerEnabled(self, value):
        """Charger is enabled"""
        tmp = min(max(value, 0), 1)
        self.SetChargerDriverStatus((self.GetChargerDriverStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetCharging(self, value):
        """Charger is charging or not charging/suspended"""
        tmp = min(max(value, 0), 1)
        self.SetChargerDriverStatus((self.GetChargerDriverStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetSourceVoltage(self, value):
        """Source voltage available/unavailable"""
        tmp = min(max(value, 0), 1)
        self.SetChargerDriverStatus((self.GetChargerDriverStatus() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetBatteryCapacity(self, value):
        """Battery full"""
        tmp = min(max(value, 0), 1)
        self.SetChargerDriverStatus((self.GetChargerDriverStatus() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChargerID",type="int",units="",minVal="0",maxVal="255",description="Charger ID",get=GetChargerID,set=SetChargerID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ChargerDriverStatus",type="int",units="",minVal="0",maxVal="255",description="Charger Driver Status",get=GetChargerDriverStatus,set=SetChargerDriverStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ChargerEnabled",type="int",units="Boolean",minVal="0",maxVal="1",description="Charger is enabled",get=GetChargerEnabled,set=SetChargerEnabled, enum = []),\
            BitFieldInfo(name="Charging",type="int",units="Boolean",minVal="0",maxVal="1",description="Charger is charging or not charging/suspended",get=GetCharging,set=SetCharging, enum = []),\
            BitFieldInfo(name="SourceVoltage",type="int",units="Boolean",minVal="0",maxVal="1",description="Source voltage available/unavailable",get=GetSourceVoltage,set=SetSourceVoltage, enum = []),\
            BitFieldInfo(name="BatteryCapacity",type="int",units="Boolean",minVal="0",maxVal="1",description="Battery full",get=GetBatteryCapacity,set=SetBatteryCapacity, enum = [])], enum = [])\
    ]

Messaging.Register("BatteryDebug.ChargerDriverStatus.Status", BatteryDebug_ChargerDriverStatus_Status.ID, BatteryDebug_ChargerDriverStatus_Status)
