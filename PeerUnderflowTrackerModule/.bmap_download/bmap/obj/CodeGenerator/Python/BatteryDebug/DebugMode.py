#    obj/CodeGenerator/Python/BatteryDebug/DebugMode.py
#    Created 27/07/2023 at 10:09:49 from:
#        Messages = messages/BatteryDebug/DebugMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_DebugMode_Get :
    ID = 102961
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 35), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (35, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_Get.MSG_OFFSET + BatteryDebug_DebugMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_DebugMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_DebugMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_Get.MSG_OFFSET + BatteryDebug_DebugMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_DebugMode_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_DebugMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.DebugMode.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("BatteryDebug.DebugMode.Get", BatteryDebug_DebugMode_Get.ID, BatteryDebug_DebugMode_Get)
#    obj/CodeGenerator/Python/BatteryDebug/DebugMode.py
#    Created 27/07/2023 at 10:09:49 from:
#        Messages = messages/BatteryDebug/DebugMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_DebugMode_SetGet :
    ID = 102962
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 35), ("Operator", 2)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (35, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_SetGet.MSG_OFFSET + BatteryDebug_DebugMode_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_DebugMode_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_DebugMode_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_SetGet.MSG_OFFSET + BatteryDebug_DebugMode_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_DebugMode_SetGet.ID)
            self.hdr.SetDataLength(BatteryDebug_DebugMode_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.DebugMode.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDebugMode(self):
        """Each bit is mapped to a specific debug feature. Bit 0 = Enable/Disable driver sampling clock, 1 = Force all interactions with simulated drivers, 2 = Disable temperature sanity check, 3 = Enable SOC Digital Filter test data output, 7 = Disable brick counter"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_DebugMode_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDebugMode(self, value):
        """Each bit is mapped to a specific debug feature. Bit 0 = Enable/Disable driver sampling clock, 1 = Force all interactions with simulated drivers, 2 = Disable temperature sanity check, 3 = Enable SOC Digital Filter test data output, 7 = Disable brick counter"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_DebugMode_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="DebugMode",type="int",units="",minVal="0",maxVal="255",description="Each bit is mapped to a specific debug feature. Bit 0 = Enable/Disable driver sampling clock, 1 = Force all interactions with simulated drivers, 2 = Disable temperature sanity check, 3 = Enable SOC Digital Filter test data output, 7 = Disable brick counter",get=GetDebugMode,set=SetDebugMode,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.DebugMode.SetGet", BatteryDebug_DebugMode_SetGet.ID, BatteryDebug_DebugMode_SetGet)
#    obj/CodeGenerator/Python/BatteryDebug/DebugMode.py
#    Created 27/07/2023 at 10:09:49 from:
#        Messages = messages/BatteryDebug/DebugMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_DebugMode_Status :
    ID = 102963
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 35), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (35, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_Status.MSG_OFFSET + BatteryDebug_DebugMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_DebugMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_DebugMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_DebugMode_Status.MSG_OFFSET + BatteryDebug_DebugMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_DebugMode_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_DebugMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.DebugMode.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetDebugMode(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_DebugMode_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSampleClock(self):
        """Enable/disable driver sampling clock"""
        value = (self.GetDebugMode() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSimulatedDrivers(self):
        """Force all interactions with simulated drivers"""
        value = (self.GetDebugMode() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetTempSanityCheckDisable(self):
        """Disable the temperature sanity check when set"""
        value = (self.GetDebugMode() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetSocDigFltrEventsEn(self):
        """Enable/disable SOC Digital Filter test data output"""
        value = (self.GetDebugMode() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Reserved"""
        value = (self.GetDebugMode() >> 4) & 0x7
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBrickCounterDisable(self):
        """Disable the brick counter when set"""
        value = (self.GetDebugMode() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetDebugMode(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_DebugMode_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSampleClock(self, value):
        """Enable/disable driver sampling clock"""
        tmp = min(max(value, 0), 1)
        self.SetDebugMode((self.GetDebugMode() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSimulatedDrivers(self, value):
        """Force all interactions with simulated drivers"""
        tmp = min(max(value, 0), 1)
        self.SetDebugMode((self.GetDebugMode() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetTempSanityCheckDisable(self, value):
        """Disable the temperature sanity check when set"""
        tmp = min(max(value, 0), 1)
        self.SetDebugMode((self.GetDebugMode() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetSocDigFltrEventsEn(self, value):
        """Enable/disable SOC Digital Filter test data output"""
        tmp = min(max(value, 0), 1)
        self.SetDebugMode((self.GetDebugMode() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('7')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 7)
        self.SetDebugMode((self.GetDebugMode() & ~(0x7 << 4)) | ((tmp & 0x7) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBrickCounterDisable(self, value):
        """Disable the brick counter when set"""
        tmp = min(max(value, 0), 1)
        self.SetDebugMode((self.GetDebugMode() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="DebugMode",type="int",units="",minVal="0",maxVal="255",description="",get=GetDebugMode,set=SetDebugMode,count=1, bitfieldInfo = [\
            BitFieldInfo(name="SampleClock",type="int",units="",minVal="0",maxVal="1",description="Enable/disable driver sampling clock",get=GetSampleClock,set=SetSampleClock, enum = []),\
            BitFieldInfo(name="SimulatedDrivers",type="int",units="",minVal="0",maxVal="1",description="Force all interactions with simulated drivers",get=GetSimulatedDrivers,set=SetSimulatedDrivers, enum = []),\
            BitFieldInfo(name="TempSanityCheckDisable",type="int",units="",minVal="0",maxVal="1",description="Disable the temperature sanity check when set",get=GetTempSanityCheckDisable,set=SetTempSanityCheckDisable, enum = []),\
            BitFieldInfo(name="SocDigFltrEventsEn",type="int",units="",minVal="0",maxVal="1",description="Enable/disable SOC Digital Filter test data output",get=GetSocDigFltrEventsEn,set=SetSocDigFltrEventsEn, enum = []),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="7",description="Reserved",get=GetReserved,set=SetReserved, enum = []),\
            BitFieldInfo(name="BrickCounterDisable",type="int",units="",minVal="0",maxVal="1",description="Disable the brick counter when set",get=GetBrickCounterDisable,set=SetBrickCounterDisable, enum = [])], enum = [])\
    ]

Messaging.Register("BatteryDebug.DebugMode.Status", BatteryDebug_DebugMode_Status.ID, BatteryDebug_DebugMode_Status)
