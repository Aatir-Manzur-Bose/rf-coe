#    obj/CodeGenerator/Python/BatteryDebug/EnteringRegionType.py
#    Created 27/07/2023 at 10:09:49 from:
#        Messages = messages/BatteryDebug/EnteringRegionType.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_EnteringRegionType_Status :
    ID = 102867
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    RegionType = OrderedDict([("QuickChargeDischarge", 0), ("QuickCharge", 1), ("FastChargeDischarge", 2), ("FastCharge", 3), ("StandardChargeDischarge", 4), ("StandardCharge", 5), ("PrechargeChargeDischarge", 6), ("PrechargeCharge", 7), ("TrickleCharge", 8), ("ZeroVoltTrickleCharge", 9), ("Discharge", 10), ("Brick", 11), ("LowPowerState", 12), ("ShipMode", 13), ("ShelfMode", 14), ("LowPowerStateHighVoltage", 15), ("LowPowerStateLowVoltage", 16), ("Preliminary", 17), ("QuickChargeDischargeVariant1", 18), ("QuickChargeDischargeVariant2", 19), ("QuickChargeDischargeVariant3", 20), ("QuickChargeDischargeVariant4", 21), ("FastChargeDischargeVariant1", 22), ("StandardChargeDischargeVariant1", 23), ("TrickleChargeVariant1", 24), ("SlowChargeDischarge", 25), ("Invalid", 26)])
    ReverseRegionType = OrderedDict([(0, "QuickChargeDischarge"), (1, "QuickCharge"), (2, "FastChargeDischarge"), (3, "FastCharge"), (4, "StandardChargeDischarge"), (5, "StandardCharge"), (6, "PrechargeChargeDischarge"), (7, "PrechargeCharge"), (8, "TrickleCharge"), (9, "ZeroVoltTrickleCharge"), (10, "Discharge"), (11, "Brick"), (12, "LowPowerState"), (13, "ShipMode"), (14, "ShelfMode"), (15, "LowPowerStateHighVoltage"), (16, "LowPowerStateLowVoltage"), (17, "Preliminary"), (18, "QuickChargeDischargeVariant1"), (19, "QuickChargeDischargeVariant2"), (20, "QuickChargeDischargeVariant3"), (21, "QuickChargeDischargeVariant4"), (22, "FastChargeDischargeVariant1"), (23, "StandardChargeDischargeVariant1"), (24, "TrickleChargeVariant1"), (25, "SlowChargeDischarge"), (26, "Invalid")])
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 29), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (29, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_EnteringRegionType_Status.MSG_OFFSET + BatteryDebug_EnteringRegionType_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_EnteringRegionType_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_EnteringRegionType_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_EnteringRegionType_Status.MSG_OFFSET + BatteryDebug_EnteringRegionType_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_EnteringRegionType_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_EnteringRegionType_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.EnteringRegionType.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnteringRegionType(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_EnteringRegionType_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = BatteryDebug_EnteringRegionType_Status.ReverseRegionType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnteringRegionType(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = BatteryDebug_EnteringRegionType_Status.RegionType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_EnteringRegionType_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EnteringRegionType",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetEnteringRegionType,set=SetEnteringRegionType,count=1, bitfieldInfo = [], enum = [RegionType, ReverseRegionType])\
    ]

Messaging.Register("BatteryDebug.EnteringRegionType.Status", BatteryDebug_EnteringRegionType_Status.ID, BatteryDebug_EnteringRegionType_Status)
