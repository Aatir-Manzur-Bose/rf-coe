#    obj/CodeGenerator/Python/BatteryDebug/VoltageGainOffset.py
#    Created 27/07/2023 at 10:09:56 from:
#        Messages = messages/BatteryDebug/VoltageGainOffset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_VoltageGainOffset_Get :
    ID = 102993
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 37), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (37, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_Get.MSG_OFFSET + BatteryDebug_VoltageGainOffset_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_VoltageGainOffset_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_VoltageGainOffset_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_Get.MSG_OFFSET + BatteryDebug_VoltageGainOffset_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_VoltageGainOffset_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_VoltageGainOffset_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.VoltageGainOffset.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Measurement channel"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Measurement channel"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Measurement channel",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.VoltageGainOffset.Get", BatteryDebug_VoltageGainOffset_Get.ID, BatteryDebug_VoltageGainOffset_Get)
#    obj/CodeGenerator/Python/BatteryDebug/VoltageGainOffset.py
#    Created 27/07/2023 at 10:09:56 from:
#        Messages = messages/BatteryDebug/VoltageGainOffset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_VoltageGainOffset_SetGet :
    ID = 102994
    SIZE = 9
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 37), ("Operator", 2)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (37, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + BatteryDebug_VoltageGainOffset_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_VoltageGainOffset_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_VoltageGainOffset_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + BatteryDebug_VoltageGainOffset_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_VoltageGainOffset_SetGet.ID)
            self.hdr.SetDataLength(BatteryDebug_VoltageGainOffset_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.VoltageGainOffset.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Measurement channel"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetGain(self):
        """Voltage gain"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def GetOffset(self):
        """Voltage offset"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Measurement channel"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetGain(self, value):
        """Voltage gain"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def SetOffset(self, value):
        """Voltage offset"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_SetGet.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Measurement channel",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Gain",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Voltage gain",get=GetGain,set=SetGain,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Offset",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Voltage offset",get=GetOffset,set=SetOffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.VoltageGainOffset.SetGet", BatteryDebug_VoltageGainOffset_SetGet.ID, BatteryDebug_VoltageGainOffset_SetGet)
#    obj/CodeGenerator/Python/BatteryDebug/VoltageGainOffset.py
#    Created 27/07/2023 at 10:09:56 from:
#        Messages = messages/BatteryDebug/VoltageGainOffset.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_VoltageGainOffset_Status :
    ID = 102995
    SIZE = 9
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 37), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (37, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + BatteryDebug_VoltageGainOffset_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_VoltageGainOffset_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_VoltageGainOffset_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + BatteryDebug_VoltageGainOffset_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_VoltageGainOffset_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_VoltageGainOffset_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.VoltageGainOffset.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChannel(self):
        """Measurement channel"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def GetGain(self):
        """Voltage gain"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def GetOffset(self):
        """Voltage offset"""
        value = struct.unpack_from('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChannel(self, value):
        """Measurement channel"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('1')
    @msg.size('4')
    @msg.count(1)
    def SetGain(self, value):
        """Voltage gain"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('FLT_MIN')
    @msg.maxVal('FLT_MAX')
    @msg.offset('5')
    @msg.size('4')
    @msg.count(1)
    def SetOffset(self, value):
        """Voltage offset"""
        tmp = value
        struct.pack_into('>f', self.rawBuffer(), BatteryDebug_VoltageGainOffset_Status.MSG_OFFSET + 5, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Channel",type="int",units="",minVal="0",maxVal="255",description="Measurement channel",get=GetChannel,set=SetChannel,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Gain",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Voltage gain",get=GetGain,set=SetGain,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Offset",type="float",units="",minVal="FLT_MIN",maxVal="FLT_MAX",description="Voltage offset",get=GetOffset,set=SetOffset,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.VoltageGainOffset.Status", BatteryDebug_VoltageGainOffset_Status.ID, BatteryDebug_VoltageGainOffset_Status)
