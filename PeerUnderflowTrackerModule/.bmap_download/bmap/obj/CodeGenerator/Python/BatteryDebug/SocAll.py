#    obj/CodeGenerator/Python/BatteryDebug/SocAll.py
#    Created 27/07/2023 at 10:09:52 from:
#        Messages = messages/BatteryDebug/SocAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocAll_Get :
    ID = 103409
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 63), ("Operator", 1)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (63, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocAll_Get.MSG_OFFSET + BatteryDebug_SocAll_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocAll_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocAll_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocAll_Get.MSG_OFFSET + BatteryDebug_SocAll_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocAll_Get.ID)
            self.hdr.SetDataLength(BatteryDebug_SocAll_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocAll.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("BatteryDebug.SocAll.Get", BatteryDebug_SocAll_Get.ID, BatteryDebug_SocAll_Get)
#    obj/CodeGenerator/Python/BatteryDebug/SocAll.py
#    Created 27/07/2023 at 10:09:52 from:
#        Messages = messages/BatteryDebug/SocAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocAll_SetGet :
    ID = 103410
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 63), ("Operator", 2)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (63, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocAll_SetGet.MSG_OFFSET + BatteryDebug_SocAll_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocAll_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocAll_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocAll_SetGet.MSG_OFFSET + BatteryDebug_SocAll_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocAll_SetGet.ID)
            self.hdr.SetDataLength(BatteryDebug_SocAll_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocAll.SetGet"
    # Accessors
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSocRaw(self):
        """SocRaw - SOC percent from voltage to soc table"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSocFiltered(self):
        """SocFiltered - SOC percent after SOC Digital Filter is applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSocModeled(self):
        """SocModeled - SOC percent after product model is applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSocUser(self):
        """SocUser - SOC percent after user rules are applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSocRaw(self, value):
        """SocRaw - SOC percent from voltage to soc table"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSocFiltered(self, value):
        """SocFiltered - SOC percent after SOC Digital Filter is applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSocModeled(self, value):
        """SocModeled - SOC percent after product model is applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSocUser(self, value):
        """SocUser - SOC percent after user rules are applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_SetGet.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SocRaw",type="int",units="Percent",minVal="0",maxVal="255",description="SocRaw - SOC percent from voltage to soc table",get=GetSocRaw,set=SetSocRaw,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocFiltered",type="int",units="Percent",minVal="0",maxVal="255",description="SocFiltered - SOC percent after SOC Digital Filter is applied",get=GetSocFiltered,set=SetSocFiltered,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocModeled",type="int",units="Percent",minVal="0",maxVal="255",description="SocModeled - SOC percent after product model is applied",get=GetSocModeled,set=SetSocModeled,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocUser",type="int",units="Percent",minVal="0",maxVal="255",description="SocUser - SOC percent after user rules are applied",get=GetSocUser,set=SetSocUser,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.SocAll.SetGet", BatteryDebug_SocAll_SetGet.ID, BatteryDebug_SocAll_SetGet)
#    obj/CodeGenerator/Python/BatteryDebug/SocAll.py
#    Created 27/07/2023 at 10:09:52 from:
#        Messages = messages/BatteryDebug/SocAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class BatteryDebug_SocAll_Status :
    ID = 103411
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 25), ("Function", 63), ("Operator", 3)])
    ReverseIDs = OrderedDict([(25, "FunctionBlock"), (63, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(BatteryDebug_SocAll_Status.MSG_OFFSET + BatteryDebug_SocAll_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, BatteryDebug_SocAll_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, BatteryDebug_SocAll_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(BatteryDebug_SocAll_Status.MSG_OFFSET + BatteryDebug_SocAll_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(BatteryDebug_SocAll_Status.ID)
            self.hdr.SetDataLength(BatteryDebug_SocAll_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "BatteryDebug.SocAll.Status"
    # Accessors
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSocRaw(self):
        """SocRaw - SOC percent from voltage to soc table"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSocFiltered(self):
        """SocFiltered - SOC percent after SOC Digital Filter is applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSocModeled(self):
        """SocModeled - SOC percent after product model is applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSocUser(self):
        """SocUser - SOC percent after user rules are applied"""
        value = struct.unpack_from('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSocRaw(self, value):
        """SocRaw - SOC percent from voltage to soc table"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSocFiltered(self, value):
        """SocFiltered - SOC percent after SOC Digital Filter is applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSocModeled(self, value):
        """SocModeled - SOC percent after product model is applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('Percent')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSocUser(self, value):
        """SocUser - SOC percent after user rules are applied"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), BatteryDebug_SocAll_Status.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SocRaw",type="int",units="Percent",minVal="0",maxVal="255",description="SocRaw - SOC percent from voltage to soc table",get=GetSocRaw,set=SetSocRaw,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocFiltered",type="int",units="Percent",minVal="0",maxVal="255",description="SocFiltered - SOC percent after SOC Digital Filter is applied",get=GetSocFiltered,set=SetSocFiltered,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocModeled",type="int",units="Percent",minVal="0",maxVal="255",description="SocModeled - SOC percent after product model is applied",get=GetSocModeled,set=SetSocModeled,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SocUser",type="int",units="Percent",minVal="0",maxVal="255",description="SocUser - SOC percent after user rules are applied",get=GetSocUser,set=SetSocUser,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("BatteryDebug.SocAll.Status", BatteryDebug_SocAll_Status.ID, BatteryDebug_SocAll_Status)
