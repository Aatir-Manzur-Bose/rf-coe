#    obj/CodeGenerator/Python/EarbudDebug/State.py
#    Created 27/07/2023 at 10:10:25 from:
#        Messages = messages/EarbudDebug/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class EarbudDebug_State_Get :
    ID = 110641
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 27), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(27, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(EarbudDebug_State_Get.MSG_OFFSET + EarbudDebug_State_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, EarbudDebug_State_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, EarbudDebug_State_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(EarbudDebug_State_Get.MSG_OFFSET + EarbudDebug_State_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(EarbudDebug_State_Get.ID)
            self.hdr.SetDataLength(EarbudDebug_State_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "EarbudDebug.State.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("EarbudDebug.State.Get", EarbudDebug_State_Get.ID, EarbudDebug_State_Get)
#    obj/CodeGenerator/Python/EarbudDebug/State.py
#    Created 27/07/2023 at 10:10:25 from:
#        Messages = messages/EarbudDebug/State.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class EarbudDebug_State_Status :
    ID = 110643
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    EarbudStates = OrderedDict([("EARBUD_STATE_UNKNOWN", 0), ("EARBUD_STATE_INIT", 1), ("EARBUD_STATE_IN_CASE_OPEN", 2), ("EARBUD_STATE_IN_CASE_CLOSED", 3), ("EARBUD_STATE_OCOE", 4), ("EARBUD_STATE_DONNING", 5), ("EARBUD_STATE_IN_EAR", 6)])
    ReverseEarbudStates = OrderedDict([(0, "EARBUD_STATE_UNKNOWN"), (1, "EARBUD_STATE_INIT"), (2, "EARBUD_STATE_IN_CASE_OPEN"), (3, "EARBUD_STATE_IN_CASE_CLOSED"), (4, "EARBUD_STATE_OCOE"), (5, "EARBUD_STATE_DONNING"), (6, "EARBUD_STATE_IN_EAR")])
    EarbudSubStates = OrderedDict([("EARBUD_SUBSTATE_UNKNOWN", 0), ("EARBUD_SUBSTATE_OFF", 1), ("EARBUD_SUBSTATE_UX_OFF", 2), ("EARBUD_SUBSTATE_ACTIVE", 3), ("EARBUD_SUBSTATE_HIBERNATE", 4), ("EARBUD_SUBSTATE_SUPPORT", 5)])
    ReverseEarbudSubStates = OrderedDict([(0, "EARBUD_SUBSTATE_UNKNOWN"), (1, "EARBUD_SUBSTATE_OFF"), (2, "EARBUD_SUBSTATE_UX_OFF"), (3, "EARBUD_SUBSTATE_ACTIVE"), (4, "EARBUD_SUBSTATE_HIBERNATE"), (5, "EARBUD_SUBSTATE_SUPPORT")])
    IDs = OrderedDict([("FunctionBlock", 27), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(27, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(EarbudDebug_State_Status.MSG_OFFSET + EarbudDebug_State_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, EarbudDebug_State_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, EarbudDebug_State_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(EarbudDebug_State_Status.MSG_OFFSET + EarbudDebug_State_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(EarbudDebug_State_Status.ID)
            self.hdr.SetDataLength(EarbudDebug_State_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "EarbudDebug.State.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetValueState(self):
        """The current state of the Earbud Subsystem"""
        value = struct.unpack_from('B', self.rawBuffer(), EarbudDebug_State_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetState(self, enumAsInt=0):
        """"""
        value = (self.GetValueState() >> 0) & 0xff
        if not enumAsInt:
            value = EarbudDebug_State_Status.ReverseEarbudStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetValueSubState(self):
        """The current substate of the Earbud Subsystem"""
        value = struct.unpack_from('B', self.rawBuffer(), EarbudDebug_State_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetSubstate(self, enumAsInt=0):
        """"""
        value = (self.GetValueSubState() >> 0) & 0xff
        if not enumAsInt:
            value = EarbudDebug_State_Status.ReverseEarbudSubStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetValueState(self, value):
        """The current state of the Earbud Subsystem"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), EarbudDebug_State_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetState(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = EarbudDebug_State_Status.EarbudStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        self.SetValueState((self.GetValueState() & ~(0xff << 0)) | ((tmp & 0xff) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetValueSubState(self, value):
        """The current substate of the Earbud Subsystem"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), EarbudDebug_State_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetSubstate(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = EarbudDebug_State_Status.EarbudSubStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        self.SetValueSubState((self.GetValueSubState() & ~(0xff << 0)) | ((tmp & 0xff) << 0))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ValueState",type="int",units="",minVal="0",maxVal="255",description="The current state of the Earbud Subsystem",get=GetValueState,set=SetValueState,count=1, bitfieldInfo = [\
            BitFieldInfo(name="State",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetState,set=SetState, enum = [EarbudStates, ReverseEarbudStates])], enum = []),\
        FieldInfo(name="ValueSubState",type="int",units="",minVal="0",maxVal="255",description="The current substate of the Earbud Subsystem",get=GetValueSubState,set=SetValueSubState,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Substate",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetSubstate,set=SetSubstate, enum = [EarbudSubStates, ReverseEarbudSubStates])], enum = [])\
    ]

Messaging.Register("EarbudDebug.State.Status", EarbudDebug_State_Status.ID, EarbudDebug_State_Status)
