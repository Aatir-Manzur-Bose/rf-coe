#    obj/CodeGenerator/Python/Peer/SmartANRParams.py
#    Created 27/07/2023 at 10:10:57 from:
#        Messages = messages/Peer/SmartANRParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_SmartANRParams_Get :
    ID = 61697
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 16), ("Operator", 1)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (16, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_SmartANRParams_Get.MSG_OFFSET + Peer_SmartANRParams_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_SmartANRParams_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_SmartANRParams_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_SmartANRParams_Get.MSG_OFFSET + Peer_SmartANRParams_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_SmartANRParams_Get.ID)
            self.hdr.SetDataLength(Peer_SmartANRParams_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.SmartANRParams.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Peer.SmartANRParams.Get", Peer_SmartANRParams_Get.ID, Peer_SmartANRParams_Get)
#    obj/CodeGenerator/Python/Peer/SmartANRParams.py
#    Created 27/07/2023 at 10:10:57 from:
#        Messages = messages/Peer/SmartANRParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_SmartANRParams_SetGet :
    ID = 61698
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AutoAwareMode = OrderedDict([("AutoAwareModeDisable", 0), ("AutoAwareModeEnable", 1)])
    ReverseAutoAwareMode = OrderedDict([(0, "AutoAwareModeDisable"), (1, "AutoAwareModeEnable")])
    SidetoneModes = OrderedDict([("Off", 0), ("High", 1), ("Medium", 2), ("Low", 3)])
    ReverseSidetoneModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Medium"), (3, "Low")])
    Boolean = OrderedDict([("True", 1), ("False", 0)])
    ReverseBoolean = OrderedDict([(1, "True"), (0, "False")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 16), ("Operator", 2)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (16, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_SmartANRParams_SetGet.MSG_OFFSET + Peer_SmartANRParams_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_SmartANRParams_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_SmartANRParams_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_SmartANRParams_SetGet.MSG_OFFSET + Peer_SmartANRParams_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_SmartANRParams_SetGet.ID)
            self.hdr.SetDataLength(Peer_SmartANRParams_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.SmartANRParams.SetGet"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSidetoneMode(self, enumAsInt=0):
        """Current Sidetone Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_SetGet.ReverseSidetoneModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCNCStepSelection(self):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguration(self):
        """Persistence"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetPersistence(self):
        """Enable CNC Persistence (0 == disable, 1 == enable)"""
        value = (self.GetConfiguration() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetConfiguration() >> 1) & 0x7f
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetAutoAwareEnable(self, enumAsInt=0):
        """Enable/Disable setting."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_SetGet.ReverseAutoAwareMode.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetEnableSidetone(self, enumAsInt=0):
        """Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_SetGet.ReverseBoolean.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSidetoneMode(self, value):
        """Current Sidetone Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_SetGet.SidetoneModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCNCStepSelection(self, value):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguration(self, value):
        """Persistence"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetPersistence(self, value):
        """Enable CNC Persistence (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetConfiguration((self.GetConfiguration() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetConfiguration((self.GetConfiguration() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetAutoAwareEnable(self, value):
        """Enable/Disable setting."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_SetGet.AutoAwareMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetEnableSidetone(self, value):
        """Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_SetGet.Boolean.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_SetGet.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentSidetoneMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Current Sidetone Mode.",get=GetCurrentSidetoneMode,set=SetCurrentSidetoneMode,count=1, bitfieldInfo = [], enum = [SidetoneModes, ReverseSidetoneModes]),\
        FieldInfo(name="CNCStepSelection",type="int",units="",minVal="0",maxVal="255",description="The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps",get=GetCNCStepSelection,set=SetCNCStepSelection,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Configuration",type="int",units="",minVal="0",maxVal="255",description="Persistence",get=GetConfiguration,set=SetConfiguration,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Persistence",type="int",units="",minVal="0",maxVal="1",description="Enable CNC Persistence (0 == disable, 1 == enable)",get=GetPersistence,set=SetPersistence, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="AutoAwareEnable",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Enable/Disable setting.",get=GetAutoAwareEnable,set=SetAutoAwareEnable,count=1, bitfieldInfo = [], enum = [AutoAwareMode, ReverseAutoAwareMode]),\
        FieldInfo(name="EnableSidetone",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off",get=GetEnableSidetone,set=SetEnableSidetone,count=1, bitfieldInfo = [], enum = [Boolean, ReverseBoolean])\
    ]

Messaging.Register("Peer.SmartANRParams.SetGet", Peer_SmartANRParams_SetGet.ID, Peer_SmartANRParams_SetGet)
#    obj/CodeGenerator/Python/Peer/SmartANRParams.py
#    Created 27/07/2023 at 10:10:57 from:
#        Messages = messages/Peer/SmartANRParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_SmartANRParams_Status :
    ID = 61699
    SIZE = 5
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    AutoAwareMode = OrderedDict([("AutoAwareModeDisable", 0), ("AutoAwareModeEnable", 1)])
    ReverseAutoAwareMode = OrderedDict([(0, "AutoAwareModeDisable"), (1, "AutoAwareModeEnable")])
    SidetoneModes = OrderedDict([("Off", 0), ("High", 1), ("Medium", 2), ("Low", 3)])
    ReverseSidetoneModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Medium"), (3, "Low")])
    Boolean = OrderedDict([("True", 1), ("False", 0)])
    ReverseBoolean = OrderedDict([(1, "True"), (0, "False")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_SmartANRParams_Status.MSG_OFFSET + Peer_SmartANRParams_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_SmartANRParams_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_SmartANRParams_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_SmartANRParams_Status.MSG_OFFSET + Peer_SmartANRParams_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_SmartANRParams_Status.ID)
            self.hdr.SetDataLength(Peer_SmartANRParams_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.SmartANRParams.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSidetoneMode(self, enumAsInt=0):
        """Current Sidetone Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_Status.ReverseSidetoneModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCNCStepSelection(self):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguration(self):
        """Persistence"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetPersistence(self):
        """Enable CNC Persistence (0 == disable, 1 == enable)"""
        value = (self.GetConfiguration() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetConfiguration() >> 1) & 0x7f
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetAutoAwareEnable(self, enumAsInt=0):
        """Enable/Disable setting."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_Status.ReverseAutoAwareMode.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetEnableSidetone(self, enumAsInt=0):
        """Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = Peer_SmartANRParams_Status.ReverseBoolean.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSidetoneMode(self, value):
        """Current Sidetone Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_Status.SidetoneModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCNCStepSelection(self, value):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguration(self, value):
        """Persistence"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetPersistence(self, value):
        """Enable CNC Persistence (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetConfiguration((self.GetConfiguration() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetConfiguration((self.GetConfiguration() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetAutoAwareEnable(self, value):
        """Enable/Disable setting."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_Status.AutoAwareMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetEnableSidetone(self, value):
        """Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SmartANRParams_Status.Boolean.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SmartANRParams_Status.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentSidetoneMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Current Sidetone Mode.",get=GetCurrentSidetoneMode,set=SetCurrentSidetoneMode,count=1, bitfieldInfo = [], enum = [SidetoneModes, ReverseSidetoneModes]),\
        FieldInfo(name="CNCStepSelection",type="int",units="",minVal="0",maxVal="255",description="The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps",get=GetCNCStepSelection,set=SetCNCStepSelection,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Configuration",type="int",units="",minVal="0",maxVal="255",description="Persistence",get=GetConfiguration,set=SetConfiguration,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Persistence",type="int",units="",minVal="0",maxVal="1",description="Enable CNC Persistence (0 == disable, 1 == enable)",get=GetPersistence,set=SetPersistence, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="AutoAwareEnable",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Enable/Disable setting.",get=GetAutoAwareEnable,set=SetAutoAwareEnable,count=1, bitfieldInfo = [], enum = [AutoAwareMode, ReverseAutoAwareMode]),\
        FieldInfo(name="EnableSidetone",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Master to Peer - 'true' - turn sidetones on - 'false' - turn sidetones off",get=GetEnableSidetone,set=SetEnableSidetone,count=1, bitfieldInfo = [], enum = [Boolean, ReverseBoolean])\
    ]

Messaging.Register("Peer.SmartANRParams.Status", Peer_SmartANRParams_Status.ID, Peer_SmartANRParams_Status)
