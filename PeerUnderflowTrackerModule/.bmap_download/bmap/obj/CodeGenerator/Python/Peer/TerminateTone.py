#    obj/CodeGenerator/Python/Peer/TerminateTone.py
#    Created 27/07/2023 at 10:10:58 from:
#        Messages = messages/Peer/TerminateTone.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_TerminateTone_Start :
    ID = 61653
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 13), ("Operator", 5)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (13, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_TerminateTone_Start.MSG_OFFSET + Peer_TerminateTone_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_TerminateTone_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_TerminateTone_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_TerminateTone_Start.MSG_OFFSET + Peer_TerminateTone_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_TerminateTone_Start.ID)
            self.hdr.SetDataLength(Peer_TerminateTone_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.TerminateTone.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetToneInfo(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_TerminateTone_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetForceTerminate(self):
        """True if tone termination is forced under all conditions"""
        value = (self.GetToneInfo() >> 0) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetLocalOnly(self):
        """True if the termination happens locally, it is just a notification to peer. Otherwise False."""
        value = (self.GetToneInfo() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Getunused(self):
        """unused, should be set to 0"""
        value = (self.GetToneInfo() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetToneInfo(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_TerminateTone_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetForceTerminate(self, value):
        """True if tone termination is forced under all conditions"""
        tmp = min(max(value, 0), 1)
        self.SetToneInfo((self.GetToneInfo() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetLocalOnly(self, value):
        """True if the termination happens locally, it is just a notification to peer. Otherwise False."""
        tmp = min(max(value, 0), 1)
        self.SetToneInfo((self.GetToneInfo() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def Setunused(self, value):
        """unused, should be set to 0"""
        tmp = min(max(value, 0), 63)
        self.SetToneInfo((self.GetToneInfo() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ToneInfo",type="int",units="",minVal="0",maxVal="255",description="",get=GetToneInfo,set=SetToneInfo,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ForceTerminate",type="int",units="Boolean",minVal="0",maxVal="1",description="True if tone termination is forced under all conditions",get=GetForceTerminate,set=SetForceTerminate, enum = []),\
            BitFieldInfo(name="LocalOnly",type="int",units="Boolean",minVal="0",maxVal="1",description="True if the termination happens locally, it is just a notification to peer. Otherwise False.",get=GetLocalOnly,set=SetLocalOnly, enum = []),\
            BitFieldInfo(name="unused",type="int",units="",minVal="0",maxVal="63",description="unused, should be set to 0",get=Getunused,set=Setunused, enum = [])], enum = [])\
    ]

Messaging.Register("Peer.TerminateTone.Start", Peer_TerminateTone_Start.ID, Peer_TerminateTone_Start)
#    obj/CodeGenerator/Python/Peer/TerminateTone.py
#    Created 27/07/2023 at 10:10:58 from:
#        Messages = messages/Peer/TerminateTone.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_TerminateTone_Result :
    ID = 61654
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 13), ("Operator", 6)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (13, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_TerminateTone_Result.MSG_OFFSET + Peer_TerminateTone_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_TerminateTone_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_TerminateTone_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_TerminateTone_Result.MSG_OFFSET + Peer_TerminateTone_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_TerminateTone_Result.ID)
            self.hdr.SetDataLength(Peer_TerminateTone_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.TerminateTone.Result"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetResult(self):
        """False - terminate tone command fail, True - terminate tone command success"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_TerminateTone_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetResult(self, value):
        """False - terminate tone command fail, True - terminate tone command success"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_TerminateTone_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Result",type="int",units="Boolean",minVal="0",maxVal="255",description="False - terminate tone command fail, True - terminate tone command success",get=GetResult,set=SetResult,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Peer.TerminateTone.Result", Peer_TerminateTone_Result.ID, Peer_TerminateTone_Result)
