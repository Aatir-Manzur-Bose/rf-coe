#    obj/CodeGenerator/Python/Peer/PhysicalState.py
#    Created 27/07/2023 at 10:10:57 from:
#        Messages = messages/Peer/PhysicalState.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_PhysicalState_Status :
    ID = 61587
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    EarbudPhyStates = OrderedDict([("EARBUD_STATE_UNKNOWN", 0), ("EARBUD_STATE_IN_CASE", 1), ("EARBUD_STATE_OUT_OF_CASE", 2), ("EARBUD_STATE_OUT_OF_CASE_AT_REST", 3), ("EARBUD_STATE_DONNING", 4), ("EARBUD_STATE_IN_EAR", 5)])
    ReverseEarbudPhyStates = OrderedDict([(0, "EARBUD_STATE_UNKNOWN"), (1, "EARBUD_STATE_IN_CASE"), (2, "EARBUD_STATE_OUT_OF_CASE"), (3, "EARBUD_STATE_OUT_OF_CASE_AT_REST"), (4, "EARBUD_STATE_DONNING"), (5, "EARBUD_STATE_IN_EAR")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 9), ("Operator", 3)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (9, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_PhysicalState_Status.MSG_OFFSET + Peer_PhysicalState_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_PhysicalState_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_PhysicalState_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_PhysicalState_Status.MSG_OFFSET + Peer_PhysicalState_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_PhysicalState_Status.ID)
            self.hdr.SetDataLength(Peer_PhysicalState_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.PhysicalState.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEarbudPhyState(self, enumAsInt=0):
        """physical state of earbud"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_PhysicalState_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Peer_PhysicalState_Status.ReverseEarbudPhyStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEarbudPhyState(self, value):
        """physical state of earbud"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_PhysicalState_Status.EarbudPhyStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_PhysicalState_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EarbudPhyState",type="enumeration",units="",minVal="0",maxVal="255",description="physical state of earbud",get=GetEarbudPhyState,set=SetEarbudPhyState,count=1, bitfieldInfo = [], enum = [EarbudPhyStates, ReverseEarbudPhyStates])\
    ]

Messaging.Register("Peer.PhysicalState.Status", Peer_PhysicalState_Status.ID, Peer_PhysicalState_Status)
