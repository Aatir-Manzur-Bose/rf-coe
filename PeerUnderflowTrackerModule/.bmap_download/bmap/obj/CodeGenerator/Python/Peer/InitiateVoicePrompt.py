#    obj/CodeGenerator/Python/Peer/InitiateVoicePrompt.py
#    Created 27/07/2023 at 10:10:57 from:
#        Messages = messages/Peer/InitiateVoicePrompt.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_InitiateVoicePrompt_Start :
    ID = 61541
    SIZE = 245
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 6), ("Operator", 5)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (6, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_InitiateVoicePrompt_Start.MSG_OFFSET + Peer_InitiateVoicePrompt_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_InitiateVoicePrompt_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_InitiateVoicePrompt_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_InitiateVoicePrompt_Start.MSG_OFFSET + Peer_InitiateVoicePrompt_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_InitiateVoicePrompt_Start.ID)
            self.hdr.SetDataLength(Peer_InitiateVoicePrompt_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.InitiateVoicePrompt.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def GetVoicePromptID(self, idx):
        """voice prompt ID to play."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSizeData(self):
        """Size of Data1"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSizeData2(self):
        """Size of Data2"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetVoicePromptInfo(self):
        """voice prompt information"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetReferenceNumber(self):
        """Reference number used to sync the earbuds, it should keep the same in InitiateVoicePrompt and StartEngine command, range 1-63, 0 reserved for normal play"""
        value = (self.GetVoicePromptInfo() >> 0) & 0x3f
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetSynchronize(self):
        """True if this voice prompt needs to be synchronized with peer device(s)"""
        value = (self.GetVoicePromptInfo() >> 6) & 0x1
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def GetCanBeQueued(self):
        """True if voice prompt can be queued"""
        value = (self.GetVoicePromptInfo() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(240)
    def GetVoicePromptData(self, idx):
        """payload length equal to SizeData + SizeData2, the maximum is 240"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 5+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def SetVoicePromptID(self, value, idx):
        """voice prompt ID to play."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSizeData(self, value):
        """Size of Data1"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSizeData2(self, value):
        """Size of Data2"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetVoicePromptInfo(self, value):
        """voice prompt information"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetReferenceNumber(self, value):
        """Reference number used to sync the earbuds, it should keep the same in InitiateVoicePrompt and StartEngine command, range 1-63, 0 reserved for normal play"""
        tmp = min(max(value, 0), 63)
        self.SetVoicePromptInfo((self.GetVoicePromptInfo() & ~(0x3f << 0)) | ((tmp & 0x3f) << 0))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetSynchronize(self, value):
        """True if this voice prompt needs to be synchronized with peer device(s)"""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptInfo((self.GetVoicePromptInfo() & ~(0x1 << 6)) | ((tmp & 0x1) << 6))
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('4')
    @msg.size('0')
    @msg.count(1)
    def SetCanBeQueued(self, value):
        """True if voice prompt can be queued"""
        tmp = min(max(value, 0), 1)
        self.SetVoicePromptInfo((self.GetVoicePromptInfo() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(240)
    def SetVoicePromptData(self, value, idx):
        """payload length equal to SizeData + SizeData2, the maximum is 240"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_InitiateVoicePrompt_Start.MSG_OFFSET + 5+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="VoicePromptID",type="int",units="",minVal="0",maxVal="255",description="voice prompt ID to play.",get=GetVoicePromptID,set=SetVoicePromptID,count=2, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SizeData",type="int",units="",minVal="0",maxVal="255",description="Size of Data1",get=GetSizeData,set=SetSizeData,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SizeData2",type="int",units="",minVal="0",maxVal="255",description="Size of Data2",get=GetSizeData2,set=SetSizeData2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="VoicePromptInfo",type="int",units="",minVal="0",maxVal="255",description="voice prompt information",get=GetVoicePromptInfo,set=SetVoicePromptInfo,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ReferenceNumber",type="int",units="",minVal="0",maxVal="63",description="Reference number used to sync the earbuds, it should keep the same in InitiateVoicePrompt and StartEngine command, range 1-63, 0 reserved for normal play",get=GetReferenceNumber,set=SetReferenceNumber, enum = []),\
            BitFieldInfo(name="Synchronize",type="int",units="Boolean",minVal="0",maxVal="1",description="True if this voice prompt needs to be synchronized with peer device(s)",get=GetSynchronize,set=SetSynchronize, enum = []),\
            BitFieldInfo(name="CanBeQueued",type="int",units="Boolean",minVal="0",maxVal="1",description="True if voice prompt can be queued",get=GetCanBeQueued,set=SetCanBeQueued, enum = [])], enum = []),\
        FieldInfo(name="VoicePromptData",type="int",units="",minVal="0",maxVal="255",description="payload length equal to SizeData + SizeData2, the maximum is 240",get=GetVoicePromptData,set=SetVoicePromptData,count=240, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Peer.InitiateVoicePrompt.Start", Peer_InitiateVoicePrompt_Start.ID, Peer_InitiateVoicePrompt_Start)
