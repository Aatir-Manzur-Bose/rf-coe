#    obj/CodeGenerator/Python/Peer/ButtonPress.py
#    Created 27/07/2023 at 10:10:56 from:
#        Messages = messages/Peer/ButtonPress.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_ButtonPress_Status :
    ID = 61475
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ButtonPressType = OrderedDict([("Reserved", 0), ("RisingEdge", 1), ("FallingEdge", 2), ("ShortPress", 3), ("SinglePress", 4), ("SinglePressAndHold", 5), ("DoublePress", 6), ("DoublePressAndHold", 7), ("TriplePress", 8), ("LongPress", 9), ("VeryLongPress", 10), ("VeryVeryLongPress", 11), ("VeryVeryVeryLongPress", 12), ("SinglePressAndHoldRelease", 13), ("DoublePressAndHoldRelease", 14), ("Repeat", 15), ("CaptouchSwipeDown", 16), ("CaptouchSwipeUp", 17), ("CaptouchTapHold", 18), ("CaptouchTap", 19), ("CaptouchDoubleTap", 20), ("CaptouchSwipeForward", 21), ("CaptouchSwipeBackward", 22), ("CaptouchTapVlongHold", 23), ("CaptouchTapHoldRelease", 24), ("AccMotion", 25), ("AccDoubleTap", 26), ("LongPressRelease", 27), ("VeryLongPressRelease", 28), ("VeryVeryLongPressRelease", 29), ("VeryVeryVeryLongPressRelease", 30), ("AccSingleTap", 31)])
    ReverseButtonPressType = OrderedDict([(0, "Reserved"), (1, "RisingEdge"), (2, "FallingEdge"), (3, "ShortPress"), (4, "SinglePress"), (5, "SinglePressAndHold"), (6, "DoublePress"), (7, "DoublePressAndHold"), (8, "TriplePress"), (9, "LongPress"), (10, "VeryLongPress"), (11, "VeryVeryLongPress"), (12, "VeryVeryVeryLongPress"), (13, "SinglePressAndHoldRelease"), (14, "DoublePressAndHoldRelease"), (15, "Repeat"), (16, "CaptouchSwipeDown"), (17, "CaptouchSwipeUp"), (18, "CaptouchTapHold"), (19, "CaptouchTap"), (20, "CaptouchDoubleTap"), (21, "CaptouchSwipeForward"), (22, "CaptouchSwipeBackward"), (23, "CaptouchTapVlongHold"), (24, "CaptouchTapHoldRelease"), (25, "AccMotion"), (26, "AccDoubleTap"), (27, "LongPressRelease"), (28, "VeryLongPressRelease"), (29, "VeryVeryLongPressRelease"), (30, "VeryVeryVeryLongPressRelease"), (31, "AccSingleTap")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_ButtonPress_Status.MSG_OFFSET + Peer_ButtonPress_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_ButtonPress_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_ButtonPress_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_ButtonPress_Status.MSG_OFFSET + Peer_ButtonPress_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_ButtonPress_Status.ID)
            self.hdr.SetDataLength(Peer_ButtonPress_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.ButtonPress.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetButtonPressInfo(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_ButtonPress_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetButtonPressType(self, enumAsInt=0):
        """Button Press Type."""
        value = (self.GetButtonPressInfo() >> 0) & 0x7f
        if not enumAsInt:
            value = Peer_ButtonPress_Status.ReverseButtonPressType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetReserved(self):
        """Reserved"""
        value = (self.GetButtonPressInfo() >> 7) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def GetButtonMask(self, idx):
        """Button Mask."""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_ButtonPress_Status.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetButtonPressInfo(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_ButtonPress_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetButtonPressType(self, value):
        """Button Press Type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_ButtonPress_Status.ButtonPressType.get(value, defaultValue)
        tmp = min(max(value, 0), 127)
        self.SetButtonPressInfo((self.GetButtonPressInfo() & ~(0x7f << 0)) | ((tmp & 0x7f) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetReserved(self, value):
        """Reserved"""
        tmp = min(max(value, 0), 1)
        self.SetButtonPressInfo((self.GetButtonPressInfo() & ~(0x1 << 7)) | ((tmp & 0x1) << 7))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(59)
    def SetButtonMask(self, value, idx):
        """Button Mask."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_ButtonPress_Status.MSG_OFFSET + 1+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ButtonPressInfo",type="int",units="",minVal="0",maxVal="255",description="",get=GetButtonPressInfo,set=SetButtonPressInfo,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ButtonPressType",type="enumeration",units="Enum",minVal="0",maxVal="127",description="Button Press Type.",get=GetButtonPressType,set=SetButtonPressType, enum = [ButtonPressType, ReverseButtonPressType]),\
            BitFieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="1",description="Reserved",get=GetReserved,set=SetReserved, enum = [])], enum = []),\
        FieldInfo(name="ButtonMask",type="int",units="",minVal="0",maxVal="255",description="Button Mask.",get=GetButtonMask,set=SetButtonMask,count=59, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Peer.ButtonPress.Status", Peer_ButtonPress_Status.ID, Peer_ButtonPress_Status)
