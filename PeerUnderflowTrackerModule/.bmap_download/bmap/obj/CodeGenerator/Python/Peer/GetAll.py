#    obj/CodeGenerator/Python/Peer/GetAll.py
#    Created 27/07/2023 at 10:10:56 from:
#        Messages = messages/Peer/GetAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_GetAll_Start :
    ID = 61461
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 1), ("Operator", 5)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (1, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_GetAll_Start.MSG_OFFSET + Peer_GetAll_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_GetAll_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_GetAll_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_GetAll_Start.MSG_OFFSET + Peer_GetAll_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_GetAll_Start.ID)
            self.hdr.SetDataLength(Peer_GetAll_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.GetAll.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Peer.GetAll.Start", Peer_GetAll_Start.ID, Peer_GetAll_Start)
#    obj/CodeGenerator/Python/Peer/GetAll.py
#    Created 27/07/2023 at 10:10:56 from:
#        Messages = messages/Peer/GetAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_GetAll_Processing :
    ID = 61463
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 1), ("Operator", 7)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (1, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_GetAll_Processing.MSG_OFFSET + Peer_GetAll_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_GetAll_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_GetAll_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_GetAll_Processing.MSG_OFFSET + Peer_GetAll_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_GetAll_Processing.ID)
            self.hdr.SetDataLength(Peer_GetAll_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.GetAll.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Peer.GetAll.Processing", Peer_GetAll_Processing.ID, Peer_GetAll_Processing)
#    obj/CodeGenerator/Python/Peer/GetAll.py
#    Created 27/07/2023 at 10:10:56 from:
#        Messages = messages/Peer/GetAll.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_GetAll_Result :
    ID = 61462
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 1), ("Operator", 6)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (1, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_GetAll_Result.MSG_OFFSET + Peer_GetAll_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_GetAll_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_GetAll_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_GetAll_Result.MSG_OFFSET + Peer_GetAll_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_GetAll_Result.ID)
            self.hdr.SetDataLength(Peer_GetAll_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.GetAll.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Peer.GetAll.Result", Peer_GetAll_Result.ID, Peer_GetAll_Result)
