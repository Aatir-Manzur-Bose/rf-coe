#    obj/CodeGenerator/Python/Peer/SyncCommand.py
#    Created 27/07/2023 at 10:10:58 from:
#        Messages = messages/Peer/SyncCommand.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_SyncCommand_Start :
    ID = 61557
    SIZE = 246
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SyncEventID = OrderedDict([("ToneStartEngine", 0), ("TtsStartEngine", 1), ("LedStartPlay", 2), ("AppSpecificSystemEvent", 3)])
    ReverseSyncEventID = OrderedDict([(0, "ToneStartEngine"), (1, "TtsStartEngine"), (2, "LedStartPlay"), (3, "AppSpecificSystemEvent")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 7), ("Operator", 5)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (7, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_SyncCommand_Start.MSG_OFFSET + Peer_SyncCommand_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_SyncCommand_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_SyncCommand_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_SyncCommand_Start.MSG_OFFSET + Peer_SyncCommand_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_SyncCommand_Start.ID)
            self.hdr.SetDataLength(Peer_SyncCommand_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.SyncCommand.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTimeStamp(self):
        """Absolute Synchronized System Time to execute this command In The Unit of Microsecond"""
        value = struct.unpack_from('>L', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('SyncEventID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetSyncEventID(self, enumAsInt=0):
        """SyncEvent ID"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 4)[0]
        if not enumAsInt:
            value = Peer_SyncCommand_Start.ReverseSyncEventID.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetSizeData(self):
        """Size of Sync Event Payload"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(240)
    def GetSyncEventPayload(self, idx):
        """payload length equal to SizeData, the maximum is 240"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 6+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTimeStamp(self, value):
        """Absolute Synchronized System Time to execute this command In The Unit of Microsecond"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('SyncEventID')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetSyncEventID(self, value):
        """SyncEvent ID"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_SyncCommand_Start.SyncEventID.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetSizeData(self, value):
        """Size of Sync Event Payload"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(240)
    def SetSyncEventPayload(self, value, idx):
        """payload length equal to SizeData, the maximum is 240"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_SyncCommand_Start.MSG_OFFSET + 6+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TimeStamp",type="int",units="",minVal="0",maxVal="4294967295",description="Absolute Synchronized System Time to execute this command In The Unit of Microsecond",get=GetTimeStamp,set=SetTimeStamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SyncEventID",type="enumeration",units="SyncEventID",minVal="0",maxVal="255",description="SyncEvent ID",get=GetSyncEventID,set=SetSyncEventID,count=1, bitfieldInfo = [], enum = [SyncEventID, ReverseSyncEventID]),\
        FieldInfo(name="SizeData",type="int",units="",minVal="0",maxVal="255",description="Size of Sync Event Payload",get=GetSizeData,set=SetSizeData,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SyncEventPayload",type="int",units="",minVal="0",maxVal="255",description="payload length equal to SizeData, the maximum is 240",get=GetSyncEventPayload,set=SetSyncEventPayload,count=240, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Peer.SyncCommand.Start", Peer_SyncCommand_Start.ID, Peer_SyncCommand_Start)
