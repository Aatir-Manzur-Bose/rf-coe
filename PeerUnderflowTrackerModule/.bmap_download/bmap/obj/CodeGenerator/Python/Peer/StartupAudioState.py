#    obj/CodeGenerator/Python/Peer/StartupAudioState.py
#    Created 27/07/2023 at 10:10:58 from:
#        Messages = messages/Peer/StartupAudioState.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Peer_StartupAudioState_Status :
    ID = 61635
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    StartupAudioStates = OrderedDict([("AUDIO_INIT", 0), ("AUDIO_IDLE", 1), ("AUDIO_NOTIFICATION_PENDING", 2), ("AUDIO_OOB", 3), ("AUDIO_SESSION_START_TONE_SEND", 4), ("AUDIO_SESSION_START_TONE_END", 5), ("AUDIO_NOTIFICATION_SEND", 6), ("AUDIO_NOTIFICATION_END", 7)])
    ReverseStartupAudioStates = OrderedDict([(0, "AUDIO_INIT"), (1, "AUDIO_IDLE"), (2, "AUDIO_NOTIFICATION_PENDING"), (3, "AUDIO_OOB"), (4, "AUDIO_SESSION_START_TONE_SEND"), (5, "AUDIO_SESSION_START_TONE_END"), (6, "AUDIO_NOTIFICATION_SEND"), (7, "AUDIO_NOTIFICATION_END")])
    IDs = OrderedDict([("FunctionBlock", 15), ("Function", 12), ("Operator", 3)])
    ReverseIDs = OrderedDict([(15, "FunctionBlock"), (12, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Peer_StartupAudioState_Status.MSG_OFFSET + Peer_StartupAudioState_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Peer_StartupAudioState_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Peer_StartupAudioState_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Peer_StartupAudioState_Status.MSG_OFFSET + Peer_StartupAudioState_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Peer_StartupAudioState_Status.ID)
            self.hdr.SetDataLength(Peer_StartupAudioState_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Peer.StartupAudioState.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAudioState(self, enumAsInt=0):
        """startup audio state of earbud"""
        value = struct.unpack_from('B', self.rawBuffer(), Peer_StartupAudioState_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Peer_StartupAudioState_Status.ReverseStartupAudioStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAudioState(self, value):
        """startup audio state of earbud"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Peer_StartupAudioState_Status.StartupAudioStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Peer_StartupAudioState_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AudioState",type="enumeration",units="",minVal="0",maxVal="255",description="startup audio state of earbud",get=GetAudioState,set=SetAudioState,count=1, bitfieldInfo = [], enum = [StartupAudioStates, ReverseStartupAudioStates])\
    ]

Messaging.Register("Peer.StartupAudioState.Status", Peer_StartupAudioState_Status.ID, Peer_StartupAudioState_Status)
