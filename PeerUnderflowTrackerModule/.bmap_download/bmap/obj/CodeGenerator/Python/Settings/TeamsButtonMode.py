#    obj/CodeGenerator/Python/Settings/TeamsButtonMode.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TeamsButtonMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TeamsButtonMode_Get :
    ID = 4513
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 26), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (26, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_Get.MSG_OFFSET + Settings_TeamsButtonMode_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TeamsButtonMode_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TeamsButtonMode_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_Get.MSG_OFFSET + Settings_TeamsButtonMode_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TeamsButtonMode_Get.ID)
            self.hdr.SetDataLength(Settings_TeamsButtonMode_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TeamsButtonMode.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.TeamsButtonMode.Get", Settings_TeamsButtonMode_Get.ID, Settings_TeamsButtonMode_Get)
#    obj/CodeGenerator/Python/Settings/TeamsButtonMode.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TeamsButtonMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TeamsButtonMode_SetGet :
    ID = 4514
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    TeamsButtonMode = OrderedDict([("CombinationButtonMode", 0), ("DedicatedButtonMode", 1)])
    ReverseTeamsButtonMode = OrderedDict([(0, "CombinationButtonMode"), (1, "DedicatedButtonMode")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 26), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (26, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_SetGet.MSG_OFFSET + Settings_TeamsButtonMode_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TeamsButtonMode_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TeamsButtonMode_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_SetGet.MSG_OFFSET + Settings_TeamsButtonMode_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TeamsButtonMode_SetGet.ID)
            self.hdr.SetDataLength(Settings_TeamsButtonMode_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TeamsButtonMode.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTeamsButtonSetting(self):
        """Set the mode of the Microsoft Teams button"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_TeamsButtonMode_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetTeamsButtonMode(self, enumAsInt=0):
        """"""
        value = (self.GetTeamsButtonSetting() >> 0) & 0xff
        if not enumAsInt:
            value = Settings_TeamsButtonMode_SetGet.ReverseTeamsButtonMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTeamsButtonSetting(self, value):
        """Set the mode of the Microsoft Teams button"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_TeamsButtonMode_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetTeamsButtonMode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_TeamsButtonMode_SetGet.TeamsButtonMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        self.SetTeamsButtonSetting((self.GetTeamsButtonSetting() & ~(0xff << 0)) | ((tmp & 0xff) << 0))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TeamsButtonSetting",type="int",units="",minVal="0",maxVal="255",description="Set the mode of the Microsoft Teams button",get=GetTeamsButtonSetting,set=SetTeamsButtonSetting,count=1, bitfieldInfo = [\
            BitFieldInfo(name="TeamsButtonMode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetTeamsButtonMode,set=SetTeamsButtonMode, enum = [TeamsButtonMode, ReverseTeamsButtonMode])], enum = [])\
    ]

Messaging.Register("Settings.TeamsButtonMode.SetGet", Settings_TeamsButtonMode_SetGet.ID, Settings_TeamsButtonMode_SetGet)
#    obj/CodeGenerator/Python/Settings/TeamsButtonMode.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TeamsButtonMode.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TeamsButtonMode_Status :
    ID = 4515
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    TeamsButtonMode = OrderedDict([("CombinationButtonMode", 0), ("DedicatedButtonMode", 1)])
    ReverseTeamsButtonMode = OrderedDict([(0, "CombinationButtonMode"), (1, "DedicatedButtonMode")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 26), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (26, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_Status.MSG_OFFSET + Settings_TeamsButtonMode_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TeamsButtonMode_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TeamsButtonMode_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TeamsButtonMode_Status.MSG_OFFSET + Settings_TeamsButtonMode_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TeamsButtonMode_Status.ID)
            self.hdr.SetDataLength(Settings_TeamsButtonMode_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TeamsButtonMode.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetTeamsButtonStatus(self):
        """Report the mode of the Microsoft Teams button"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_TeamsButtonMode_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetTeamsButtonMode(self, enumAsInt=0):
        """"""
        value = (self.GetTeamsButtonStatus() >> 0) & 0xff
        if not enumAsInt:
            value = Settings_TeamsButtonMode_Status.ReverseTeamsButtonMode.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetTeamsButtonStatus(self, value):
        """Report the mode of the Microsoft Teams button"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_TeamsButtonMode_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetTeamsButtonMode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_TeamsButtonMode_Status.TeamsButtonMode.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        self.SetTeamsButtonStatus((self.GetTeamsButtonStatus() & ~(0xff << 0)) | ((tmp & 0xff) << 0))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TeamsButtonStatus",type="int",units="",minVal="0",maxVal="255",description="Report the mode of the Microsoft Teams button",get=GetTeamsButtonStatus,set=SetTeamsButtonStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="TeamsButtonMode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetTeamsButtonMode,set=SetTeamsButtonMode, enum = [TeamsButtonMode, ReverseTeamsButtonMode])], enum = [])\
    ]

Messaging.Register("Settings.TeamsButtonMode.Status", Settings_TeamsButtonMode_Status.ID, Settings_TeamsButtonMode_Status)
