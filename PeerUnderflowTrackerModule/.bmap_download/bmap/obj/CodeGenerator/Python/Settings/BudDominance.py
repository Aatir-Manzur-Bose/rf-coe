#    obj/CodeGenerator/Python/Settings/BudDominance.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/BudDominance.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_BudDominance_Get :
    ID = 4369
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 17), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (17, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_BudDominance_Get.MSG_OFFSET + Settings_BudDominance_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_BudDominance_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_BudDominance_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_BudDominance_Get.MSG_OFFSET + Settings_BudDominance_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_BudDominance_Get.ID)
            self.hdr.SetDataLength(Settings_BudDominance_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.BudDominance.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.BudDominance.Get", Settings_BudDominance_Get.ID, Settings_BudDominance_Get)
#    obj/CodeGenerator/Python/Settings/BudDominance.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/BudDominance.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_BudDominance_SetGet :
    ID = 4370
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 17), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (17, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_BudDominance_SetGet.MSG_OFFSET + Settings_BudDominance_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_BudDominance_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_BudDominance_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_BudDominance_SetGet.MSG_OFFSET + Settings_BudDominance_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_BudDominance_SetGet.ID)
            self.hdr.SetDataLength(Settings_BudDominance_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.BudDominance.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetContainer(self):
        """Which bud is configured as the dominant bud, and whether or not auto-switching is enabled"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_BudDominance_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBudDominance(self):
        """Bud that is configured to be dominant (0 == right bud, 1 == left bud)"""
        value = (self.GetContainer() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBudDominanceAutoSwitch(self):
        """Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)"""
        value = (self.GetContainer() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetContainer() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetContainer(self, value):
        """Which bud is configured as the dominant bud, and whether or not auto-switching is enabled"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_BudDominance_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBudDominance(self, value):
        """Bud that is configured to be dominant (0 == right bud, 1 == left bud)"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBudDominanceAutoSwitch(self, value):
        """Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 63)
        self.SetContainer((self.GetContainer() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="255",description="Which bud is configured as the dominant bud, and whether or not auto-switching is enabled",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="BudDominance",type="int",units="",minVal="0",maxVal="1",description="Bud that is configured to be dominant (0 == right bud, 1 == left bud)",get=GetBudDominance,set=SetBudDominance, enum = []),\
            BitFieldInfo(name="BudDominanceAutoSwitch",type="int",units="",minVal="0",maxVal="1",description="Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)",get=GetBudDominanceAutoSwitch,set=SetBudDominanceAutoSwitch, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="63",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.BudDominance.SetGet", Settings_BudDominance_SetGet.ID, Settings_BudDominance_SetGet)
#    obj/CodeGenerator/Python/Settings/BudDominance.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/BudDominance.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_BudDominance_Status :
    ID = 4371
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 17), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (17, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_BudDominance_Status.MSG_OFFSET + Settings_BudDominance_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_BudDominance_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_BudDominance_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_BudDominance_Status.MSG_OFFSET + Settings_BudDominance_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_BudDominance_Status.ID)
            self.hdr.SetDataLength(Settings_BudDominance_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.BudDominance.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetContainer(self):
        """Which bud is configured as the dominant bud, and whether or not auto-switching is enabled"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBudDominance(self):
        """Bud that is configured to be dominant (0 == right bud, 1 == left bud)"""
        value = (self.GetContainer() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetBudDominanceAutoSwitch(self):
        """Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)"""
        value = (self.GetContainer() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetContainer() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetDominantBudControls(self):
        """Single-byte bitfield of controls on the dominant bud"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetControlPlaybackDominant(self):
        """The dominant bud controls pause, play, adjusting media playback. Includes volume control."""
        value = (self.GetDominantBudControls() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetControlPhoneDominant(self):
        """The dominant bud controls answering/ending phone calls"""
        value = (self.GetDominantBudControls() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetControlHotkeyDominant(self):
        """The dominant bud controls using a custom hotkey"""
        value = (self.GetDominantBudControls() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetControlNoiseCancellationDominant(self):
        """The dominant bud controls noise cancellation"""
        value = (self.GetDominantBudControls() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetControlVPADominant(self):
        """The dominant bud controls a VPA"""
        value = (self.GetDominantBudControls() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSecondaryBudControls(self):
        """Single-byte bitfield of controls currently on the secondary (non-dominant) bud"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetControlPlaybackSecondary(self):
        """The secondary bud controls pause, play, adjusting media playback. Includes volume control."""
        value = (self.GetSecondaryBudControls() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetControlPhoneSecondary(self):
        """The secondary bud controls answering/ending phone calls"""
        value = (self.GetSecondaryBudControls() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetControlHotkeySecondary(self):
        """The secondary bud controls using a custom hotkey"""
        value = (self.GetSecondaryBudControls() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetControlNoiseCancellationSecondary(self):
        """The secondary bud controls noise cancellation"""
        value = (self.GetSecondaryBudControls() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetControlVPASecondary(self):
        """The secondary bud controls a VPA"""
        value = (self.GetSecondaryBudControls() >> 4) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetContainer(self, value):
        """Which bud is configured as the dominant bud, and whether or not auto-switching is enabled"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBudDominance(self, value):
        """Bud that is configured to be dominant (0 == right bud, 1 == left bud)"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetBudDominanceAutoSwitch(self, value):
        """Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 63)
        self.SetContainer((self.GetContainer() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetDominantBudControls(self, value):
        """Single-byte bitfield of controls on the dominant bud"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetControlPlaybackDominant(self, value):
        """The dominant bud controls pause, play, adjusting media playback. Includes volume control."""
        tmp = min(max(value, 0), 1)
        self.SetDominantBudControls((self.GetDominantBudControls() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetControlPhoneDominant(self, value):
        """The dominant bud controls answering/ending phone calls"""
        tmp = min(max(value, 0), 1)
        self.SetDominantBudControls((self.GetDominantBudControls() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetControlHotkeyDominant(self, value):
        """The dominant bud controls using a custom hotkey"""
        tmp = min(max(value, 0), 1)
        self.SetDominantBudControls((self.GetDominantBudControls() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetControlNoiseCancellationDominant(self, value):
        """The dominant bud controls noise cancellation"""
        tmp = min(max(value, 0), 1)
        self.SetDominantBudControls((self.GetDominantBudControls() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetControlVPADominant(self, value):
        """The dominant bud controls a VPA"""
        tmp = min(max(value, 0), 1)
        self.SetDominantBudControls((self.GetDominantBudControls() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSecondaryBudControls(self, value):
        """Single-byte bitfield of controls currently on the secondary (non-dominant) bud"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_BudDominance_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetControlPlaybackSecondary(self, value):
        """The secondary bud controls pause, play, adjusting media playback. Includes volume control."""
        tmp = min(max(value, 0), 1)
        self.SetSecondaryBudControls((self.GetSecondaryBudControls() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetControlPhoneSecondary(self, value):
        """The secondary bud controls answering/ending phone calls"""
        tmp = min(max(value, 0), 1)
        self.SetSecondaryBudControls((self.GetSecondaryBudControls() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetControlHotkeySecondary(self, value):
        """The secondary bud controls using a custom hotkey"""
        tmp = min(max(value, 0), 1)
        self.SetSecondaryBudControls((self.GetSecondaryBudControls() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetControlNoiseCancellationSecondary(self, value):
        """The secondary bud controls noise cancellation"""
        tmp = min(max(value, 0), 1)
        self.SetSecondaryBudControls((self.GetSecondaryBudControls() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetControlVPASecondary(self, value):
        """The secondary bud controls a VPA"""
        tmp = min(max(value, 0), 1)
        self.SetSecondaryBudControls((self.GetSecondaryBudControls() & ~(0x1 << 4)) | ((tmp & 0x1) << 4))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="255",description="Which bud is configured as the dominant bud, and whether or not auto-switching is enabled",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="BudDominance",type="int",units="",minVal="0",maxVal="1",description="Bud that is configured to be dominant (0 == right bud, 1 == left bud)",get=GetBudDominance,set=SetBudDominance, enum = []),\
            BitFieldInfo(name="BudDominanceAutoSwitch",type="int",units="",minVal="0",maxVal="1",description="Automatically switch control dominance based on in-ear state (0 == auto-switch disabled, 1 == auto-switch enabled)",get=GetBudDominanceAutoSwitch,set=SetBudDominanceAutoSwitch, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="63",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="DominantBudControls",type="int",units="",minVal="0",maxVal="255",description="Single-byte bitfield of controls on the dominant bud",get=GetDominantBudControls,set=SetDominantBudControls,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ControlPlaybackDominant",type="int",units="",minVal="0",maxVal="1",description="The dominant bud controls pause, play, adjusting media playback. Includes volume control.",get=GetControlPlaybackDominant,set=SetControlPlaybackDominant, enum = []),\
            BitFieldInfo(name="ControlPhoneDominant",type="int",units="",minVal="0",maxVal="1",description="The dominant bud controls answering/ending phone calls",get=GetControlPhoneDominant,set=SetControlPhoneDominant, enum = []),\
            BitFieldInfo(name="ControlHotkeyDominant",type="int",units="",minVal="0",maxVal="1",description="The dominant bud controls using a custom hotkey",get=GetControlHotkeyDominant,set=SetControlHotkeyDominant, enum = []),\
            BitFieldInfo(name="ControlNoiseCancellationDominant",type="int",units="",minVal="0",maxVal="1",description="The dominant bud controls noise cancellation",get=GetControlNoiseCancellationDominant,set=SetControlNoiseCancellationDominant, enum = []),\
            BitFieldInfo(name="ControlVPADominant",type="int",units="",minVal="0",maxVal="1",description="The dominant bud controls a VPA",get=GetControlVPADominant,set=SetControlVPADominant, enum = [])], enum = []),\
        FieldInfo(name="SecondaryBudControls",type="int",units="",minVal="0",maxVal="255",description="Single-byte bitfield of controls currently on the secondary (non-dominant) bud",get=GetSecondaryBudControls,set=SetSecondaryBudControls,count=1, bitfieldInfo = [\
            BitFieldInfo(name="ControlPlaybackSecondary",type="int",units="",minVal="0",maxVal="1",description="The secondary bud controls pause, play, adjusting media playback. Includes volume control.",get=GetControlPlaybackSecondary,set=SetControlPlaybackSecondary, enum = []),\
            BitFieldInfo(name="ControlPhoneSecondary",type="int",units="",minVal="0",maxVal="1",description="The secondary bud controls answering/ending phone calls",get=GetControlPhoneSecondary,set=SetControlPhoneSecondary, enum = []),\
            BitFieldInfo(name="ControlHotkeySecondary",type="int",units="",minVal="0",maxVal="1",description="The secondary bud controls using a custom hotkey",get=GetControlHotkeySecondary,set=SetControlHotkeySecondary, enum = []),\
            BitFieldInfo(name="ControlNoiseCancellationSecondary",type="int",units="",minVal="0",maxVal="1",description="The secondary bud controls noise cancellation",get=GetControlNoiseCancellationSecondary,set=SetControlNoiseCancellationSecondary, enum = []),\
            BitFieldInfo(name="ControlVPASecondary",type="int",units="",minVal="0",maxVal="1",description="The secondary bud controls a VPA",get=GetControlVPASecondary,set=SetControlVPASecondary, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.BudDominance.Status", Settings_BudDominance_Status.ID, Settings_BudDominance_Status)
