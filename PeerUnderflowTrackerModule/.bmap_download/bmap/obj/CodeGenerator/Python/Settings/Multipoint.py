#    obj/CodeGenerator/Python/Settings/Multipoint.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Multipoint.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Multipoint_Get :
    ID = 4257
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 10), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (10, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Multipoint_Get.MSG_OFFSET + Settings_Multipoint_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Multipoint_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Multipoint_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Multipoint_Get.MSG_OFFSET + Settings_Multipoint_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Multipoint_Get.ID)
            self.hdr.SetDataLength(Settings_Multipoint_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Multipoint.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.Multipoint.Get", Settings_Multipoint_Get.ID, Settings_Multipoint_Get)
#    obj/CodeGenerator/Python/Settings/Multipoint.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Multipoint.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Multipoint_SetGet :
    ID = 4258
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 10), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (10, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Multipoint_SetGet.MSG_OFFSET + Settings_Multipoint_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Multipoint_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Multipoint_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Multipoint_SetGet.MSG_OFFSET + Settings_Multipoint_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Multipoint_SetGet.ID)
            self.hdr.SetDataLength(Settings_Multipoint_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Multipoint.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetContainer(self):
        """Multipoint setting"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Multipoint_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMultipoint(self):
        """Enable multipoint (0 == disable, 1 == enable)"""
        value = (self.GetContainer() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetContainer() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetContainer(self, value):
        """Multipoint setting"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Multipoint_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMultipoint(self, value):
        """Enable multipoint (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetContainer((self.GetContainer() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetContainer((self.GetContainer() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Container",type="int",units="",minVal="0",maxVal="255",description="Multipoint setting",get=GetContainer,set=SetContainer,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Multipoint",type="int",units="",minVal="0",maxVal="1",description="Enable multipoint (0 == disable, 1 == enable)",get=GetMultipoint,set=SetMultipoint, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.Multipoint.SetGet", Settings_Multipoint_SetGet.ID, Settings_Multipoint_SetGet)
#    obj/CodeGenerator/Python/Settings/Multipoint.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Multipoint.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Multipoint_Status :
    ID = 4259
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 10), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (10, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Multipoint_Status.MSG_OFFSET + Settings_Multipoint_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Multipoint_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Multipoint_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Multipoint_Status.MSG_OFFSET + Settings_Multipoint_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Multipoint_Status.ID)
            self.hdr.SetDataLength(Settings_Multipoint_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Multipoint.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMultipointStatus(self):
        """Multipoint Status"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Multipoint_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMultipointEnabled(self):
        """0 == multipoint disabled, 1 == multipoint enabled"""
        value = (self.GetMultipointStatus() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMultipointSupported(self):
        """0 == multipoint not supported, 1 == multipoint supported"""
        value = (self.GetMultipointStatus() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetMultipointDisableSupported(self):
        """0 == multipoint disable not supported, 1 == multipoint disable supported"""
        value = (self.GetMultipointStatus() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetMultipointStatus() >> 3) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMultipointStatus(self, value):
        """Multipoint Status"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Multipoint_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMultipointEnabled(self, value):
        """0 == multipoint disabled, 1 == multipoint enabled"""
        tmp = min(max(value, 0), 1)
        self.SetMultipointStatus((self.GetMultipointStatus() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMultipointSupported(self, value):
        """0 == multipoint not supported, 1 == multipoint supported"""
        tmp = min(max(value, 0), 1)
        self.SetMultipointStatus((self.GetMultipointStatus() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetMultipointDisableSupported(self, value):
        """0 == multipoint disable not supported, 1 == multipoint disable supported"""
        tmp = min(max(value, 0), 1)
        self.SetMultipointStatus((self.GetMultipointStatus() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 31)
        self.SetMultipointStatus((self.GetMultipointStatus() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MultipointStatus",type="int",units="",minVal="0",maxVal="255",description="Multipoint Status",get=GetMultipointStatus,set=SetMultipointStatus,count=1, bitfieldInfo = [\
            BitFieldInfo(name="MultipointEnabled",type="int",units="",minVal="0",maxVal="1",description="0 == multipoint disabled, 1 == multipoint enabled",get=GetMultipointEnabled,set=SetMultipointEnabled, enum = []),\
            BitFieldInfo(name="MultipointSupported",type="int",units="",minVal="0",maxVal="1",description="0 == multipoint not supported, 1 == multipoint supported",get=GetMultipointSupported,set=SetMultipointSupported, enum = []),\
            BitFieldInfo(name="MultipointDisableSupported",type="int",units="",minVal="0",maxVal="1",description="0 == multipoint disable not supported, 1 == multipoint disable supported",get=GetMultipointDisableSupported,set=SetMultipointDisableSupported, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="31",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.Multipoint.Status", Settings_Multipoint_Status.ID, Settings_Multipoint_Status)
