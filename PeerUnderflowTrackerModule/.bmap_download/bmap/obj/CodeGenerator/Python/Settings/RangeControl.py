#    obj/CodeGenerator/Python/Settings/RangeControl.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/RangeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_RangeControl_Get :
    ID = 4209
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_RangeControl_Get.MSG_OFFSET + Settings_RangeControl_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_RangeControl_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_RangeControl_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_RangeControl_Get.MSG_OFFSET + Settings_RangeControl_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_RangeControl_Get.ID)
            self.hdr.SetDataLength(Settings_RangeControl_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.RangeControl.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.RangeControl.Get", Settings_RangeControl_Get.ID, Settings_RangeControl_Get)
#    obj/CodeGenerator/Python/Settings/RangeControl.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/RangeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_RangeControl_SetGet :
    ID = 4210
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    EqualizerAdjustmentRanges = OrderedDict([("RangeBass", 0), ("RangeMid", 1), ("RangeTreble", 2)])
    ReverseEqualizerAdjustmentRanges = OrderedDict([(0, "RangeBass"), (1, "RangeMid"), (2, "RangeTreble")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 7), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (7, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_RangeControl_SetGet.MSG_OFFSET + Settings_RangeControl_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_RangeControl_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_RangeControl_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_RangeControl_SetGet.MSG_OFFSET + Settings_RangeControl_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_RangeControl_SetGet.ID)
            self.hdr.SetDataLength(Settings_RangeControl_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.RangeControl.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetValue(self):
        """Target range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetRange(self, enumAsInt=0):
        """Optional range to adjust, e.g. bass, mid, treble. If no range is specified, default range to adjust is bass ( texttt{0x00})."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_RangeControl_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Settings_RangeControl_SetGet.ReverseEqualizerAdjustmentRanges.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetValue(self, value):
        """Target range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetRange(self, value):
        """Optional range to adjust, e.g. bass, mid, treble. If no range is specified, default range to adjust is bass ( texttt{0x00})."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_RangeControl_SetGet.EqualizerAdjustmentRanges.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_RangeControl_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Value",type="int",units="",minVal="-128",maxVal="127",description="Target range control step (signed, -128 to +127)",get=GetValue,set=SetValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range",type="enumeration",units="",minVal="0",maxVal="255",description="Optional range to adjust, e.g. bass, mid, treble. If no range is specified, default range to adjust is bass ( texttt{0x00}).",get=GetRange,set=SetRange,count=1, bitfieldInfo = [], enum = [EqualizerAdjustmentRanges, ReverseEqualizerAdjustmentRanges])\
    ]

Messaging.Register("Settings.RangeControl.SetGet", Settings_RangeControl_SetGet.ID, Settings_RangeControl_SetGet)
#    obj/CodeGenerator/Python/Settings/RangeControl.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/RangeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_RangeControl_Status :
    ID = 4211
    SIZE = 12
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    EqualizerAdjustmentRanges = OrderedDict([("RangeBass", 0), ("RangeMid", 1), ("RangeTreble", 2)])
    ReverseEqualizerAdjustmentRanges = OrderedDict([(0, "RangeBass"), (1, "RangeMid"), (2, "RangeTreble")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_RangeControl_Status.MSG_OFFSET + Settings_RangeControl_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_RangeControl_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_RangeControl_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_RangeControl_Status.MSG_OFFSET + Settings_RangeControl_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_RangeControl_Status.ID)
            self.hdr.SetDataLength(Settings_RangeControl_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.RangeControl.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetMinBass(self):
        """Minimum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetMaxBass(self):
        """Maximum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentBass(self):
        """Current range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetRangeIDBass(self, enumAsInt=0):
        """Range identifer for Bass i.e RangeBass"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = Settings_RangeControl_Status.ReverseEqualizerAdjustmentRanges.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetMinMid(self):
        """Minimum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetMaxMid(self):
        """Maximum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentMid(self):
        """Current range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetRangeIDMid(self, enumAsInt=0):
        """Range identifer for Mid i.e RangeMid"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 7)[0]
        if not enumAsInt:
            value = Settings_RangeControl_Status.ReverseEqualizerAdjustmentRanges.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def GetMinTreble(self):
        """Minimum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def GetMaxTreble(self):
        """Maximum range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 9)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentTreble(self):
        """Current range control step (signed, -128 to +127)"""
        value = struct.unpack_from('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def GetRangeIDTreble(self, enumAsInt=0):
        """Range identifer for Treble i.e RangeTreble"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 11)[0]
        if not enumAsInt:
            value = Settings_RangeControl_Status.ReverseEqualizerAdjustmentRanges.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetMinBass(self, value):
        """Minimum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetMaxBass(self, value):
        """Maximum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentBass(self, value):
        """Current range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetRangeIDBass(self, value):
        """Range identifer for Bass i.e RangeBass"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_RangeControl_Status.EqualizerAdjustmentRanges.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetMinMid(self, value):
        """Minimum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetMaxMid(self, value):
        """Maximum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentMid(self, value):
        """Current range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetRangeIDMid(self, value):
        """Range identifer for Mid i.e RangeMid"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_RangeControl_Status.EqualizerAdjustmentRanges.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('8')
    @msg.size('1')
    @msg.count(1)
    def SetMinTreble(self, value):
        """Minimum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('9')
    @msg.size('1')
    @msg.count(1)
    def SetMaxTreble(self, value):
        """Maximum range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 9, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('10')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentTreble(self, value):
        """Current range control step (signed, -128 to +127)"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('11')
    @msg.size('1')
    @msg.count(1)
    def SetRangeIDTreble(self, value):
        """Range identifer for Treble i.e RangeTreble"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_RangeControl_Status.EqualizerAdjustmentRanges.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_RangeControl_Status.MSG_OFFSET + 11, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="MinBass",type="int",units="",minVal="-128",maxVal="127",description="Minimum range control step (signed, -128 to +127)",get=GetMinBass,set=SetMinBass,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MaxBass",type="int",units="",minVal="-128",maxVal="127",description="Maximum range control step (signed, -128 to +127)",get=GetMaxBass,set=SetMaxBass,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentBass",type="int",units="",minVal="-128",maxVal="127",description="Current range control step (signed, -128 to +127)",get=GetCurrentBass,set=SetCurrentBass,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RangeIDBass",type="enumeration",units="",minVal="0",maxVal="255",description="Range identifer for Bass i.e RangeBass",get=GetRangeIDBass,set=SetRangeIDBass,count=1, bitfieldInfo = [], enum = [EqualizerAdjustmentRanges, ReverseEqualizerAdjustmentRanges]),\
        FieldInfo(name="MinMid",type="int",units="",minVal="-128",maxVal="127",description="Minimum range control step (signed, -128 to +127)",get=GetMinMid,set=SetMinMid,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MaxMid",type="int",units="",minVal="-128",maxVal="127",description="Maximum range control step (signed, -128 to +127)",get=GetMaxMid,set=SetMaxMid,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentMid",type="int",units="",minVal="-128",maxVal="127",description="Current range control step (signed, -128 to +127)",get=GetCurrentMid,set=SetCurrentMid,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RangeIDMid",type="enumeration",units="",minVal="0",maxVal="255",description="Range identifer for Mid i.e RangeMid",get=GetRangeIDMid,set=SetRangeIDMid,count=1, bitfieldInfo = [], enum = [EqualizerAdjustmentRanges, ReverseEqualizerAdjustmentRanges]),\
        FieldInfo(name="MinTreble",type="int",units="",minVal="-128",maxVal="127",description="Minimum range control step (signed, -128 to +127)",get=GetMinTreble,set=SetMinTreble,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MaxTreble",type="int",units="",minVal="-128",maxVal="127",description="Maximum range control step (signed, -128 to +127)",get=GetMaxTreble,set=SetMaxTreble,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CurrentTreble",type="int",units="",minVal="-128",maxVal="127",description="Current range control step (signed, -128 to +127)",get=GetCurrentTreble,set=SetCurrentTreble,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RangeIDTreble",type="enumeration",units="",minVal="0",maxVal="255",description="Range identifer for Treble i.e RangeTreble",get=GetRangeIDTreble,set=SetRangeIDTreble,count=1, bitfieldInfo = [], enum = [EqualizerAdjustmentRanges, ReverseEqualizerAdjustmentRanges])\
    ]

Messaging.Register("Settings.RangeControl.Status", Settings_RangeControl_Status.ID, Settings_RangeControl_Status)
