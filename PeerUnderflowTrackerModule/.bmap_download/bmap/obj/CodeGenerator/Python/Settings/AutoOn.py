#    obj/CodeGenerator/Python/Settings/AutoOn.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/AutoOn.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_AutoOn_Get :
    ID = 4465
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 23), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (23, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_AutoOn_Get.MSG_OFFSET + Settings_AutoOn_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_AutoOn_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_AutoOn_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_AutoOn_Get.MSG_OFFSET + Settings_AutoOn_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_AutoOn_Get.ID)
            self.hdr.SetDataLength(Settings_AutoOn_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.AutoOn.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.AutoOn.Get", Settings_AutoOn_Get.ID, Settings_AutoOn_Get)
#    obj/CodeGenerator/Python/Settings/AutoOn.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/AutoOn.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_AutoOn_SetGet :
    ID = 4466
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 23), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (23, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_AutoOn_SetGet.MSG_OFFSET + Settings_AutoOn_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_AutoOn_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_AutoOn_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_AutoOn_SetGet.MSG_OFFSET + Settings_AutoOn_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_AutoOn_SetGet.ID)
            self.hdr.SetDataLength(Settings_AutoOn_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.AutoOn.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguration(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_AutoOn_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAutoOnEnable(self):
        """AutoOn enable flag (0 = disable, 1 = enable)"""
        value = (self.GetConfiguration() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits"""
        value = (self.GetConfiguration() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguration(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_AutoOn_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAutoOnEnable(self, value):
        """AutoOn enable flag (0 = disable, 1 = enable)"""
        tmp = min(max(value, 0), 1)
        self.SetConfiguration((self.GetConfiguration() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits"""
        tmp = min(max(value, 0), 127)
        self.SetConfiguration((self.GetConfiguration() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Configuration",type="int",units="",minVal="0",maxVal="255",description="",get=GetConfiguration,set=SetConfiguration,count=1, bitfieldInfo = [\
            BitFieldInfo(name="AutoOnEnable",type="int",units="Boolean",minVal="0",maxVal="1",description="AutoOn enable flag (0 = disable, 1 = enable)",get=GetAutoOnEnable,set=SetAutoOnEnable, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="127",description="Unused bits",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.AutoOn.SetGet", Settings_AutoOn_SetGet.ID, Settings_AutoOn_SetGet)
#    obj/CodeGenerator/Python/Settings/AutoOn.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/AutoOn.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_AutoOn_Status :
    ID = 4467
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 23), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (23, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_AutoOn_Status.MSG_OFFSET + Settings_AutoOn_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_AutoOn_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_AutoOn_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_AutoOn_Status.MSG_OFFSET + Settings_AutoOn_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_AutoOn_Status.ID)
            self.hdr.SetDataLength(Settings_AutoOn_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.AutoOn.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguration(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_AutoOn_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetAutoOnEnable(self):
        """AutoOn enable flag (0 = disable, 1 = enable)"""
        value = (self.GetConfiguration() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedBits(self):
        """Unused bits"""
        value = (self.GetConfiguration() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguration(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_AutoOn_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetAutoOnEnable(self, value):
        """AutoOn enable flag (0 = disable, 1 = enable)"""
        tmp = min(max(value, 0), 1)
        self.SetConfiguration((self.GetConfiguration() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedBits(self, value):
        """Unused bits"""
        tmp = min(max(value, 0), 127)
        self.SetConfiguration((self.GetConfiguration() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Configuration",type="int",units="",minVal="0",maxVal="255",description="",get=GetConfiguration,set=SetConfiguration,count=1, bitfieldInfo = [\
            BitFieldInfo(name="AutoOnEnable",type="int",units="Boolean",minVal="0",maxVal="1",description="AutoOn enable flag (0 = disable, 1 = enable)",get=GetAutoOnEnable,set=SetAutoOnEnable, enum = []),\
            BitFieldInfo(name="UnusedBits",type="int",units="",minVal="0",maxVal="127",description="Unused bits",get=GetUnusedBits,set=SetUnusedBits, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.AutoOn.Status", Settings_AutoOn_Status.ID, Settings_AutoOn_Status)
