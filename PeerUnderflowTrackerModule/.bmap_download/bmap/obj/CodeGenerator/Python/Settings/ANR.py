#    obj/CodeGenerator/Python/Settings/ANR.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/ANR.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ANR_Get :
    ID = 4193
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 6), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (6, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ANR_Get.MSG_OFFSET + Settings_ANR_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ANR_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ANR_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ANR_Get.MSG_OFFSET + Settings_ANR_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ANR_Get.ID)
            self.hdr.SetDataLength(Settings_ANR_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ANR.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.ANR.Get", Settings_ANR_Get.ID, Settings_ANR_Get)
#    obj/CodeGenerator/Python/Settings/ANR.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/ANR.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ANR_SetGet :
    ID = 4194
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ANRModes = OrderedDict([("Off", 0), ("High", 1), ("Wind", 2), ("Low", 3), ("Low Wind", 4), ("Low High", 5), ("Wind Low", 6), ("Wind High", 7), ("High Low", 8), ("High Wind", 9), ("Invalid", 255)])
    ReverseANRModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Wind"), (3, "Low"), (4, "Low Wind"), (5, "Low High"), (6, "Wind Low"), (7, "Wind High"), (8, "High Low"), (9, "High Wind"), (255, "Invalid")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 6), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (6, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ANR_SetGet.MSG_OFFSET + Settings_ANR_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ANR_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ANR_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ANR_SetGet.MSG_OFFSET + Settings_ANR_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ANR_SetGet.ID)
            self.hdr.SetDataLength(Settings_ANR_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ANR.SetGet"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentANRMode(self, enumAsInt=0):
        """Change ANR Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ANR_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Settings_ANR_SetGet.ReverseANRModes.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentANRMode(self, value):
        """Change ANR Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_ANR_SetGet.ANRModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ANR_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentANRMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Change ANR Mode.",get=GetCurrentANRMode,set=SetCurrentANRMode,count=1, bitfieldInfo = [], enum = [ANRModes, ReverseANRModes])\
    ]

Messaging.Register("Settings.ANR.SetGet", Settings_ANR_SetGet.ID, Settings_ANR_SetGet)
#    obj/CodeGenerator/Python/Settings/ANR.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/ANR.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ANR_Status :
    ID = 4195
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ANRModes = OrderedDict([("Off", 0), ("High", 1), ("Wind", 2), ("Low", 3), ("Low Wind", 4), ("Low High", 5), ("Wind Low", 6), ("Wind High", 7), ("High Low", 8), ("High Wind", 9), ("Invalid", 255)])
    ReverseANRModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Wind"), (3, "Low"), (4, "Low Wind"), (5, "Low High"), (6, "Wind Low"), (7, "Wind High"), (8, "High Low"), (9, "High Wind"), (255, "Invalid")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ANR_Status.MSG_OFFSET + Settings_ANR_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ANR_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ANR_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ANR_Status.MSG_OFFSET + Settings_ANR_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ANR_Status.ID)
            self.hdr.SetDataLength(Settings_ANR_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ANR.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentANRMode(self, enumAsInt=0):
        """Current ANR Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ANR_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Settings_ANR_Status.ReverseANRModes.get(value, value)
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAvailableANRModes(self):
        """Bitfield of available ANR Settings"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ANR_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentANRMode(self, value):
        """Current ANR Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_ANR_Status.ANRModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ANR_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAvailableANRModes(self, value):
        """Bitfield of available ANR Settings"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ANR_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CurrentANRMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Current ANR Mode.",get=GetCurrentANRMode,set=SetCurrentANRMode,count=1, bitfieldInfo = [], enum = [ANRModes, ReverseANRModes]),\
        FieldInfo(name="AvailableANRModes",type="int",units="Bitfield",minVal="0",maxVal="255",description="Bitfield of available ANR Settings",get=GetAvailableANRModes,set=SetAvailableANRModes,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.ANR.Status", Settings_ANR_Status.ID, Settings_ANR_Status)
