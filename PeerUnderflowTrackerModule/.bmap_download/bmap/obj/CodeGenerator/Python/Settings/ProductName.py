#    obj/CodeGenerator/Python/Settings/ProductName.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/ProductName.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ProductName_Get :
    ID = 4129
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 2), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (2, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ProductName_Get.MSG_OFFSET + Settings_ProductName_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ProductName_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ProductName_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ProductName_Get.MSG_OFFSET + Settings_ProductName_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ProductName_Get.ID)
            self.hdr.SetDataLength(Settings_ProductName_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ProductName.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.ProductName.Get", Settings_ProductName_Get.ID, Settings_ProductName_Get)
#    obj/CodeGenerator/Python/Settings/ProductName.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/ProductName.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ProductName_SetGet :
    ID = 4130
    SIZE = 60
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 2), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (2, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ProductName_SetGet.MSG_OFFSET + Settings_ProductName_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ProductName_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ProductName_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ProductName_SetGet.MSG_OFFSET + Settings_ProductName_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ProductName_SetGet.ID)
            self.hdr.SetDataLength(Settings_ProductName_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ProductName.SetGet"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def GetProductName(self):
        """New name for product (UTF-8 string)."""
        count = 60
        if count > len(self.rawBuffer())-(Settings_ProductName_SetGet.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(Settings_ProductName_SetGet.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Settings_ProductName_SetGet.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(60)
    def SetProductName(self, value):
        """New name for product (UTF-8 string)."""
        tmp = value.encode('utf-8')
        struct.pack_into('60s', self.rawBuffer(), Settings_ProductName_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ProductName",type="string",units="ASCII",minVal="0",maxVal="255",description="New name for product (UTF-8 string).",get=GetProductName,set=SetProductName,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.ProductName.SetGet", Settings_ProductName_SetGet.ID, Settings_ProductName_SetGet)
#    obj/CodeGenerator/Python/Settings/ProductName.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/ProductName.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ProductName_Status :
    ID = 4131
    SIZE = 61
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ProductName_Status.MSG_OFFSET + Settings_ProductName_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ProductName_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ProductName_Status.SIZE)
    #
    #    self.SetUnusused(0)
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ProductName_Status.MSG_OFFSET + Settings_ProductName_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ProductName_Status.ID)
            self.hdr.SetDataLength(Settings_ProductName_Status.SIZE)
            self.initialize()

    def initialize(self):
            self.SetUnusused(0)
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ProductName.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetConfiguration(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ProductName_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetNameIsDefault(self):
        """0 -- Product name has been changed by user, 1 -- default product name."""
        value = (self.GetConfiguration() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('0')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusused(self):
        """Not currently used."""
        value = (self.GetConfiguration() >> 1) & 0x7f
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(60)
    def GetProductName(self):
        """Friendly name of product."""
        count = 60
        if count > len(self.rawBuffer())-(Settings_ProductName_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(Settings_ProductName_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), Settings_ProductName_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetConfiguration(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ProductName_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetNameIsDefault(self, value):
        """0 -- Product name has been changed by user, 1 -- default product name."""
        tmp = min(max(value, 0), 1)
        self.SetConfiguration((self.GetConfiguration() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('0')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusused(self, value):
        """Not currently used."""
        tmp = min(max(value, 0), 127)
        self.SetConfiguration((self.GetConfiguration() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(60)
    def SetProductName(self, value):
        """Friendly name of product."""
        tmp = value.encode('utf-8')
        struct.pack_into('60s', self.rawBuffer(), Settings_ProductName_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Configuration",type="int",units="",minVal="0",maxVal="255",description="",get=GetConfiguration,set=SetConfiguration,count=1, bitfieldInfo = [\
            BitFieldInfo(name="NameIsDefault",type="int",units="Boolean",minVal="0",maxVal="1",description="0 -- Product name has been changed by user, 1 -- default product name.",get=GetNameIsDefault,set=SetNameIsDefault, enum = []),\
            BitFieldInfo(name="Unusused",type="int",units="",minVal="0",maxVal="127",description="Not currently used.",get=GetUnusused,set=SetUnusused, enum = [])], enum = []),\
        FieldInfo(name="ProductName",type="string",units="ASCII",minVal="0",maxVal="255",description="Friendly name of product.",get=GetProductName,set=SetProductName,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.ProductName.Status", Settings_ProductName_Status.ID, Settings_ProductName_Status)
