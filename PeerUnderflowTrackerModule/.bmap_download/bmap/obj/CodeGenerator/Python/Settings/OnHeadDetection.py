#    obj/CodeGenerator/Python/Settings/OnHeadDetection.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/OnHeadDetection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_OnHeadDetection_Get :
    ID = 4353
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 16), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (16, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_OnHeadDetection_Get.MSG_OFFSET + Settings_OnHeadDetection_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_OnHeadDetection_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_OnHeadDetection_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_OnHeadDetection_Get.MSG_OFFSET + Settings_OnHeadDetection_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_OnHeadDetection_Get.ID)
            self.hdr.SetDataLength(Settings_OnHeadDetection_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.OnHeadDetection.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.OnHeadDetection.Get", Settings_OnHeadDetection_Get.ID, Settings_OnHeadDetection_Get)
#    obj/CodeGenerator/Python/Settings/OnHeadDetection.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/OnHeadDetection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_OnHeadDetection_SetGet :
    ID = 4354
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 16), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (16, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_OnHeadDetection_SetGet.MSG_OFFSET + Settings_OnHeadDetection_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_OnHeadDetection_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_OnHeadDetection_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_OnHeadDetection_SetGet.MSG_OFFSET + Settings_OnHeadDetection_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_OnHeadDetection_SetGet.ID)
            self.hdr.SetDataLength(Settings_OnHeadDetection_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.OnHeadDetection.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnableOnHeadDetection(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_OnHeadDetection_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadEnabled(self):
        """Toggle on-head detection (0 == do not enable, 1 == enable)"""
        value = (self.GetEnableOnHeadDetection() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedEnableOnHeadDetectionToggle(self):
        """Unused"""
        value = (self.GetEnableOnHeadDetection() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetOnHeadControl(self):
        """Change on-head detection automatic control"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_OnHeadDetection_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoPlayPause(self):
        """Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)"""
        value = (self.GetOnHeadControl() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoAnswerCall(self):
        """Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)"""
        value = (self.GetOnHeadControl() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoAwareMode(self):
        """Change to aware mode when only one bud is on head (0 -- don't change to aware, 1 -- changing to aware is enabled)"""
        value = (self.GetOnHeadControl() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedOnHeadControl(self):
        """Unused"""
        value = (self.GetOnHeadControl() >> 3) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnableOnHeadDetection(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_OnHeadDetection_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadEnabled(self, value):
        """Toggle on-head detection (0 == do not enable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedEnableOnHeadDetectionToggle(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetOnHeadControl(self, value):
        """Change on-head detection automatic control"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_OnHeadDetection_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoPlayPause(self, value):
        """Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoAnswerCall(self, value):
        """Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoAwareMode(self, value):
        """Change to aware mode when only one bud is on head (0 -- don't change to aware, 1 -- changing to aware is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedOnHeadControl(self, value):
        """Unused"""
        tmp = min(max(value, 0), 31)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EnableOnHeadDetection",type="int",units="",minVal="0",maxVal="255",description="",get=GetEnableOnHeadDetection,set=SetEnableOnHeadDetection,count=1, bitfieldInfo = [\
            BitFieldInfo(name="OnHeadEnabled",type="int",units="",minVal="0",maxVal="1",description="Toggle on-head detection (0 == do not enable, 1 == enable)",get=GetOnHeadEnabled,set=SetOnHeadEnabled, enum = []),\
            BitFieldInfo(name="UnusedEnableOnHeadDetectionToggle",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnusedEnableOnHeadDetectionToggle,set=SetUnusedEnableOnHeadDetectionToggle, enum = [])], enum = []),\
        FieldInfo(name="OnHeadControl",type="int",units="",minVal="0",maxVal="255",description="Change on-head detection automatic control",get=GetOnHeadControl,set=SetOnHeadControl,count=1, bitfieldInfo = [\
            BitFieldInfo(name="OnHeadControlAutoPlayPause",type="int",units="",minVal="0",maxVal="1",description="Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)",get=GetOnHeadControlAutoPlayPause,set=SetOnHeadControlAutoPlayPause, enum = []),\
            BitFieldInfo(name="OnHeadControlAutoAnswerCall",type="int",units="",minVal="0",maxVal="1",description="Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)",get=GetOnHeadControlAutoAnswerCall,set=SetOnHeadControlAutoAnswerCall, enum = []),\
            BitFieldInfo(name="OnHeadControlAutoAwareMode",type="int",units="",minVal="0",maxVal="1",description="Change to aware mode when only one bud is on head (0 -- don't change to aware, 1 -- changing to aware is enabled)",get=GetOnHeadControlAutoAwareMode,set=SetOnHeadControlAutoAwareMode, enum = []),\
            BitFieldInfo(name="UnusedOnHeadControl",type="int",units="",minVal="0",maxVal="31",description="Unused",get=GetUnusedOnHeadControl,set=SetUnusedOnHeadControl, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.OnHeadDetection.SetGet", Settings_OnHeadDetection_SetGet.ID, Settings_OnHeadDetection_SetGet)
#    obj/CodeGenerator/Python/Settings/OnHeadDetection.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/OnHeadDetection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_OnHeadDetection_Status :
    ID = 4355
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 16), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (16, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_OnHeadDetection_Status.MSG_OFFSET + Settings_OnHeadDetection_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_OnHeadDetection_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_OnHeadDetection_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_OnHeadDetection_Status.MSG_OFFSET + Settings_OnHeadDetection_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_OnHeadDetection_Status.ID)
            self.hdr.SetDataLength(Settings_OnHeadDetection_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.OnHeadDetection.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnableOnHeadDetection(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_OnHeadDetection_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadEnabledStatus(self):
        """Toggle on-head detection (0 == not enabled, 1 == enabled)"""
        value = (self.GetEnableOnHeadDetection() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadAutoPlayPauseSupported(self):
        """Signals that auto-play pause feature is supported by product (0 == not supported, 1 == supported)"""
        value = (self.GetEnableOnHeadDetection() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadAutoAnswerCallSupported(self):
        """Signals that auto-answer phone call feature is supported by product (0 == not supported, 1 == supported)"""
        value = (self.GetEnableOnHeadDetection() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoAwareModeSupported(self):
        """Signals that the auto aware feature is supported by the product (0 == not supported, 1 == supported)"""
        value = (self.GetEnableOnHeadDetection() >> 3) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedEnableOnHeadDetectionStatus(self):
        """Unused"""
        value = (self.GetEnableOnHeadDetection() >> 4) & 0xf
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetOnHeadControl(self):
        """Change on-head detection automatic control"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_OnHeadDetection_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoPlayPauseStatus(self):
        """Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)"""
        value = (self.GetOnHeadControl() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoAnswerCallStatus(self):
        """Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)"""
        value = (self.GetOnHeadControl() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetOnHeadControlAutoAwareModeStatus(self):
        """Change to aware mode when only one bud is on head (0 -- don't change to aware mode, 1 -- changing to aware mode is enabled)"""
        value = (self.GetOnHeadControl() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnusedOnHeadControlStatus(self):
        """Unused"""
        value = (self.GetOnHeadControl() >> 3) & 0x1f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnableOnHeadDetection(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_OnHeadDetection_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadEnabledStatus(self, value):
        """Toggle on-head detection (0 == not enabled, 1 == enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadAutoPlayPauseSupported(self, value):
        """Signals that auto-play pause feature is supported by product (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadAutoAnswerCallSupported(self, value):
        """Signals that auto-answer phone call feature is supported by product (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoAwareModeSupported(self, value):
        """Signals that the auto aware feature is supported by the product (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0x1 << 3)) | ((tmp & 0x1) << 3))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('15')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedEnableOnHeadDetectionStatus(self, value):
        """Unused"""
        tmp = min(max(value, 0), 15)
        self.SetEnableOnHeadDetection((self.GetEnableOnHeadDetection() & ~(0xf << 4)) | ((tmp & 0xf) << 4))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetOnHeadControl(self, value):
        """Change on-head detection automatic control"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_OnHeadDetection_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoPlayPauseStatus(self, value):
        """Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoAnswerCallStatus(self, value):
        """Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetOnHeadControlAutoAwareModeStatus(self, value):
        """Change to aware mode when only one bud is on head (0 -- don't change to aware mode, 1 -- changing to aware mode is enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnusedOnHeadControlStatus(self, value):
        """Unused"""
        tmp = min(max(value, 0), 31)
        self.SetOnHeadControl((self.GetOnHeadControl() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="EnableOnHeadDetection",type="int",units="",minVal="0",maxVal="255",description="",get=GetEnableOnHeadDetection,set=SetEnableOnHeadDetection,count=1, bitfieldInfo = [\
            BitFieldInfo(name="OnHeadEnabledStatus",type="int",units="",minVal="0",maxVal="1",description="Toggle on-head detection (0 == not enabled, 1 == enabled)",get=GetOnHeadEnabledStatus,set=SetOnHeadEnabledStatus, enum = []),\
            BitFieldInfo(name="OnHeadAutoPlayPauseSupported",type="int",units="",minVal="0",maxVal="1",description="Signals that auto-play pause feature is supported by product (0 == not supported, 1 == supported)",get=GetOnHeadAutoPlayPauseSupported,set=SetOnHeadAutoPlayPauseSupported, enum = []),\
            BitFieldInfo(name="OnHeadAutoAnswerCallSupported",type="int",units="",minVal="0",maxVal="1",description="Signals that auto-answer phone call feature is supported by product (0 == not supported, 1 == supported)",get=GetOnHeadAutoAnswerCallSupported,set=SetOnHeadAutoAnswerCallSupported, enum = []),\
            BitFieldInfo(name="OnHeadControlAutoAwareModeSupported",type="int",units="",minVal="0",maxVal="1",description="Signals that the auto aware feature is supported by the product (0 == not supported, 1 == supported)",get=GetOnHeadControlAutoAwareModeSupported,set=SetOnHeadControlAutoAwareModeSupported, enum = []),\
            BitFieldInfo(name="UnusedEnableOnHeadDetectionStatus",type="int",units="",minVal="0",maxVal="15",description="Unused",get=GetUnusedEnableOnHeadDetectionStatus,set=SetUnusedEnableOnHeadDetectionStatus, enum = [])], enum = []),\
        FieldInfo(name="OnHeadControl",type="int",units="",minVal="0",maxVal="255",description="Change on-head detection automatic control",get=GetOnHeadControl,set=SetOnHeadControl,count=1, bitfieldInfo = [\
            BitFieldInfo(name="OnHeadControlAutoPlayPauseStatus",type="int",units="",minVal="0",maxVal="1",description="Play media when buds are placed on head, and pause when they are removed (0 -- don't auto play/pause, 1 -- auto-play/pause is enabled)",get=GetOnHeadControlAutoPlayPauseStatus,set=SetOnHeadControlAutoPlayPauseStatus, enum = []),\
            BitFieldInfo(name="OnHeadControlAutoAnswerCallStatus",type="int",units="",minVal="0",maxVal="1",description="Answer calls when bud is placed on head (0 -- don't auto-answer, 1 -- auto-answer is enabled)",get=GetOnHeadControlAutoAnswerCallStatus,set=SetOnHeadControlAutoAnswerCallStatus, enum = []),\
            BitFieldInfo(name="OnHeadControlAutoAwareModeStatus",type="int",units="",minVal="0",maxVal="1",description="Change to aware mode when only one bud is on head (0 -- don't change to aware mode, 1 -- changing to aware mode is enabled)",get=GetOnHeadControlAutoAwareModeStatus,set=SetOnHeadControlAutoAwareModeStatus, enum = []),\
            BitFieldInfo(name="UnusedOnHeadControlStatus",type="int",units="",minVal="0",maxVal="31",description="Unused",get=GetUnusedOnHeadControlStatus,set=SetUnusedOnHeadControlStatus, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.OnHeadDetection.Status", Settings_OnHeadDetection_Status.ID, Settings_OnHeadDetection_Status)
