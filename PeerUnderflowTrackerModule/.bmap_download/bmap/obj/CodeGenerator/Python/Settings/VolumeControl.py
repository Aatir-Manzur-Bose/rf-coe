#    obj/CodeGenerator/Python/Settings/VolumeControl.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/Settings/VolumeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_VolumeControl_Get :
    ID = 4545
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 28), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (28, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_VolumeControl_Get.MSG_OFFSET + Settings_VolumeControl_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_VolumeControl_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_VolumeControl_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_VolumeControl_Get.MSG_OFFSET + Settings_VolumeControl_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_VolumeControl_Get.ID)
            self.hdr.SetDataLength(Settings_VolumeControl_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.VolumeControl.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.VolumeControl.Get", Settings_VolumeControl_Get.ID, Settings_VolumeControl_Get)
#    obj/CodeGenerator/Python/Settings/VolumeControl.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/Settings/VolumeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_VolumeControl_SetGet :
    ID = 4546
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VolumeControls = OrderedDict([("Disabled", 0), ("Button", 1), ("Captouch", 2), ("IMU", 3)])
    ReverseVolumeControls = OrderedDict([(0, "Disabled"), (1, "Button"), (2, "Captouch"), (3, "IMU")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 28), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (28, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_VolumeControl_SetGet.MSG_OFFSET + Settings_VolumeControl_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_VolumeControl_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_VolumeControl_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_VolumeControl_SetGet.MSG_OFFSET + Settings_VolumeControl_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_VolumeControl_SetGet.ID)
            self.hdr.SetDataLength(Settings_VolumeControl_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.VolumeControl.SetGet"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetVolumeControlEnable(self, enumAsInt=0):
        """Set currently active volume control."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_VolumeControl_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Settings_VolumeControl_SetGet.ReverseVolumeControls.get(value, value)
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetVolumeControlEnable(self, value):
        """Set currently active volume control."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_VolumeControl_SetGet.VolumeControls.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_VolumeControl_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="VolumeControlEnable",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Set currently active volume control.",get=GetVolumeControlEnable,set=SetVolumeControlEnable,count=1, bitfieldInfo = [], enum = [VolumeControls, ReverseVolumeControls])\
    ]

Messaging.Register("Settings.VolumeControl.SetGet", Settings_VolumeControl_SetGet.ID, Settings_VolumeControl_SetGet)
#    obj/CodeGenerator/Python/Settings/VolumeControl.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/Settings/VolumeControl.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_VolumeControl_Status :
    ID = 4547
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    VolumeControls = OrderedDict([("Disabled", 0), ("Button", 1), ("Captouch", 2), ("IMU", 3)])
    ReverseVolumeControls = OrderedDict([(0, "Disabled"), (1, "Button"), (2, "Captouch"), (3, "IMU")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 28), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (28, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_VolumeControl_Status.MSG_OFFSET + Settings_VolumeControl_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_VolumeControl_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_VolumeControl_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_VolumeControl_Status.MSG_OFFSET + Settings_VolumeControl_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_VolumeControl_Status.ID)
            self.hdr.SetDataLength(Settings_VolumeControl_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.VolumeControl.Status"
    # Accessors
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetVolumeControlCurrent(self, enumAsInt=0):
        """Which volume control method is currently being used."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_VolumeControl_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Settings_VolumeControl_Status.ReverseVolumeControls.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetVolumeControlSupported(self):
        """Which volume control methods are supported by the product."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_VolumeControl_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeButtonSupported(self):
        """Button volume controls supported (0 == not supported, 1 == supported)"""
        value = (self.GetVolumeControlSupported() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeCaptouchSupported(self):
        """Captouch volume controls supported (0 == not supported, 1 == supported)"""
        value = (self.GetVolumeControlSupported() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetVolumeIMUSupported(self):
        """IMU volume controls supported (0 == not supported, 1 == supported)"""
        value = (self.GetVolumeControlSupported() >> 2) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Reserved for future use"""
        value = (self.GetVolumeControlSupported() >> 3) & 0x1f
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetVolumeControlCurrent(self, value):
        """Which volume control method is currently being used."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_VolumeControl_Status.VolumeControls.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_VolumeControl_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetVolumeControlSupported(self, value):
        """Which volume control methods are supported by the product."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_VolumeControl_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeButtonSupported(self, value):
        """Button volume controls supported (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetVolumeControlSupported((self.GetVolumeControlSupported() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeCaptouchSupported(self, value):
        """Captouch volume controls supported (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetVolumeControlSupported((self.GetVolumeControlSupported() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetVolumeIMUSupported(self, value):
        """IMU volume controls supported (0 == not supported, 1 == supported)"""
        tmp = min(max(value, 0), 1)
        self.SetVolumeControlSupported((self.GetVolumeControlSupported() & ~(0x1 << 2)) | ((tmp & 0x1) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('31')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Reserved for future use"""
        tmp = min(max(value, 0), 31)
        self.SetVolumeControlSupported((self.GetVolumeControlSupported() & ~(0x1f << 3)) | ((tmp & 0x1f) << 3))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="VolumeControlCurrent",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Which volume control method is currently being used.",get=GetVolumeControlCurrent,set=SetVolumeControlCurrent,count=1, bitfieldInfo = [], enum = [VolumeControls, ReverseVolumeControls]),\
        FieldInfo(name="VolumeControlSupported",type="int",units="",minVal="0",maxVal="255",description="Which volume control methods are supported by the product.",get=GetVolumeControlSupported,set=SetVolumeControlSupported,count=1, bitfieldInfo = [\
            BitFieldInfo(name="VolumeButtonSupported",type="int",units="",minVal="0",maxVal="1",description="Button volume controls supported (0 == not supported, 1 == supported)",get=GetVolumeButtonSupported,set=SetVolumeButtonSupported, enum = []),\
            BitFieldInfo(name="VolumeCaptouchSupported",type="int",units="",minVal="0",maxVal="1",description="Captouch volume controls supported (0 == not supported, 1 == supported)",get=GetVolumeCaptouchSupported,set=SetVolumeCaptouchSupported, enum = []),\
            BitFieldInfo(name="VolumeIMUSupported",type="int",units="",minVal="0",maxVal="1",description="IMU volume controls supported (0 == not supported, 1 == supported)",get=GetVolumeIMUSupported,set=SetVolumeIMUSupported, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="31",description="Reserved for future use",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.VolumeControl.Status", Settings_VolumeControl_Status.ID, Settings_VolumeControl_Status)
