#    obj/CodeGenerator/Python/Settings/Alerts.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/Alerts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Alerts_Get :
    ID = 4225
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 8), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (8, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Alerts_Get.MSG_OFFSET + Settings_Alerts_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Alerts_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Alerts_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Alerts_Get.MSG_OFFSET + Settings_Alerts_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Alerts_Get.ID)
            self.hdr.SetDataLength(Settings_Alerts_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Alerts.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.Alerts.Get", Settings_Alerts_Get.ID, Settings_Alerts_Get)
#    obj/CodeGenerator/Python/Settings/Alerts.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/Alerts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Alerts_SetGet :
    ID = 4226
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 8), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (8, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Alerts_SetGet.MSG_OFFSET + Settings_Alerts_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Alerts_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Alerts_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Alerts_SetGet.MSG_OFFSET + Settings_Alerts_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Alerts_SetGet.ID)
            self.hdr.SetDataLength(Settings_Alerts_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Alerts.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAlerts(self):
        """Set/Get alerts."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Alerts_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRingtones(self):
        """Enable ringtones (0 == disable, 1 == enable)"""
        value = (self.GetAlerts() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVibration(self):
        """Enable vibration (0 == disable, 1 == enable)"""
        value = (self.GetAlerts() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetAlerts() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAlerts(self, value):
        """Set/Get alerts."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Alerts_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRingtones(self, value):
        """Enable ringtones (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetAlerts((self.GetAlerts() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVibration(self, value):
        """Enable vibration (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetAlerts((self.GetAlerts() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 63)
        self.SetAlerts((self.GetAlerts() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Alerts",type="int",units="",minVal="0",maxVal="255",description="Set/Get alerts.",get=GetAlerts,set=SetAlerts,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Ringtones",type="int",units="",minVal="0",maxVal="1",description="Enable ringtones (0 == disable, 1 == enable)",get=GetRingtones,set=SetRingtones, enum = []),\
            BitFieldInfo(name="Vibration",type="int",units="",minVal="0",maxVal="1",description="Enable vibration (0 == disable, 1 == enable)",get=GetVibration,set=SetVibration, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="63",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.Alerts.SetGet", Settings_Alerts_SetGet.ID, Settings_Alerts_SetGet)
#    obj/CodeGenerator/Python/Settings/Alerts.py
#    Created 27/07/2023 at 10:11:05 from:
#        Messages = messages/Settings/Alerts.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Alerts_Status :
    ID = 4227
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 8), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (8, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Alerts_Status.MSG_OFFSET + Settings_Alerts_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Alerts_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Alerts_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Alerts_Status.MSG_OFFSET + Settings_Alerts_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Alerts_Status.ID)
            self.hdr.SetDataLength(Settings_Alerts_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Alerts.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAlerts(self):
        """Current Alerts Settings."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Alerts_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetRingtones(self):
        """Enable ringtones (0 == disable, 1 == enable)"""
        value = (self.GetAlerts() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetVibration(self):
        """Enable vibration (0 == disable, 1 == enable)"""
        value = (self.GetAlerts() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetAlerts() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAlertsSupported(self):
        """Bitfield of supported alerts"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Alerts_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAlerts(self, value):
        """Current Alerts Settings."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Alerts_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetRingtones(self, value):
        """Enable ringtones (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetAlerts((self.GetAlerts() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetVibration(self, value):
        """Enable vibration (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetAlerts((self.GetAlerts() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 63)
        self.SetAlerts((self.GetAlerts() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAlertsSupported(self, value):
        """Bitfield of supported alerts"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Alerts_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Alerts",type="int",units="",minVal="0",maxVal="255",description="Current Alerts Settings.",get=GetAlerts,set=SetAlerts,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Ringtones",type="int",units="",minVal="0",maxVal="1",description="Enable ringtones (0 == disable, 1 == enable)",get=GetRingtones,set=SetRingtones, enum = []),\
            BitFieldInfo(name="Vibration",type="int",units="",minVal="0",maxVal="1",description="Enable vibration (0 == disable, 1 == enable)",get=GetVibration,set=SetVibration, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="63",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="AlertsSupported",type="int",units="",minVal="0",maxVal="255",description="Bitfield of supported alerts",get=GetAlertsSupported,set=SetAlertsSupported,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.Alerts.Status", Settings_Alerts_Status.ID, Settings_Alerts_Status)
