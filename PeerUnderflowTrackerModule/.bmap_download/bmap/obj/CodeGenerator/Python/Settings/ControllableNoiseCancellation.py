#    obj/CodeGenerator/Python/Settings/ControllableNoiseCancellation.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/ControllableNoiseCancellation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ControllableNoiseCancellation_Get :
    ID = 4177
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 5), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (5, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_Get.MSG_OFFSET + Settings_ControllableNoiseCancellation_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ControllableNoiseCancellation_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ControllableNoiseCancellation_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_Get.MSG_OFFSET + Settings_ControllableNoiseCancellation_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ControllableNoiseCancellation_Get.ID)
            self.hdr.SetDataLength(Settings_ControllableNoiseCancellation_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ControllableNoiseCancellation.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.ControllableNoiseCancellation.Get", Settings_ControllableNoiseCancellation_Get.ID, Settings_ControllableNoiseCancellation_Get)
#    obj/CodeGenerator/Python/Settings/ControllableNoiseCancellation.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/ControllableNoiseCancellation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ControllableNoiseCancellation_SetGet :
    ID = 4178
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 5), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (5, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + Settings_ControllableNoiseCancellation_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ControllableNoiseCancellation_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ControllableNoiseCancellation_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + Settings_ControllableNoiseCancellation_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ControllableNoiseCancellation_SetGet.ID)
            self.hdr.SetDataLength(Settings_ControllableNoiseCancellation_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ControllableNoiseCancellation.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCNCStep(self):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCNCState(self):
        """Current CNC state, indicating whether to enable or disable CNC (0 == disable, 1 == enable)"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetState(self):
        """Enable/Disable Noise Cancellation (0 == disable, 1 == enable)"""
        value = (self.GetCNCState() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetCNCState() >> 1) & 0x7f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCNCStep(self, value):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCNCState(self, value):
        """Current CNC state, indicating whether to enable or disable CNC (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetState(self, value):
        """Enable/Disable Noise Cancellation (0 == disable, 1 == enable)"""
        tmp = min(max(value, 0), 1)
        self.SetCNCState((self.GetCNCState() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('1')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetCNCState((self.GetCNCState() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CNCStep",type="int",units="",minVal="0",maxVal="255",description="The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps",get=GetCNCStep,set=SetCNCStep,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CNCState",type="int",units="",minVal="0",maxVal="255",description="Current CNC state, indicating whether to enable or disable CNC (0 == disable, 1 == enable)",get=GetCNCState,set=SetCNCState,count=1, bitfieldInfo = [\
            BitFieldInfo(name="State",type="int",units="",minVal="0",maxVal="1",description="Enable/Disable Noise Cancellation (0 == disable, 1 == enable)",get=GetState,set=SetState, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.ControllableNoiseCancellation.SetGet", Settings_ControllableNoiseCancellation_SetGet.ID, Settings_ControllableNoiseCancellation_SetGet)
#    obj/CodeGenerator/Python/Settings/ControllableNoiseCancellation.py
#    Created 27/07/2023 at 10:11:06 from:
#        Messages = messages/Settings/ControllableNoiseCancellation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_ControllableNoiseCancellation_Status :
    ID = 4179
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 5), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (5, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + Settings_ControllableNoiseCancellation_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_ControllableNoiseCancellation_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_ControllableNoiseCancellation_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + Settings_ControllableNoiseCancellation_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_ControllableNoiseCancellation_Status.ID)
            self.hdr.SetDataLength(Settings_ControllableNoiseCancellation_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.ControllableNoiseCancellation.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetCNCStep(self):
        """The number of supported Controllable Noise Cancellation steps (N)"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCNCStepSelection(self):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetCNCState(self):
        """Current CNC state, indicating whether it is enabled or disabled (0 == disabled, 1 == enabled)"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetState(self):
        """Noise Cancellation Enabled/Disabled (0 == disabled, 1 == enabled)"""
        value = (self.GetCNCState() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUserEnableOrDisable(self):
        """User can enable/disable (1 == user CANNOT enable/disable, 0 == user can enable/disable. read-only.)"""
        value = (self.GetCNCState() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetCNCState() >> 2) & 0x3f
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetCNCStep(self, value):
        """The number of supported Controllable Noise Cancellation steps (N)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCNCStepSelection(self, value):
        """The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetCNCState(self, value):
        """Current CNC state, indicating whether it is enabled or disabled (0 == disabled, 1 == enabled)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_ControllableNoiseCancellation_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetState(self, value):
        """Noise Cancellation Enabled/Disabled (0 == disabled, 1 == enabled)"""
        tmp = min(max(value, 0), 1)
        self.SetCNCState((self.GetCNCState() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUserEnableOrDisable(self, value):
        """User can enable/disable (1 == user CANNOT enable/disable, 0 == user can enable/disable. read-only.)"""
        tmp = min(max(value, 0), 1)
        self.SetCNCState((self.GetCNCState() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('2')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 63)
        self.SetCNCState((self.GetCNCState() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    

    # Reflection information
    fields = [ \
        FieldInfo(name="CNCStep",type="int",units="",minVal="0",maxVal="255",description="The number of supported Controllable Noise Cancellation steps (N)",get=GetCNCStep,set=SetCNCStep,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CNCStepSelection",type="int",units="",minVal="0",maxVal="255",description="The Controllable Noise Cancellation level, 0 -- (N-1), where N is the number of supported CNC steps",get=GetCNCStepSelection,set=SetCNCStepSelection,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CNCState",type="int",units="",minVal="0",maxVal="255",description="Current CNC state, indicating whether it is enabled or disabled (0 == disabled, 1 == enabled)",get=GetCNCState,set=SetCNCState,count=1, bitfieldInfo = [\
            BitFieldInfo(name="State",type="int",units="",minVal="0",maxVal="1",description="Noise Cancellation Enabled/Disabled (0 == disabled, 1 == enabled)",get=GetState,set=SetState, enum = []),\
            BitFieldInfo(name="UserEnableOrDisable",type="int",units="",minVal="0",maxVal="1",description="User can enable/disable (1 == user CANNOT enable/disable, 0 == user can enable/disable. read-only.)",get=GetUserEnableOrDisable,set=SetUserEnableOrDisable, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="63",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = [])\
    ]

Messaging.Register("Settings.ControllableNoiseCancellation.Status", Settings_ControllableNoiseCancellation_Status.ID, Settings_ControllableNoiseCancellation_Status)
