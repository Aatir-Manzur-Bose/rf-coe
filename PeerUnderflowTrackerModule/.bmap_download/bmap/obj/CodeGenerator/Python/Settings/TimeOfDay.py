#    obj/CodeGenerator/Python/Settings/TimeOfDay.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TimeOfDay.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TimeOfDay_Get :
    ID = 4593
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 31), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (31, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TimeOfDay_Get.MSG_OFFSET + Settings_TimeOfDay_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TimeOfDay_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TimeOfDay_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TimeOfDay_Get.MSG_OFFSET + Settings_TimeOfDay_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TimeOfDay_Get.ID)
            self.hdr.SetDataLength(Settings_TimeOfDay_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TimeOfDay.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.TimeOfDay.Get", Settings_TimeOfDay_Get.ID, Settings_TimeOfDay_Get)
#    obj/CodeGenerator/Python/Settings/TimeOfDay.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TimeOfDay.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TimeOfDay_SetGet :
    ID = 4594
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 31), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (31, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TimeOfDay_SetGet.MSG_OFFSET + Settings_TimeOfDay_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TimeOfDay_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TimeOfDay_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TimeOfDay_SetGet.MSG_OFFSET + Settings_TimeOfDay_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TimeOfDay_SetGet.ID)
            self.hdr.SetDataLength(Settings_TimeOfDay_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TimeOfDay.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTimeOfDay(self):
        """Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time"""
        value = struct.unpack_from('>L', self.rawBuffer(), Settings_TimeOfDay_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTimeOfDay(self, value):
        """Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Settings_TimeOfDay_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TimeOfDay",type="int",units="",minVal="0",maxVal="4294967295",description="Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time",get=GetTimeOfDay,set=SetTimeOfDay,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.TimeOfDay.SetGet", Settings_TimeOfDay_SetGet.ID, Settings_TimeOfDay_SetGet)
#    obj/CodeGenerator/Python/Settings/TimeOfDay.py
#    Created 27/07/2023 at 10:11:09 from:
#        Messages = messages/Settings/TimeOfDay.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_TimeOfDay_Status :
    ID = 4595
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 31), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (31, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_TimeOfDay_Status.MSG_OFFSET + Settings_TimeOfDay_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_TimeOfDay_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_TimeOfDay_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_TimeOfDay_Status.MSG_OFFSET + Settings_TimeOfDay_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_TimeOfDay_Status.ID)
            self.hdr.SetDataLength(Settings_TimeOfDay_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.TimeOfDay.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTimeOfDay(self):
        """The current Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time"""
        value = struct.unpack_from('>L', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetDay(self):
        """The day of the week (0-6) where 0 is Sunday, in Local time"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetHour(self):
        """The hour in the day (0-23), in Local time"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetMinute(self):
        """The minute (0-59), in Local time"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTimeOfDay(self, value):
        """The current Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetDay(self, value):
        """The day of the week (0-6) where 0 is Sunday, in Local time"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetHour(self, value):
        """The hour in the day (0-23), in Local time"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetMinute(self, value):
        """The minute (0-59), in Local time"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_TimeOfDay_Status.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TimeOfDay",type="int",units="",minVal="0",maxVal="4294967295",description="The current Time Of Day, the number of minutes since the epoch point of 00:00 1/1/2023 (a Sunday), in Local time",get=GetTimeOfDay,set=SetTimeOfDay,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Day",type="int",units="",minVal="0",maxVal="255",description="The day of the week (0-6) where 0 is Sunday, in Local time",get=GetDay,set=SetDay,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Hour",type="int",units="",minVal="0",maxVal="255",description="The hour in the day (0-23), in Local time",get=GetHour,set=SetHour,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Minute",type="int",units="",minVal="0",maxVal="255",description="The minute (0-59), in Local time",get=GetMinute,set=SetMinute,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.TimeOfDay.Status", Settings_TimeOfDay_Status.ID, Settings_TimeOfDay_Status)
