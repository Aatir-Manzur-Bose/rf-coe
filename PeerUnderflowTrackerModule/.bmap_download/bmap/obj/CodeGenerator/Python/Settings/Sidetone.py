#    obj/CodeGenerator/Python/Settings/Sidetone.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Sidetone.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Sidetone_Get :
    ID = 4273
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Sidetone_Get.MSG_OFFSET + Settings_Sidetone_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Sidetone_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Sidetone_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Sidetone_Get.MSG_OFFSET + Settings_Sidetone_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Sidetone_Get.ID)
            self.hdr.SetDataLength(Settings_Sidetone_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Sidetone.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Settings.Sidetone.Get", Settings_Sidetone_Get.ID, Settings_Sidetone_Get)
#    obj/CodeGenerator/Python/Settings/Sidetone.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Sidetone.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Sidetone_SetGet :
    ID = 4274
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SidetoneModes = OrderedDict([("Off", 0), ("High", 1), ("Medium", 2), ("Low", 3)])
    ReverseSidetoneModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Medium"), (3, "Low")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 11), ("Operator", 2)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (11, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Sidetone_SetGet.MSG_OFFSET + Settings_Sidetone_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Sidetone_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Sidetone_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Sidetone_SetGet.MSG_OFFSET + Settings_Sidetone_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Sidetone_SetGet.ID)
            self.hdr.SetDataLength(Settings_Sidetone_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Sidetone.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPersistSidetone(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Sidetone_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPersist(self):
        """Persist the sidetone across power cycles (0 == do not persist, 1 == persist)"""
        value = (self.GetPersistSidetone() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetPersistSidetone() >> 1) & 0x7f
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSidetoneMode(self, enumAsInt=0):
        """Change Sidetone Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Sidetone_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Settings_Sidetone_SetGet.ReverseSidetoneModes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPersistSidetone(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Sidetone_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPersist(self, value):
        """Persist the sidetone across power cycles (0 == do not persist, 1 == persist)"""
        tmp = min(max(value, 0), 1)
        self.SetPersistSidetone((self.GetPersistSidetone() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetPersistSidetone((self.GetPersistSidetone() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSidetoneMode(self, value):
        """Change Sidetone Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_Sidetone_SetGet.SidetoneModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Sidetone_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PersistSidetone",type="int",units="",minVal="0",maxVal="255",description="",get=GetPersistSidetone,set=SetPersistSidetone,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Persist",type="int",units="",minVal="0",maxVal="1",description="Persist the sidetone across power cycles (0 == do not persist, 1 == persist)",get=GetPersist,set=SetPersist, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="CurrentSidetoneMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Change Sidetone Mode.",get=GetCurrentSidetoneMode,set=SetCurrentSidetoneMode,count=1, bitfieldInfo = [], enum = [SidetoneModes, ReverseSidetoneModes])\
    ]

Messaging.Register("Settings.Sidetone.SetGet", Settings_Sidetone_SetGet.ID, Settings_Sidetone_SetGet)
#    obj/CodeGenerator/Python/Settings/Sidetone.py
#    Created 27/07/2023 at 10:11:08 from:
#        Messages = messages/Settings/Sidetone.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Settings_Sidetone_Status :
    ID = 4275
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SidetoneModes = OrderedDict([("Off", 0), ("High", 1), ("Medium", 2), ("Low", 3)])
    ReverseSidetoneModes = OrderedDict([(0, "Off"), (1, "High"), (2, "Medium"), (3, "Low")])
    IDs = OrderedDict([("FunctionBlock", 1), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(1, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Settings_Sidetone_Status.MSG_OFFSET + Settings_Sidetone_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Settings_Sidetone_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Settings_Sidetone_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Settings_Sidetone_Status.MSG_OFFSET + Settings_Sidetone_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Settings_Sidetone_Status.ID)
            self.hdr.SetDataLength(Settings_Sidetone_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Settings.Sidetone.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPersistSidetone(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetPersist(self):
        """Whether current sidetone mode will persist across power cycles (0 == not persist, 1 == persist)"""
        value = (self.GetPersistSidetone() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def GetUnused(self):
        """Unused"""
        value = (self.GetPersistSidetone() >> 1) & 0x7f
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetCurrentSidetoneMode(self, enumAsInt=0):
        """Current Sidetone Mode."""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = Settings_Sidetone_Status.ReverseSidetoneModes.get(value, value)
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetAvailableSidetoneModes(self):
        """Bitfield of available Sidetone Modes"""
        value = struct.unpack_from('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPersistSidetone(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetPersist(self, value):
        """Whether current sidetone mode will persist across power cycles (0 == not persist, 1 == persist)"""
        tmp = min(max(value, 0), 1)
        self.SetPersistSidetone((self.GetPersistSidetone() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('127')
    @msg.offset('0')
    @msg.size('0')
    @msg.count(1)
    def SetUnused(self, value):
        """Unused"""
        tmp = min(max(value, 0), 127)
        self.SetPersistSidetone((self.GetPersistSidetone() & ~(0x7f << 1)) | ((tmp & 0x7f) << 1))
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetCurrentSidetoneMode(self, value):
        """Current Sidetone Mode."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Settings_Sidetone_Status.SidetoneModes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetAvailableSidetoneModes(self, value):
        """Bitfield of available Sidetone Modes"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Settings_Sidetone_Status.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PersistSidetone",type="int",units="",minVal="0",maxVal="255",description="",get=GetPersistSidetone,set=SetPersistSidetone,count=1, bitfieldInfo = [\
            BitFieldInfo(name="Persist",type="int",units="",minVal="0",maxVal="1",description="Whether current sidetone mode will persist across power cycles (0 == not persist, 1 == persist)",get=GetPersist,set=SetPersist, enum = []),\
            BitFieldInfo(name="Unused",type="int",units="",minVal="0",maxVal="127",description="Unused",get=GetUnused,set=SetUnused, enum = [])], enum = []),\
        FieldInfo(name="CurrentSidetoneMode",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Current Sidetone Mode.",get=GetCurrentSidetoneMode,set=SetCurrentSidetoneMode,count=1, bitfieldInfo = [], enum = [SidetoneModes, ReverseSidetoneModes]),\
        FieldInfo(name="AvailableSidetoneModes",type="int",units="Bitfield",minVal="0",maxVal="255",description="Bitfield of available Sidetone Modes",get=GetAvailableSidetoneModes,set=SetAvailableSidetoneModes,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Settings.Sidetone.Status", Settings_Sidetone_Status.ID, Settings_Sidetone_Status)
