#    obj/CodeGenerator/Python/SensorInterface/SensorValues.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorValues.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorValues_Get :
    ID = 98385
    SIZE = 3
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 5), ("Operator", 1)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (5, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Get.MSG_OFFSET + SensorInterface_SensorValues_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorValues_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorValues_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Get.MSG_OFFSET + SensorInterface_SensorValues_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorValues_Get.ID)
            self.hdr.SetDataLength(SensorInterface_SensorValues_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorValues.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Get.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location right or left."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Get.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor id in case of multiples, generally 0."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Get.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location right or left."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Get.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor id in case of multiples, generally 0."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Get.MSG_OFFSET + 2, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type.",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location right or left.",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor id in case of multiples, generally 0.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorValues.Get", SensorInterface_SensorValues_Get.ID, SensorInterface_SensorValues_Get)
#    obj/CodeGenerator/Python/SensorInterface/SensorValues.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorValues.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorValues_Status :
    ID = 98387
    SIZE = 22
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorValuesEnum = OrderedDict([("Acc_X-Y-Z", 0), ("Gyr_X-Y-Z", 1), ("Mag_X-Y-Z", 2), ("Proximity", 3), ("Touch-Pos", 4), ("Unused", 5), ("Unused2", 6), ("uMag_X-Y-Z-X-Y-Z", 7), ("Rot_X-Y-Z-W", 8), ("GRot_X-Y-Z-W", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc_X-Y-Z", 32)])
    ReverseSensorValuesEnum = OrderedDict([(0, "Acc_X-Y-Z"), (1, "Gyr_X-Y-Z"), (2, "Mag_X-Y-Z"), (3, "Proximity"), (4, "Touch-Pos"), (5, "Unused"), (6, "Unused2"), (7, "uMag_X-Y-Z-X-Y-Z"), (8, "Rot_X-Y-Z-W"), (9, "GRot_X-Y-Z-W"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc_X-Y-Z")])
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 5), ("Operator", 3)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (5, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Status.MSG_OFFSET + SensorInterface_SensorValues_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorValues_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorValues_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Status.MSG_OFFSET + SensorInterface_SensorValues_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorValues_Status.ID)
            self.hdr.SetDataLength(SensorInterface_SensorValues_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorValues.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Status.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Status.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor id in case of multiples, generally 0."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetRetType(self, enumAsInt=0):
        """Sensor raw values type label"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Status.ReverseSensorValuesEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetTimeStamp(self):
        """TimeStamp from when the value was aquired in milliseconds; allowed to rollover."""
        value = struct.unpack_from('>H', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetV1(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetV2(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetV3(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetV4(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetV5(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetV6(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetV7(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def GetV8(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Status.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Status.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor id in case of multiples, generally 0."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetRetType(self, value):
        """Sensor raw values type label"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Status.SensorValuesEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetTimeStamp(self, value):
        """TimeStamp from when the value was aquired in milliseconds; allowed to rollover."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetV1(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetV2(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetV3(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetV4(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetV5(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetV6(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetV7(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def SetV8(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Status.MSG_OFFSET + 20, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type.",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor id in case of multiples, generally 0.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RetType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor raw values type label",get=GetRetType,set=SetRetType,count=1, bitfieldInfo = [], enum = [SensorValuesEnum, ReverseSensorValuesEnum]),\
        FieldInfo(name="TimeStamp",type="int",units="",minVal="0",maxVal="65535",description="TimeStamp from when the value was aquired in milliseconds; allowed to rollover.",get=GetTimeStamp,set=SetTimeStamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V1",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV1,set=SetV1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V2",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV2,set=SetV2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V3",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV3,set=SetV3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V4",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV4,set=SetV4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V5",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV5,set=SetV5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V6",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV6,set=SetV6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V7",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV7,set=SetV7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V8",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV8,set=SetV8,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorValues.Status", SensorInterface_SensorValues_Status.ID, SensorInterface_SensorValues_Status)
#    obj/CodeGenerator/Python/SensorInterface/SensorValues.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorValues.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorValues_Result :
    ID = 98390
    SIZE = 22
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorValuesEnum = OrderedDict([("Acc_X-Y-Z", 0), ("Gyr_X-Y-Z", 1), ("Mag_X-Y-Z", 2), ("Proximity", 3), ("Touch-Pos", 4), ("Unused", 5), ("Unused2", 6), ("uMag_X-Y-Z-X-Y-Z", 7), ("Rot_X-Y-Z-W", 8), ("GRot_X-Y-Z-W", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc_X-Y-Z", 32)])
    ReverseSensorValuesEnum = OrderedDict([(0, "Acc_X-Y-Z"), (1, "Gyr_X-Y-Z"), (2, "Mag_X-Y-Z"), (3, "Proximity"), (4, "Touch-Pos"), (5, "Unused"), (6, "Unused2"), (7, "uMag_X-Y-Z-X-Y-Z"), (8, "Rot_X-Y-Z-W"), (9, "GRot_X-Y-Z-W"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc_X-Y-Z")])
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 5), ("Operator", 6)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (5, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Result.MSG_OFFSET + SensorInterface_SensorValues_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorValues_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorValues_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Result.MSG_OFFSET + SensorInterface_SensorValues_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorValues_Result.ID)
            self.hdr.SetDataLength(SensorInterface_SensorValues_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorValues.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Result.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Result.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor id in case of multiples, generally 0."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetRetType(self, enumAsInt=0):
        """Sensor raw values type label"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Result.ReverseSensorValuesEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetTimeStamp(self):
        """TimeStamp from when the value was aquired in milliseconds; allowed to rollover."""
        value = struct.unpack_from('>H', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetV1(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetV2(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetV3(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetV4(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetV5(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetV6(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetV7(self):
        """Raw value returned"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def GetV8(self):
        """Raw value returned."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Result.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Result.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor id in case of multiples, generally 0."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetRetType(self, value):
        """Sensor raw values type label"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Result.SensorValuesEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetTimeStamp(self, value):
        """TimeStamp from when the value was aquired in milliseconds; allowed to rollover."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetV1(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetV2(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetV3(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetV4(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetV5(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetV6(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetV7(self, value):
        """Raw value returned"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def SetV8(self, value):
        """Raw value returned."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SensorValues_Result.MSG_OFFSET + 20, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type.",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor id in case of multiples, generally 0.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RetType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor raw values type label",get=GetRetType,set=SetRetType,count=1, bitfieldInfo = [], enum = [SensorValuesEnum, ReverseSensorValuesEnum]),\
        FieldInfo(name="TimeStamp",type="int",units="",minVal="0",maxVal="65535",description="TimeStamp from when the value was aquired in milliseconds; allowed to rollover.",get=GetTimeStamp,set=SetTimeStamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V1",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV1,set=SetV1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V2",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV2,set=SetV2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V3",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV3,set=SetV3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V4",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV4,set=SetV4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V5",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV5,set=SetV5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V6",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV6,set=SetV6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V7",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned",get=GetV7,set=SetV7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="V8",type="int",units="",minVal="-32768",maxVal="32767",description="Raw value returned.",get=GetV8,set=SetV8,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorValues.Result", SensorInterface_SensorValues_Result.ID, SensorInterface_SensorValues_Result)
#    obj/CodeGenerator/Python/SensorInterface/SensorValues.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorValues.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorValues_Error :
    ID = 98388
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 5), ("Operator", 4)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (5, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Error.MSG_OFFSET + SensorInterface_SensorValues_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorValues_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorValues_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorValues_Error.MSG_OFFSET + SensorInterface_SensorValues_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorValues_Error.ID)
            self.hdr.SetDataLength(SensorInterface_SensorValues_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorValues.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorValues_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorValues_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorValues_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorValues_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("SensorInterface.SensorValues.Error", SensorInterface_SensorValues_Error.ID, SensorInterface_SensorValues_Error)
