#    obj/CodeGenerator/Python/SensorInterface/SensorParams.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorParams_Get :
    ID = 98401
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorParamsEnum = OrderedDict([("CapFlickDelta", 0), ("CapTapTime", 1), ("CapLongPressTimeBegin", 2), ("CapVLongPressTimeBegin", 3), ("CapVLongPressTimeEnd", 4), ("CapLongestPressTime", 5), ("IrNearToFar", 6), ("IrFarToNear", 7), ("IrScanTime", 8), ("IrSamplingRate", 9), ("IrCurrent", 10), ("IrPulseCount", 11), ("IrIntPersist", 12), ("IrPsOffset", 13), ("IrInOutTiming", 14), ("IrModeInterruptOrContinuous", 15), ("AccRange", 16), ("AccRate", 17), ("GyrRange", 18), ("GyrRate", 19), ("MagRange", 20), ("MagRate", 21), ("EarMotionTime", 22), ("EarProxTime", 23), ("EarOutCheckTime", 24), ("EarOutCount", 25), ("EarMotionAccLo", 26), ("EarMotionAccHi", 27), ("ImuAccXOffset", 28), ("ImuAccYOffset", 29), ("ImuAccZOffset", 30), ("ImuGyroXOffset", 31), ("ImuGyroYOffset", 32), ("ImuGyroZOffset", 33), ("ImuOffsetEnaReg", 34), ("EarConfigSettings", 35), ("AccDoubleTapTime", 36), ("AccDoubleTapThreshold", 37), ("AccMotionThreshold", 38), ("AccMotionInactivityTimeout", 39), ("AccXOffset", 40), ("AccYOffset", 41), ("AccZOffset", 42), ("MaxGestureGapInSequenceInMs", 43), ("CapLocRegion1Hi", 44), ("CapLocRegion2Hi", 45), ("CapLocRegion1SwipeDownDelta", 46), ("CapLocRegion3SwipeDownDelta", 47), ("CapLocSwipeUpDelta", 48), ("CapOneTouchSwipeInMs", 49), ("CapMultiTouchWaitInMs", 50), ("CapMultiTouchGestureInMs", 51), ("CapLocRegion1IgnoreDownDelta", 52), ("BaselineUpdatePeriodInMs", 53), ("CapMinTapTimeInMs", 54), ("None", 255)])
    ReverseSensorParamsEnum = OrderedDict([(0, "CapFlickDelta"), (1, "CapTapTime"), (2, "CapLongPressTimeBegin"), (3, "CapVLongPressTimeBegin"), (4, "CapVLongPressTimeEnd"), (5, "CapLongestPressTime"), (6, "IrNearToFar"), (7, "IrFarToNear"), (8, "IrScanTime"), (9, "IrSamplingRate"), (10, "IrCurrent"), (11, "IrPulseCount"), (12, "IrIntPersist"), (13, "IrPsOffset"), (14, "IrInOutTiming"), (15, "IrModeInterruptOrContinuous"), (16, "AccRange"), (17, "AccRate"), (18, "GyrRange"), (19, "GyrRate"), (20, "MagRange"), (21, "MagRate"), (22, "EarMotionTime"), (23, "EarProxTime"), (24, "EarOutCheckTime"), (25, "EarOutCount"), (26, "EarMotionAccLo"), (27, "EarMotionAccHi"), (28, "ImuAccXOffset"), (29, "ImuAccYOffset"), (30, "ImuAccZOffset"), (31, "ImuGyroXOffset"), (32, "ImuGyroYOffset"), (33, "ImuGyroZOffset"), (34, "ImuOffsetEnaReg"), (35, "EarConfigSettings"), (36, "AccDoubleTapTime"), (37, "AccDoubleTapThreshold"), (38, "AccMotionThreshold"), (39, "AccMotionInactivityTimeout"), (40, "AccXOffset"), (41, "AccYOffset"), (42, "AccZOffset"), (43, "MaxGestureGapInSequenceInMs"), (44, "CapLocRegion1Hi"), (45, "CapLocRegion2Hi"), (46, "CapLocRegion1SwipeDownDelta"), (47, "CapLocRegion3SwipeDownDelta"), (48, "CapLocSwipeUpDelta"), (49, "CapOneTouchSwipeInMs"), (50, "CapMultiTouchWaitInMs"), (51, "CapMultiTouchGestureInMs"), (52, "CapLocRegion1IgnoreDownDelta"), (53, "BaselineUpdatePeriodInMs"), (54, "CapMinTapTimeInMs"), (255, "None")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 6), ("Operator", 1)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (6, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Get.MSG_OFFSET + SensorInterface_SensorParams_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorParams_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorParams_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Get.MSG_OFFSET + SensorInterface_SensorParams_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorParams_Get.ID)
            self.hdr.SetDataLength(SensorInterface_SensorParams_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorParams.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Get.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Get.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor Id"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSensorParam(self, enumAsInt=0):
        """Sensor-Param that you want to get value of."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Get.ReverseSensorParamsEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Get.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Get.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor Id"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSensorParam(self, value):
        """Sensor-Param that you want to get value of."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Get.SensorParamsEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Get.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor Id",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorParam",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor-Param that you want to get value of.",get=GetSensorParam,set=SetSensorParam,count=1, bitfieldInfo = [], enum = [SensorParamsEnum, ReverseSensorParamsEnum])\
    ]

Messaging.Register("SensorInterface.SensorParams.Get", SensorInterface_SensorParams_Get.ID, SensorInterface_SensorParams_Get)
#    obj/CodeGenerator/Python/SensorInterface/SensorParams.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorParams_SetGet :
    ID = 98402
    SIZE = 7
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorParamsEnum = OrderedDict([("CapFlickDelta", 0), ("CapTapTime", 1), ("CapLongPressTimeBegin", 2), ("CapVLongPressTimeBegin", 3), ("CapVLongPressTimeEnd", 4), ("CapLongestPressTime", 5), ("IrNearToFar", 6), ("IrFarToNear", 7), ("IrScanTime", 8), ("IrSamplingRate", 9), ("IrCurrent", 10), ("IrPulseCount", 11), ("IrIntPersist", 12), ("IrPsOffset", 13), ("IrInOutTiming", 14), ("IrModeInterruptOrContinuous", 15), ("AccRange", 16), ("AccRate", 17), ("GyrRange", 18), ("GyrRate", 19), ("MagRange", 20), ("MagRate", 21), ("EarMotionTime", 22), ("EarProxTime", 23), ("EarOutCheckTime", 24), ("EarOutCount", 25), ("EarMotionAccLo", 26), ("EarMotionAccHi", 27), ("ImuAccXOffset", 28), ("ImuAccYOffset", 29), ("ImuAccZOffset", 30), ("ImuGyroXOffset", 31), ("ImuGyroYOffset", 32), ("ImuGyroZOffset", 33), ("ImuOffsetEnaReg", 34), ("EarConfigSettings", 35), ("AccDoubleTapTime", 36), ("AccDoubleTapThreshold", 37), ("AccMotionThreshold", 38), ("AccMotionInactivityTimeout", 39), ("AccXOffset", 40), ("AccYOffset", 41), ("AccZOffset", 42), ("MaxGestureGapInSequenceInMs", 43), ("CapLocRegion1Hi", 44), ("CapLocRegion2Hi", 45), ("CapLocRegion1SwipeDownDelta", 46), ("CapLocRegion3SwipeDownDelta", 47), ("CapLocSwipeUpDelta", 48), ("CapOneTouchSwipeInMs", 49), ("CapMultiTouchWaitInMs", 50), ("CapMultiTouchGestureInMs", 51), ("CapLocRegion1IgnoreDownDelta", 52), ("BaselineUpdatePeriodInMs", 53), ("CapMinTapTimeInMs", 54), ("None", 255)])
    ReverseSensorParamsEnum = OrderedDict([(0, "CapFlickDelta"), (1, "CapTapTime"), (2, "CapLongPressTimeBegin"), (3, "CapVLongPressTimeBegin"), (4, "CapVLongPressTimeEnd"), (5, "CapLongestPressTime"), (6, "IrNearToFar"), (7, "IrFarToNear"), (8, "IrScanTime"), (9, "IrSamplingRate"), (10, "IrCurrent"), (11, "IrPulseCount"), (12, "IrIntPersist"), (13, "IrPsOffset"), (14, "IrInOutTiming"), (15, "IrModeInterruptOrContinuous"), (16, "AccRange"), (17, "AccRate"), (18, "GyrRange"), (19, "GyrRate"), (20, "MagRange"), (21, "MagRate"), (22, "EarMotionTime"), (23, "EarProxTime"), (24, "EarOutCheckTime"), (25, "EarOutCount"), (26, "EarMotionAccLo"), (27, "EarMotionAccHi"), (28, "ImuAccXOffset"), (29, "ImuAccYOffset"), (30, "ImuAccZOffset"), (31, "ImuGyroXOffset"), (32, "ImuGyroYOffset"), (33, "ImuGyroZOffset"), (34, "ImuOffsetEnaReg"), (35, "EarConfigSettings"), (36, "AccDoubleTapTime"), (37, "AccDoubleTapThreshold"), (38, "AccMotionThreshold"), (39, "AccMotionInactivityTimeout"), (40, "AccXOffset"), (41, "AccYOffset"), (42, "AccZOffset"), (43, "MaxGestureGapInSequenceInMs"), (44, "CapLocRegion1Hi"), (45, "CapLocRegion2Hi"), (46, "CapLocRegion1SwipeDownDelta"), (47, "CapLocRegion3SwipeDownDelta"), (48, "CapLocSwipeUpDelta"), (49, "CapOneTouchSwipeInMs"), (50, "CapMultiTouchWaitInMs"), (51, "CapMultiTouchGestureInMs"), (52, "CapLocRegion1IgnoreDownDelta"), (53, "BaselineUpdatePeriodInMs"), (54, "CapMinTapTimeInMs"), (255, "None")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 6), ("Operator", 2)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (6, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorParams_SetGet.MSG_OFFSET + SensorInterface_SensorParams_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorParams_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorParams_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorParams_SetGet.MSG_OFFSET + SensorInterface_SensorParams_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorParams_SetGet.ID)
            self.hdr.SetDataLength(SensorInterface_SensorParams_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorParams.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_SetGet.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_SetGet.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor Id"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSensorParam(self, enumAsInt=0):
        """Sensor-Param that you want to set value of. Use param=None to select by SensorType and id."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_SetGet.ReverseSensorParamsEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetSensorParamValue(self):
        """Sensor param value that you want to set. Use Value=0xFFFF(65535) to set sensorType to default values (also needs sensorParam=None)."""
        value = struct.unpack_from('>H', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetPersist(self):
        """0 = Do not Persist, 1 = Persist Param Value."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_SetGet.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_SetGet.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor Id"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSensorParam(self, value):
        """Sensor-Param that you want to set value of. Use param=None to select by SensorType and id."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_SetGet.SensorParamsEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetSensorParamValue(self, value):
        """Sensor param value that you want to set. Use Value=0xFFFF(65535) to set sensorType to default values (also needs sensorParam=None)."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetPersist(self, value):
        """0 = Do not Persist, 1 = Persist Param Value."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_SetGet.MSG_OFFSET + 6, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor Id",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorParam",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor-Param that you want to set value of. Use param=None to select by SensorType and id.",get=GetSensorParam,set=SetSensorParam,count=1, bitfieldInfo = [], enum = [SensorParamsEnum, ReverseSensorParamsEnum]),\
        FieldInfo(name="SensorParamValue",type="int",units="",minVal="0",maxVal="65535",description="Sensor param value that you want to set. Use Value=0xFFFF(65535) to set sensorType to default values (also needs sensorParam=None).",get=GetSensorParamValue,set=SetSensorParamValue,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Persist",type="int",units="",minVal="0",maxVal="255",description="0 = Do not Persist, 1 = Persist Param Value.",get=GetPersist,set=SetPersist,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorParams.SetGet", SensorInterface_SensorParams_SetGet.ID, SensorInterface_SensorParams_SetGet)
#    obj/CodeGenerator/Python/SensorInterface/SensorParams.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorParams_Status :
    ID = 98403
    SIZE = 6
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorParamsEnum = OrderedDict([("CapFlickDelta", 0), ("CapTapTime", 1), ("CapLongPressTimeBegin", 2), ("CapVLongPressTimeBegin", 3), ("CapVLongPressTimeEnd", 4), ("CapLongestPressTime", 5), ("IrNearToFar", 6), ("IrFarToNear", 7), ("IrScanTime", 8), ("IrSamplingRate", 9), ("IrCurrent", 10), ("IrPulseCount", 11), ("IrIntPersist", 12), ("IrPsOffset", 13), ("IrInOutTiming", 14), ("IrModeInterruptOrContinuous", 15), ("AccRange", 16), ("AccRate", 17), ("GyrRange", 18), ("GyrRate", 19), ("MagRange", 20), ("MagRate", 21), ("EarMotionTime", 22), ("EarProxTime", 23), ("EarOutCheckTime", 24), ("EarOutCount", 25), ("EarMotionAccLo", 26), ("EarMotionAccHi", 27), ("ImuAccXOffset", 28), ("ImuAccYOffset", 29), ("ImuAccZOffset", 30), ("ImuGyroXOffset", 31), ("ImuGyroYOffset", 32), ("ImuGyroZOffset", 33), ("ImuOffsetEnaReg", 34), ("EarConfigSettings", 35), ("AccDoubleTapTime", 36), ("AccDoubleTapThreshold", 37), ("AccMotionThreshold", 38), ("AccMotionInactivityTimeout", 39), ("AccXOffset", 40), ("AccYOffset", 41), ("AccZOffset", 42), ("MaxGestureGapInSequenceInMs", 43), ("CapLocRegion1Hi", 44), ("CapLocRegion2Hi", 45), ("CapLocRegion1SwipeDownDelta", 46), ("CapLocRegion3SwipeDownDelta", 47), ("CapLocSwipeUpDelta", 48), ("CapOneTouchSwipeInMs", 49), ("CapMultiTouchWaitInMs", 50), ("CapMultiTouchGestureInMs", 51), ("CapLocRegion1IgnoreDownDelta", 52), ("BaselineUpdatePeriodInMs", 53), ("CapMinTapTimeInMs", 54), ("None", 255)])
    ReverseSensorParamsEnum = OrderedDict([(0, "CapFlickDelta"), (1, "CapTapTime"), (2, "CapLongPressTimeBegin"), (3, "CapVLongPressTimeBegin"), (4, "CapVLongPressTimeEnd"), (5, "CapLongestPressTime"), (6, "IrNearToFar"), (7, "IrFarToNear"), (8, "IrScanTime"), (9, "IrSamplingRate"), (10, "IrCurrent"), (11, "IrPulseCount"), (12, "IrIntPersist"), (13, "IrPsOffset"), (14, "IrInOutTiming"), (15, "IrModeInterruptOrContinuous"), (16, "AccRange"), (17, "AccRate"), (18, "GyrRange"), (19, "GyrRate"), (20, "MagRange"), (21, "MagRate"), (22, "EarMotionTime"), (23, "EarProxTime"), (24, "EarOutCheckTime"), (25, "EarOutCount"), (26, "EarMotionAccLo"), (27, "EarMotionAccHi"), (28, "ImuAccXOffset"), (29, "ImuAccYOffset"), (30, "ImuAccZOffset"), (31, "ImuGyroXOffset"), (32, "ImuGyroYOffset"), (33, "ImuGyroZOffset"), (34, "ImuOffsetEnaReg"), (35, "EarConfigSettings"), (36, "AccDoubleTapTime"), (37, "AccDoubleTapThreshold"), (38, "AccMotionThreshold"), (39, "AccMotionInactivityTimeout"), (40, "AccXOffset"), (41, "AccYOffset"), (42, "AccZOffset"), (43, "MaxGestureGapInSequenceInMs"), (44, "CapLocRegion1Hi"), (45, "CapLocRegion2Hi"), (46, "CapLocRegion1SwipeDownDelta"), (47, "CapLocRegion3SwipeDownDelta"), (48, "CapLocSwipeUpDelta"), (49, "CapOneTouchSwipeInMs"), (50, "CapMultiTouchWaitInMs"), (51, "CapMultiTouchGestureInMs"), (52, "CapLocRegion1IgnoreDownDelta"), (53, "BaselineUpdatePeriodInMs"), (54, "CapMinTapTimeInMs"), (255, "None")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Status.MSG_OFFSET + SensorInterface_SensorParams_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorParams_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorParams_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Status.MSG_OFFSET + SensorInterface_SensorParams_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorParams_Status.ID)
            self.hdr.SetDataLength(SensorInterface_SensorParams_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorParams.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Status.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Status.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor Id"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetSensorParam(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Status.ReverseSensorParamsEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetSensorParamValue(self):
        """Status or Parameter value requested."""
        value = struct.unpack_from('>H', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Status.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Status.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor Id"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetSensorParam(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Status.SensorParamsEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetSensorParamValue(self, value):
        """Status or Parameter value requested."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SensorInterface_SensorParams_Status.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor Id",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SensorParam",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetSensorParam,set=SetSensorParam,count=1, bitfieldInfo = [], enum = [SensorParamsEnum, ReverseSensorParamsEnum]),\
        FieldInfo(name="SensorParamValue",type="int",units="",minVal="0",maxVal="65535",description="Status or Parameter value requested.",get=GetSensorParamValue,set=SetSensorParamValue,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorParams.Status", SensorInterface_SensorParams_Status.ID, SensorInterface_SensorParams_Status)
#    obj/CodeGenerator/Python/SensorInterface/SensorParams.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorParams.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorParams_Error :
    ID = 98404
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 6), ("Operator", 4)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (6, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Error.MSG_OFFSET + SensorInterface_SensorParams_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorParams_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorParams_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorParams_Error.MSG_OFFSET + SensorInterface_SensorParams_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorParams_Error.ID)
            self.hdr.SetDataLength(SensorInterface_SensorParams_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorParams.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorParams_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorParams_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorParams_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorParams_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("SensorInterface.SensorParams.Error", SensorInterface_SensorParams_Error.ID, SensorInterface_SensorParams_Error)
