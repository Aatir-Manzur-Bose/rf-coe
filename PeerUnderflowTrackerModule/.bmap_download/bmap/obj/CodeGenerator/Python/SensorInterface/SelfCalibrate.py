#    obj/CodeGenerator/Python/SensorInterface/SelfCalibrate.py
#    Created 27/07/2023 at 10:11:03 from:
#        Messages = messages/SensorInterface/SelfCalibrate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SelfCalibrate_Start :
    ID = 98469
    SIZE = 28
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 10), ("Operator", 5)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (10, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Start.MSG_OFFSET + SensorInterface_SelfCalibrate_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SelfCalibrate_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SelfCalibrate_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Start.MSG_OFFSET + SensorInterface_SelfCalibrate_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SelfCalibrate_Start.ID)
            self.hdr.SetDataLength(SensorInterface_SelfCalibrate_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SelfCalibrate.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Start.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location (right or left side)"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Start.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor ID if there is more than one of the same sensor type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetNumRanges(self):
        """Number of ranges included for this calibration."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def GetRange1_IR_sensor_step(self):
        """Specify sensor range value(s) that internal calibration should aim for, or specify IR sensor calibration step."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetRange2(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetRange3(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetRange4(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetRange5(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def GetRange6(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 14)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetRange7(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def GetRange8(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def GetRange9(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('22')
    @msg.size('2')
    @msg.count(1)
    def GetRange10(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def GetRange11(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 24)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def GetRange12(self):
        """Specify sensor range value(s) that internal calibration should aim for."""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Start.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location (right or left side)"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Start.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor ID if there is more than one of the same sensor type."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetNumRanges(self, value):
        """Number of ranges included for this calibration."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('4')
    @msg.size('2')
    @msg.count(1)
    def SetRange1_IR_sensor_step(self, value):
        """Specify sensor range value(s) that internal calibration should aim for, or specify IR sensor calibration step."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetRange2(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetRange3(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetRange4(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetRange5(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 12, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('14')
    @msg.size('2')
    @msg.count(1)
    def SetRange6(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 14, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetRange7(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 16, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('18')
    @msg.size('2')
    @msg.count(1)
    def SetRange8(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def SetRange9(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 20, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('22')
    @msg.size('2')
    @msg.count(1)
    def SetRange10(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 22, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('24')
    @msg.size('2')
    @msg.count(1)
    def SetRange11(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 24, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('26')
    @msg.size('2')
    @msg.count(1)
    def SetRange12(self, value):
        """Specify sensor range value(s) that internal calibration should aim for."""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Start.MSG_OFFSET + 26, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location (right or left side)",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor ID if there is more than one of the same sensor type.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="NumRanges",type="int",units="",minVal="0",maxVal="255",description="Number of ranges included for this calibration.",get=GetNumRanges,set=SetNumRanges,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range1_IR_sensor_step",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for, or specify IR sensor calibration step.",get=GetRange1_IR_sensor_step,set=SetRange1_IR_sensor_step,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range2",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange2,set=SetRange2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range3",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange3,set=SetRange3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range4",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange4,set=SetRange4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range5",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange5,set=SetRange5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range6",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange6,set=SetRange6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range7",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange7,set=SetRange7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range8",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange8,set=SetRange8,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range9",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange9,set=SetRange9,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range10",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange10,set=SetRange10,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range11",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange11,set=SetRange11,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Range12",type="int",units="",minVal="-32768",maxVal="32767",description="Specify sensor range value(s) that internal calibration should aim for.",get=GetRange12,set=SetRange12,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SelfCalibrate.Start", SensorInterface_SelfCalibrate_Start.ID, SensorInterface_SelfCalibrate_Start)
#    obj/CodeGenerator/Python/SensorInterface/SelfCalibrate.py
#    Created 27/07/2023 at 10:11:03 from:
#        Messages = messages/SensorInterface/SelfCalibrate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SelfCalibrate_Processing :
    ID = 98471
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 10), ("Operator", 7)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (10, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Processing.MSG_OFFSET + SensorInterface_SelfCalibrate_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SelfCalibrate_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SelfCalibrate_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Processing.MSG_OFFSET + SensorInterface_SelfCalibrate_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SelfCalibrate_Processing.ID)
            self.hdr.SetDataLength(SensorInterface_SelfCalibrate_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SelfCalibrate.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("SensorInterface.SelfCalibrate.Processing", SensorInterface_SelfCalibrate_Processing.ID, SensorInterface_SelfCalibrate_Processing)
#    obj/CodeGenerator/Python/SensorInterface/SelfCalibrate.py
#    Created 27/07/2023 at 10:11:03 from:
#        Messages = messages/SensorInterface/SelfCalibrate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SelfCalibrate_Status :
    ID = 98467
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorCalibStatusEnum = OrderedDict([("CalibrationPassed", 0), ("CalibrationFailed", 1), ("CalibrationIncomplete", 2)])
    ReverseSensorCalibStatusEnum = OrderedDict([(0, "CalibrationPassed"), (1, "CalibrationFailed"), (2, "CalibrationIncomplete")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 10), ("Operator", 3)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (10, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Status.MSG_OFFSET + SensorInterface_SelfCalibrate_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SelfCalibrate_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SelfCalibrate_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Status.MSG_OFFSET + SensorInterface_SelfCalibrate_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SelfCalibrate_Status.ID)
            self.hdr.SetDataLength(SensorInterface_SelfCalibrate_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SelfCalibrate.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Status.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Status.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor ID if there is more than one of the same sensor type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetCalStatus(self, enumAsInt=0):
        """Calibration status"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Status.ReverseSensorCalibStatusEnum.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(251)
    def GetCalInfoStr1(self):
        """Calibration information string"""
        count = 251
        if count > len(self.rawBuffer())-(SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 4):
            count = len(self.rawBuffer())-(SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 4)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 4)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Status.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Status.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor ID if there is more than one of the same sensor type."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetCalStatus(self, value):
        """Calibration status"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Status.SensorCalibStatusEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(251)
    def SetCalInfoStr1(self, value):
        """Calibration information string"""
        tmp = value.encode('utf-8')
        struct.pack_into('251s', self.rawBuffer(), SensorInterface_SelfCalibrate_Status.MSG_OFFSET + 4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor ID if there is more than one of the same sensor type.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CalStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Calibration status",get=GetCalStatus,set=SetCalStatus,count=1, bitfieldInfo = [], enum = [SensorCalibStatusEnum, ReverseSensorCalibStatusEnum]),\
        FieldInfo(name="CalInfoStr1",type="string",units="ASCII",minVal="0",maxVal="255",description="Calibration information string",get=GetCalInfoStr1,set=SetCalInfoStr1,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SelfCalibrate.Status", SensorInterface_SelfCalibrate_Status.ID, SensorInterface_SelfCalibrate_Status)
#    obj/CodeGenerator/Python/SensorInterface/SelfCalibrate.py
#    Created 27/07/2023 at 10:11:03 from:
#        Messages = messages/SensorInterface/SelfCalibrate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SelfCalibrate_Get :
    ID = 98465
    SIZE = 4
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorCalibStatusEnum = OrderedDict([("CalibrationPassed", 0), ("CalibrationFailed", 1), ("CalibrationIncomplete", 2)])
    ReverseSensorCalibStatusEnum = OrderedDict([(0, "CalibrationPassed"), (1, "CalibrationFailed"), (2, "CalibrationIncomplete")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 10), ("Operator", 1)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (10, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Get.MSG_OFFSET + SensorInterface_SelfCalibrate_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SelfCalibrate_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SelfCalibrate_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Get.MSG_OFFSET + SensorInterface_SelfCalibrate_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SelfCalibrate_Get.ID)
            self.hdr.SetDataLength(SensorInterface_SelfCalibrate_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SelfCalibrate.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Get.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Get.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor ID if there is more than one of the same sensor type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetCalibrationStatus(self, enumAsInt=0):
        """Calibration status, in progress, success, or fail"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Get.ReverseSensorCalibStatusEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Get.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Get.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor ID if there is more than one of the same sensor type."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetCalibrationStatus(self, value):
        """Calibration status, in progress, success, or fail"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Get.SensorCalibStatusEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Get.MSG_OFFSET + 3, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor ID if there is more than one of the same sensor type.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CalibrationStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Calibration status, in progress, success, or fail",get=GetCalibrationStatus,set=SetCalibrationStatus,count=1, bitfieldInfo = [], enum = [SensorCalibStatusEnum, ReverseSensorCalibStatusEnum])\
    ]

Messaging.Register("SensorInterface.SelfCalibrate.Get", SensorInterface_SelfCalibrate_Get.ID, SensorInterface_SelfCalibrate_Get)
#    obj/CodeGenerator/Python/SensorInterface/SelfCalibrate.py
#    Created 27/07/2023 at 10:11:03 from:
#        Messages = messages/SensorInterface/SelfCalibrate.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SelfCalibrate_Result :
    ID = 98470
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorTypeEnum = OrderedDict([("Acc", 0), ("Gyro", 1), ("Mag", 2), ("IR", 3), ("Cap", 4), ("IMU", 5), ("InEar", 6), ("UncalMag", 7), ("Rotation", 8), ("GameRotation", 9), ("Component", 10), ("Touch_Debug", 11), ("Cap_Proximity", 12), ("Sensor_Buttons", 13), ("Second_Acc", 32)])
    ReverseSensorTypeEnum = OrderedDict([(0, "Acc"), (1, "Gyro"), (2, "Mag"), (3, "IR"), (4, "Cap"), (5, "IMU"), (6, "InEar"), (7, "UncalMag"), (8, "Rotation"), (9, "GameRotation"), (10, "Component"), (11, "Touch_Debug"), (12, "Cap_Proximity"), (13, "Sensor_Buttons"), (32, "Second_Acc")])
    SensorLocationEnum = OrderedDict([("Left", 0), ("Right", 1), ("Single", 2)])
    ReverseSensorLocationEnum = OrderedDict([(0, "Left"), (1, "Right"), (2, "Single")])
    SensorCalibStatusEnum = OrderedDict([("CalibrationPassed", 0), ("CalibrationFailed", 1), ("CalibrationIncomplete", 2)])
    ReverseSensorCalibStatusEnum = OrderedDict([(0, "CalibrationPassed"), (1, "CalibrationFailed"), (2, "CalibrationIncomplete")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 10), ("Operator", 6)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (10, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Result.MSG_OFFSET + SensorInterface_SelfCalibrate_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SelfCalibrate_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SelfCalibrate_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SelfCalibrate_Result.MSG_OFFSET + SensorInterface_SelfCalibrate_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SelfCalibrate_Result.ID)
            self.hdr.SetDataLength(SensorInterface_SelfCalibrate_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SelfCalibrate.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSensorType(self, enumAsInt=0):
        """Sensor Type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Result.ReverseSensorTypeEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetSensorLocation(self, enumAsInt=0):
        """Sensor Location"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Result.ReverseSensorLocationEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetSensorId(self):
        """Sensor ID if there is more than one of the same sensor type."""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def GetCalStatus(self, enumAsInt=0):
        """Calibration status, success or fail"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 3)[0]
        if not enumAsInt:
            value = SensorInterface_SelfCalibrate_Result.ReverseSensorCalibStatusEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetData1(self):
        """results data byte 1"""
        value = struct.unpack_from('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetData2(self):
        """results data byte 2"""
        value = struct.unpack_from('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def GetData3(self):
        """results data byte 3"""
        value = struct.unpack_from('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def GetData4(self):
        """results data byte 4"""
        value = struct.unpack_from('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetData5(self):
        """results data byte 5"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetData6(self):
        """results data byte 6"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def GetData7(self):
        """results data byte 7"""
        value = struct.unpack_from('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 12)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(241)
    def GetCalInfoStr1(self):
        """Calibration information string"""
        count = 241
        if count > len(self.rawBuffer())-(SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 14):
            count = len(self.rawBuffer())-(SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 14)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 14)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSensorType(self, value):
        """Sensor Type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Result.SensorTypeEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetSensorLocation(self, value):
        """Sensor Location"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Result.SensorLocationEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetSensorId(self, value):
        """Sensor ID if there is more than one of the same sensor type."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(1)
    def SetCalStatus(self, value):
        """Calibration status, success or fail"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SelfCalibrate_Result.SensorCalibStatusEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetData1(self, value):
        """results data byte 1"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetData2(self, value):
        """results data byte 2"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('6')
    @msg.size('1')
    @msg.count(1)
    def SetData3(self, value):
        """results data byte 3"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-128')
    @msg.maxVal('127')
    @msg.offset('7')
    @msg.size('1')
    @msg.count(1)
    def SetData4(self, value):
        """results data byte 4"""
        tmp = min(max(value, -128), 127)
        struct.pack_into('b', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetData5(self, value):
        """results data byte 5"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetData6(self, value):
        """results data byte 6"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 10, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('-32768')
    @msg.maxVal('32767')
    @msg.offset('12')
    @msg.size('2')
    @msg.count(1)
    def SetData7(self, value):
        """results data byte 7"""
        tmp = min(max(value, -32768), 32767)
        struct.pack_into('>h', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 12, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(241)
    def SetCalInfoStr1(self, value):
        """Calibration information string"""
        tmp = value.encode('utf-8')
        struct.pack_into('241s', self.rawBuffer(), SensorInterface_SelfCalibrate_Result.MSG_OFFSET + 14, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SensorType",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Type",get=GetSensorType,set=SetSensorType,count=1, bitfieldInfo = [], enum = [SensorTypeEnum, ReverseSensorTypeEnum]),\
        FieldInfo(name="SensorLocation",type="enumeration",units="",minVal="0",maxVal="255",description="Sensor Location",get=GetSensorLocation,set=SetSensorLocation,count=1, bitfieldInfo = [], enum = [SensorLocationEnum, ReverseSensorLocationEnum]),\
        FieldInfo(name="SensorId",type="int",units="",minVal="0",maxVal="255",description="Sensor ID if there is more than one of the same sensor type.",get=GetSensorId,set=SetSensorId,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CalStatus",type="enumeration",units="",minVal="0",maxVal="255",description="Calibration status, success or fail",get=GetCalStatus,set=SetCalStatus,count=1, bitfieldInfo = [], enum = [SensorCalibStatusEnum, ReverseSensorCalibStatusEnum]),\
        FieldInfo(name="Data1",type="int",units="",minVal="-128",maxVal="127",description="results data byte 1",get=GetData1,set=SetData1,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data2",type="int",units="",minVal="-128",maxVal="127",description="results data byte 2",get=GetData2,set=SetData2,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data3",type="int",units="",minVal="-128",maxVal="127",description="results data byte 3",get=GetData3,set=SetData3,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data4",type="int",units="",minVal="-128",maxVal="127",description="results data byte 4",get=GetData4,set=SetData4,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data5",type="int",units="",minVal="-32768",maxVal="32767",description="results data byte 5",get=GetData5,set=SetData5,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data6",type="int",units="",minVal="-32768",maxVal="32767",description="results data byte 6",get=GetData6,set=SetData6,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data7",type="int",units="",minVal="-32768",maxVal="32767",description="results data byte 7",get=GetData7,set=SetData7,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CalInfoStr1",type="string",units="ASCII",minVal="0",maxVal="255",description="Calibration information string",get=GetCalInfoStr1,set=SetCalInfoStr1,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SelfCalibrate.Result", SensorInterface_SelfCalibrate_Result.ID, SensorInterface_SelfCalibrate_Result)
