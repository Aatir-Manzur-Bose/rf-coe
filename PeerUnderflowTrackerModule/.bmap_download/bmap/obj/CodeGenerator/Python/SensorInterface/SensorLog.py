#    obj/CodeGenerator/Python/SensorInterface/SensorLog.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorLog_Get :
    ID = 98481
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 11), ("Operator", 1)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (11, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Get.MSG_OFFSET + SensorInterface_SensorLog_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorLog_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorLog_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Get.MSG_OFFSET + SensorInterface_SensorLog_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorLog_Get.ID)
            self.hdr.SetDataLength(SensorInterface_SensorLog_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorLog.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSnapshot(self):
        """Set to 1 to read the last snapshot of the Log"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorLog_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSnapshot(self, value):
        """Set to 1 to read the last snapshot of the Log"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorLog_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Snapshot",type="int",units="",minVal="0",maxVal="255",description="Set to 1 to read the last snapshot of the Log",get=GetSnapshot,set=SetSnapshot,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorLog.Get", SensorInterface_SensorLog_Get.ID, SensorInterface_SensorLog_Get)
#    obj/CodeGenerator/Python/SensorInterface/SensorLog.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorLog_Status :
    ID = 98483
    SIZE = 128
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 11), ("Operator", 3)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (11, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Status.MSG_OFFSET + SensorInterface_SensorLog_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorLog_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorLog_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Status.MSG_OFFSET + SensorInterface_SensorLog_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorLog_Status.ID)
            self.hdr.SetDataLength(SensorInterface_SensorLog_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorLog.Status"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(128)
    def GetInfo(self):
        """Details"""
        count = 128
        if count > len(self.rawBuffer())-(SensorInterface_SensorLog_Status.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(SensorInterface_SensorLog_Status.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SensorInterface_SensorLog_Status.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(128)
    def SetInfo(self, value):
        """Details"""
        tmp = value.encode('utf-8')
        struct.pack_into('128s', self.rawBuffer(), SensorInterface_SensorLog_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Info",type="string",units="ASCII",minVal="0",maxVal="255",description="Details",get=GetInfo,set=SetInfo,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorLog.Status", SensorInterface_SensorLog_Status.ID, SensorInterface_SensorLog_Status)
#    obj/CodeGenerator/Python/SensorInterface/SensorLog.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorLog_SetGet :
    ID = 98482
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 11), ("Operator", 2)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (11, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorLog_SetGet.MSG_OFFSET + SensorInterface_SensorLog_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorLog_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorLog_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorLog_SetGet.MSG_OFFSET + SensorInterface_SensorLog_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorLog_SetGet.ID)
            self.hdr.SetDataLength(SensorInterface_SensorLog_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorLog.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSnapshot(self):
        """Set to 1 to take a new snapshot of the Log"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorLog_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetClearLog(self):
        """Set to 1 to clear the Log (prior to taking any snapshot)"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorLog_SetGet.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSnapshot(self, value):
        """Set to 1 to take a new snapshot of the Log"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorLog_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetClearLog(self, value):
        """Set to 1 to clear the Log (prior to taking any snapshot)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorLog_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Snapshot",type="int",units="",minVal="0",maxVal="255",description="Set to 1 to take a new snapshot of the Log",get=GetSnapshot,set=SetSnapshot,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ClearLog",type="int",units="",minVal="0",maxVal="255",description="Set to 1 to clear the Log (prior to taking any snapshot)",get=GetClearLog,set=SetClearLog,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorLog.SetGet", SensorInterface_SensorLog_SetGet.ID, SensorInterface_SensorLog_SetGet)
#    obj/CodeGenerator/Python/SensorInterface/SensorLog.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorLog_Start :
    ID = 98485
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SensorLogErrorInjectType = OrderedDict([("Watchdog timeout", 0), ("Stack utilization warning", 1), ("Hard fault", 2)])
    ReverseSensorLogErrorInjectType = OrderedDict([(0, "Watchdog timeout"), (1, "Stack utilization warning"), (2, "Hard fault")])
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 11), ("Operator", 5)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (11, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Start.MSG_OFFSET + SensorInterface_SensorLog_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorLog_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorLog_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Start.MSG_OFFSET + SensorInterface_SensorLog_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorLog_Start.ID)
            self.hdr.SetDataLength(SensorInterface_SensorLog_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorLog.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """Inject error of given type"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorLog_Start.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SensorInterface_SensorLog_Start.ReverseSensorLogErrorInjectType.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """Inject error of given type"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SensorInterface_SensorLog_Start.SensorLogErrorInjectType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorLog_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="Inject error of given type",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [SensorLogErrorInjectType, ReverseSensorLogErrorInjectType])\
    ]

Messaging.Register("SensorInterface.SensorLog.Start", SensorInterface_SensorLog_Start.ID, SensorInterface_SensorLog_Start)
#    obj/CodeGenerator/Python/SensorInterface/SensorLog.py
#    Created 27/07/2023 at 10:11:04 from:
#        Messages = messages/SensorInterface/SensorLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SensorInterface_SensorLog_Result :
    ID = 98486
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 24), ("Function", 11), ("Operator", 6)])
    ReverseIDs = OrderedDict([(24, "FunctionBlock"), (11, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Result.MSG_OFFSET + SensorInterface_SensorLog_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SensorInterface_SensorLog_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SensorInterface_SensorLog_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SensorInterface_SensorLog_Result.MSG_OFFSET + SensorInterface_SensorLog_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SensorInterface_SensorLog_Result.ID)
            self.hdr.SetDataLength(SensorInterface_SensorLog_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SensorInterface.SensorLog.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def GetInfo(self, idx):
        """Details"""
        value = struct.unpack_from('B', self.rawBuffer(), SensorInterface_SensorLog_Result.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(2)
    def SetInfo(self, value, idx):
        """Details"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SensorInterface_SensorLog_Result.MSG_OFFSET + 0+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Info",type="int",units="",minVal="0",maxVal="255",description="Details",get=GetInfo,set=SetInfo,count=2, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SensorInterface.SensorLog.Result", SensorInterface_SensorLog_Result.ID, SensorInterface_SensorLog_Result)
