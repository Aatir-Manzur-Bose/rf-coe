#    obj/CodeGenerator/Python/CaseDebug/ChargerConnection.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/CaseDebug/ChargerConnection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_ChargerConnection_Get :
    ID = 118833
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 3), ("Operator", 1)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (3, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Get.MSG_OFFSET + CaseDebug_ChargerConnection_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_ChargerConnection_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_ChargerConnection_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Get.MSG_OFFSET + CaseDebug_ChargerConnection_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_ChargerConnection_Get.ID)
            self.hdr.SetDataLength(CaseDebug_ChargerConnection_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.ChargerConnection.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("CaseDebug.ChargerConnection.Get", CaseDebug_ChargerConnection_Get.ID, CaseDebug_ChargerConnection_Get)
#    obj/CodeGenerator/Python/CaseDebug/ChargerConnection.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/CaseDebug/ChargerConnection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_ChargerConnection_Status :
    ID = 118835
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ChargerStatusEnum = OrderedDict([("Disconnected", 0), ("USB_DCP", 1), ("USB_CDP", 2), ("USB_SDP", 3), ("USB_C", 4), ("WIRELESS_CHARGER", 5)])
    ReverseChargerStatusEnum = OrderedDict([(0, "Disconnected"), (1, "USB_DCP"), (2, "USB_CDP"), (3, "USB_SDP"), (4, "USB_C"), (5, "WIRELESS_CHARGER")])
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 3), ("Operator", 3)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (3, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Status.MSG_OFFSET + CaseDebug_ChargerConnection_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_ChargerConnection_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_ChargerConnection_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Status.MSG_OFFSET + CaseDebug_ChargerConnection_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_ChargerConnection_Status.ID)
            self.hdr.SetDataLength(CaseDebug_ChargerConnection_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.ChargerConnection.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChargerStatus(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_ChargerConnection_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = CaseDebug_ChargerConnection_Status.ReverseChargerStatusEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChargerStatus(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_ChargerConnection_Status.ChargerStatusEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_ChargerConnection_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChargerStatus",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetChargerStatus,set=SetChargerStatus,count=1, bitfieldInfo = [], enum = [ChargerStatusEnum, ReverseChargerStatusEnum])\
    ]

Messaging.Register("CaseDebug.ChargerConnection.Status", CaseDebug_ChargerConnection_Status.ID, CaseDebug_ChargerConnection_Status)
#    obj/CodeGenerator/Python/CaseDebug/ChargerConnection.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/CaseDebug/ChargerConnection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_ChargerConnection_SetGet :
    ID = 118834
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 3), ("Operator", 2)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (3, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_SetGet.MSG_OFFSET + CaseDebug_ChargerConnection_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_ChargerConnection_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_ChargerConnection_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_SetGet.MSG_OFFSET + CaseDebug_ChargerConnection_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_ChargerConnection_SetGet.ID)
            self.hdr.SetDataLength(CaseDebug_ChargerConnection_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.ChargerConnection.SetGet"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetChargerStatus(self):
        """0-charger disconnected, 1-charger connected."""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_ChargerConnection_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetChargerStatus(self, value):
        """0-charger disconnected, 1-charger connected."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_ChargerConnection_SetGet.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ChargerStatus",type="int",units="Boolean",minVal="0",maxVal="255",description="0-charger disconnected, 1-charger connected.",get=GetChargerStatus,set=SetChargerStatus,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("CaseDebug.ChargerConnection.SetGet", CaseDebug_ChargerConnection_SetGet.ID, CaseDebug_ChargerConnection_SetGet)
#    obj/CodeGenerator/Python/CaseDebug/ChargerConnection.py
#    Created 27/07/2023 at 10:09:57 from:
#        Messages = messages/CaseDebug/ChargerConnection.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_ChargerConnection_Error :
    ID = 118836
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 3), ("Operator", 4)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (3, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Error.MSG_OFFSET + CaseDebug_ChargerConnection_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_ChargerConnection_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_ChargerConnection_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_ChargerConnection_Error.MSG_OFFSET + CaseDebug_ChargerConnection_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_ChargerConnection_Error.ID)
            self.hdr.SetDataLength(CaseDebug_ChargerConnection_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.ChargerConnection.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_ChargerConnection_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = CaseDebug_ChargerConnection_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_ChargerConnection_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_ChargerConnection_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("CaseDebug.ChargerConnection.Error", CaseDebug_ChargerConnection_Error.ID, CaseDebug_ChargerConnection_Error)
