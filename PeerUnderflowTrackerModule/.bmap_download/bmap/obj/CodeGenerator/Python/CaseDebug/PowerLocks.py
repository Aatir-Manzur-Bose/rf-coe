#    obj/CodeGenerator/Python/CaseDebug/PowerLocks.py
#    Created 27/07/2023 at 10:09:58 from:
#        Messages = messages/CaseDebug/PowerLocks.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_PowerLocks_Get :
    ID = 118897
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    PowerLocksEnum = OrderedDict([("FULL_POWER_LOCK", 1), ("PARTIAL_POWER_LOCK", 2)])
    ReversePowerLocksEnum = OrderedDict([(1, "FULL_POWER_LOCK"), (2, "PARTIAL_POWER_LOCK")])
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 7), ("Operator", 1)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (7, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Get.MSG_OFFSET + CaseDebug_PowerLocks_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_PowerLocks_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_PowerLocks_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Get.MSG_OFFSET + CaseDebug_PowerLocks_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_PowerLocks_Get.ID)
            self.hdr.SetDataLength(CaseDebug_PowerLocks_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.PowerLocks.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPowerLockType(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_PowerLocks_Get.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = CaseDebug_PowerLocks_Get.ReversePowerLocksEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPowerLockType(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_PowerLocks_Get.PowerLocksEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_PowerLocks_Get.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PowerLockType",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetPowerLockType,set=SetPowerLockType,count=1, bitfieldInfo = [], enum = [PowerLocksEnum, ReversePowerLocksEnum])\
    ]

Messaging.Register("CaseDebug.PowerLocks.Get", CaseDebug_PowerLocks_Get.ID, CaseDebug_PowerLocks_Get)
#    obj/CodeGenerator/Python/CaseDebug/PowerLocks.py
#    Created 27/07/2023 at 10:09:58 from:
#        Messages = messages/CaseDebug/PowerLocks.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_PowerLocks_Status :
    ID = 118899
    SIZE = 18
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    PowerLocksEnum = OrderedDict([("FULL_POWER_LOCK", 1), ("PARTIAL_POWER_LOCK", 2)])
    ReversePowerLocksEnum = OrderedDict([(1, "FULL_POWER_LOCK"), (2, "PARTIAL_POWER_LOCK")])
    PowerLockOwnersEnum = OrderedDict([("POWER_LOCK_C2B_MGR", 1), ("POWER_LOCK_CHG_SRC", 2), ("POWER_LOCK_BUTTON", 3), ("POWER_LOCK_UE", 4), ("POWER_LOCK_USB_CONN", 5), ("POWER_LOCK_USB_TMR", 6)])
    ReversePowerLockOwnersEnum = OrderedDict([(1, "POWER_LOCK_C2B_MGR"), (2, "POWER_LOCK_CHG_SRC"), (3, "POWER_LOCK_BUTTON"), (4, "POWER_LOCK_UE"), (5, "POWER_LOCK_USB_CONN"), (6, "POWER_LOCK_USB_TMR")])
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Status.MSG_OFFSET + CaseDebug_PowerLocks_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_PowerLocks_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_PowerLocks_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Status.MSG_OFFSET + CaseDebug_PowerLocks_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_PowerLocks_Status.ID)
            self.hdr.SetDataLength(CaseDebug_PowerLocks_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.PowerLocks.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetPowerLockType(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = CaseDebug_PowerLocks_Status.ReversePowerLocksEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetNumberOfLocks(self):
        """Number of locks"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(16)
    def GetPowerLockOwners(self, idx, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 2+idx*1)[0]
        if not enumAsInt:
            value = CaseDebug_PowerLocks_Status.ReversePowerLockOwnersEnum.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetPowerLockType(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_PowerLocks_Status.PowerLocksEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetNumberOfLocks(self, value):
        """Number of locks"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(16)
    def SetPowerLockOwners(self, value, idx):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_PowerLocks_Status.PowerLockOwnersEnum.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_PowerLocks_Status.MSG_OFFSET + 2+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="PowerLockType",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetPowerLockType,set=SetPowerLockType,count=1, bitfieldInfo = [], enum = [PowerLocksEnum, ReversePowerLocksEnum]),\
        FieldInfo(name="NumberOfLocks",type="int",units="",minVal="0",maxVal="255",description="Number of locks",get=GetNumberOfLocks,set=SetNumberOfLocks,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PowerLockOwners",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetPowerLockOwners,set=SetPowerLockOwners,count=16, bitfieldInfo = [], enum = [PowerLockOwnersEnum, ReversePowerLockOwnersEnum])\
    ]

Messaging.Register("CaseDebug.PowerLocks.Status", CaseDebug_PowerLocks_Status.ID, CaseDebug_PowerLocks_Status)
#    obj/CodeGenerator/Python/CaseDebug/PowerLocks.py
#    Created 27/07/2023 at 10:09:58 from:
#        Messages = messages/CaseDebug/PowerLocks.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class CaseDebug_PowerLocks_Error :
    ID = 118900
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    ErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("FBlockNotSupported", 3), ("FunctionNotSupported", 4), ("OperatorNotSupported", 5), ("InvalidData", 6), ("DataNotAvailable", 7), ("RunTime", 8), ("Timeout", 9), ("InvalidState", 10), ("DeviceNotFound", 11), ("Busy", 12), ("UnableToConnectTimeout", 13), ("UnableToConnectSourceDeviceKeyMissing", 14), ("OTAFirmwareUpdateInProgress", 15), ("LowBatteryVoltage", 16), ("ChargerNotConnected", 17), ("UpdateNotAllowed", 18), ("UnknownPortNumber", 19), ("InsecureTransport", 20), ("InvalidOTPKey", 21), ("OutOfMemory", 22), ("CryptoProcessingError", 23), ("FeatureLocked", 24), ("FunctionBlockSpecificErrorCode", 255)])
    ReverseErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "FBlockNotSupported"), (4, "FunctionNotSupported"), (5, "OperatorNotSupported"), (6, "InvalidData"), (7, "DataNotAvailable"), (8, "RunTime"), (9, "Timeout"), (10, "InvalidState"), (11, "DeviceNotFound"), (12, "Busy"), (13, "UnableToConnectTimeout"), (14, "UnableToConnectSourceDeviceKeyMissing"), (15, "OTAFirmwareUpdateInProgress"), (16, "LowBatteryVoltage"), (17, "ChargerNotConnected"), (18, "UpdateNotAllowed"), (19, "UnknownPortNumber"), (20, "InsecureTransport"), (21, "InvalidOTPKey"), (22, "OutOfMemory"), (23, "CryptoProcessingError"), (24, "FeatureLocked"), (255, "FunctionBlockSpecificErrorCode")])
    IDs = OrderedDict([("FunctionBlock", 29), ("Function", 7), ("Operator", 4)])
    ReverseIDs = OrderedDict([(29, "FunctionBlock"), (7, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Error.MSG_OFFSET + CaseDebug_PowerLocks_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, CaseDebug_PowerLocks_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, CaseDebug_PowerLocks_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(CaseDebug_PowerLocks_Error.MSG_OFFSET + CaseDebug_PowerLocks_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(CaseDebug_PowerLocks_Error.ID)
            self.hdr.SetDataLength(CaseDebug_PowerLocks_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "CaseDebug.PowerLocks.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), CaseDebug_PowerLocks_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = CaseDebug_PowerLocks_Error.ReverseErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = CaseDebug_PowerLocks_Error.ErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), CaseDebug_PowerLocks_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [ErrorResponseCodes, ReverseErrorResponseCodes])\
    ]

Messaging.Register("CaseDebug.PowerLocks.Error", CaseDebug_PowerLocks_Error.ID, CaseDebug_PowerLocks_Error)
