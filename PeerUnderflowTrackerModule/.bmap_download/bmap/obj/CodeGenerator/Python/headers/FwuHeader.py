#    obj/CodeGenerator/Python/headers/FwuHeader.py
#    Created 27/07/2023 at 10:10:45 from:
#        Messages = messages/headers/FwuHeader.yaml
#        Template = HeaderTemplate.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class FwuHeader :
    SIZE = 12
    MSG_OFFSET = 0
    # Enumerations

    #@staticmethod
    #def Create() :
    #    message_buffer = ctypes.create_string_buffer(FwuHeader.SIZE)
    #    self.SetReserved(43605)
    #    return message_buffer
    
    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(FwuHeader.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }
        if doInit:
            self.initialize()

    def initialize(self):
            self.SetReserved(43605)
            pass
    
    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "FwuHeader"

    def SetMessageID(self, id):
        self.SetImageType(id & 0xffff)

    def GetMessageID(self):
        id = self.GetImageType()
        return id

    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetImageType(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def GetMajorRev(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def GetMinorRev(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), FwuHeader.MSG_OFFSET + 4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def GetPatchRev(self):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), FwuHeader.MSG_OFFSET + 5)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def GetOffsetStart(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 6)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def GetDataStart(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 8)[0]
        return value
    
    @msg.units('')
    @msg.default('43605')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def GetReserved(self):
        """"""
        value = struct.unpack_from('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 10)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetImageType(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('2')
    @msg.size('2')
    @msg.count(1)
    def SetMajorRev(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(1)
    def SetMinorRev(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FwuHeader.MSG_OFFSET + 4, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('5')
    @msg.size('1')
    @msg.count(1)
    def SetPatchRev(self, value):
        """"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), FwuHeader.MSG_OFFSET + 5, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('6')
    @msg.size('2')
    @msg.count(1)
    def SetOffsetStart(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 6, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('8')
    @msg.size('2')
    @msg.count(1)
    def SetDataStart(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 8, tmp)
    
    @msg.units('')
    @msg.default('43605')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('10')
    @msg.size('2')
    @msg.count(1)
    def SetReserved(self, value):
        """"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), FwuHeader.MSG_OFFSET + 10, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ImageType",type="int",units="",minVal="0",maxVal="65535",description="",get=GetImageType,set=SetImageType,count=1, idbits=16,bitfieldInfo = [], enum = []),\
        FieldInfo(name="MajorRev",type="int",units="",minVal="0",maxVal="65535",description="",get=GetMajorRev,set=SetMajorRev,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="MinorRev",type="int",units="",minVal="0",maxVal="255",description="",get=GetMinorRev,set=SetMinorRev,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="PatchRev",type="int",units="",minVal="0",maxVal="255",description="",get=GetPatchRev,set=SetPatchRev,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="OffsetStart",type="int",units="",minVal="0",maxVal="65535",description="",get=GetOffsetStart,set=SetOffsetStart,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DataStart",type="int",units="",minVal="0",maxVal="65535",description="",get=GetDataStart,set=SetDataStart,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Reserved",type="int",units="",minVal="0",maxVal="65535",description="",get=GetReserved,set=SetReserved,count=1, bitfieldInfo = [], enum = [])\
    ]
