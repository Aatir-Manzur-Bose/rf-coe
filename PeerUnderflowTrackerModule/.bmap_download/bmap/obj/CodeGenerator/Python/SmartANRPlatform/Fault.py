#    obj/CodeGenerator/Python/SmartANRPlatform/Fault.py
#    Created 27/07/2023 at 10:11:14 from:
#        Messages = messages/SmartANRPlatform/Fault.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Fault_Get :
    ID = 106833
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 21), ("Operator", 1)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (21, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Get.MSG_OFFSET + SmartANRPlatform_Fault_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Fault_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Fault_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Get.MSG_OFFSET + SmartANRPlatform_Fault_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Fault_Get.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Fault_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Fault.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("SmartANRPlatform.Fault.Get", SmartANRPlatform_Fault_Get.ID, SmartANRPlatform_Fault_Get)
#    obj/CodeGenerator/Python/SmartANRPlatform/Fault.py
#    Created 27/07/2023 at 10:11:14 from:
#        Messages = messages/SmartANRPlatform/Fault.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Fault_Status :
    ID = 106835
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartANRPlatformStates = OrderedDict([("Passive", 0), ("Active", 1), ("Firmware_update", 2), ("Tuning", 3), ("Turn_off", 4), ("Fault", 5)])
    ReverseSmartANRPlatformStates = OrderedDict([(0, "Passive"), (1, "Active"), (2, "Firmware_update"), (3, "Tuning"), (4, "Turn_off"), (5, "Fault")])
    SmartANRPlatformFaults = OrderedDict([("OK", 0), ("FlashErase", 1), ("FlashUnlock", 2), ("FlashProgram", 3), ("FlashRead", 4), ("Malloc", 5), ("ImageChecksum", 6), ("BadBmapPkt", 7), ("BscPllNotLocked", 8), ("BscAuthFail", 9), ("BscLoadFail", 10)])
    ReverseSmartANRPlatformFaults = OrderedDict([(0, "OK"), (1, "FlashErase"), (2, "FlashUnlock"), (3, "FlashProgram"), (4, "FlashRead"), (5, "Malloc"), (6, "ImageChecksum"), (7, "BadBmapPkt"), (8, "BscPllNotLocked"), (9, "BscAuthFail"), (10, "BscLoadFail")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 21), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (21, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Status.MSG_OFFSET + SmartANRPlatform_Fault_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Fault_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Fault_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Status.MSG_OFFSET + SmartANRPlatform_Fault_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Fault_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Fault_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Fault.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetFault(self, enumAsInt=0):
        """Fault that occurred"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Fault_Status.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SmartANRPlatform_Fault_Status.ReverseSmartANRPlatformFaults.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetState(self, enumAsInt=0):
        """State SmartANR was in when the fault occurred"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Fault_Status.MSG_OFFSET + 1)[0]
        if not enumAsInt:
            value = SmartANRPlatform_Fault_Status.ReverseSmartANRPlatformStates.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetFault(self, value):
        """Fault that occurred"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_Fault_Status.SmartANRPlatformFaults.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Fault_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetState(self, value):
        """State SmartANR was in when the fault occurred"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_Fault_Status.SmartANRPlatformStates.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Fault_Status.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Fault",type="enumeration",units="",minVal="0",maxVal="255",description="Fault that occurred",get=GetFault,set=SetFault,count=1, bitfieldInfo = [], enum = [SmartANRPlatformFaults, ReverseSmartANRPlatformFaults]),\
        FieldInfo(name="State",type="enumeration",units="",minVal="0",maxVal="255",description="State SmartANR was in when the fault occurred",get=GetState,set=SetState,count=1, bitfieldInfo = [], enum = [SmartANRPlatformStates, ReverseSmartANRPlatformStates])\
    ]

Messaging.Register("SmartANRPlatform.Fault.Status", SmartANRPlatform_Fault_Status.ID, SmartANRPlatform_Fault_Status)
#    obj/CodeGenerator/Python/SmartANRPlatform/Fault.py
#    Created 27/07/2023 at 10:11:14 from:
#        Messages = messages/SmartANRPlatform/Fault.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Fault_Error :
    ID = 106836
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartANRPlatformErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("InvalidData", 3), ("RunTime", 4), ("Timeout", 5), ("InvalidState", 6), ("Verify", 7)])
    ReverseSmartANRPlatformErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "InvalidData"), (4, "RunTime"), (5, "Timeout"), (6, "InvalidState"), (7, "Verify")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 21), ("Operator", 4)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (21, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Error.MSG_OFFSET + SmartANRPlatform_Fault_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Fault_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Fault_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Fault_Error.MSG_OFFSET + SmartANRPlatform_Fault_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Fault_Error.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Fault_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Fault.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Fault_Error.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SmartANRPlatform_Fault_Error.ReverseSmartANRPlatformErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_Fault_Error.SmartANRPlatformErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Fault_Error.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [SmartANRPlatformErrorResponseCodes, ReverseSmartANRPlatformErrorResponseCodes])\
    ]

Messaging.Register("SmartANRPlatform.Fault.Error", SmartANRPlatform_Fault_Error.ID, SmartANRPlatform_Fault_Error)
