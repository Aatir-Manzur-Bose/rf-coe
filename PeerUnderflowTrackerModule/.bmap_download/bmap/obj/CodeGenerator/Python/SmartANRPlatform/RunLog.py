#    obj/CodeGenerator/Python/SmartANRPlatform/RunLog.py
#    Created 27/07/2023 at 10:11:15 from:
#        Messages = messages/SmartANRPlatform/RunLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_RunLog_Set :
    ID = 107056
    SIZE = 122
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartANRDebugMessageType = OrderedDict([("debugPrintf", 0), ("debugWarn", 1), ("debugError", 2)])
    ReverseSmartANRDebugMessageType = OrderedDict([(0, "debugPrintf"), (1, "debugWarn"), (2, "debugError")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 35), ("Operator", 0)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (35, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Set.MSG_OFFSET + SmartANRPlatform_RunLog_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_RunLog_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_RunLog_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Set.MSG_OFFSET + SmartANRPlatform_RunLog_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_RunLog_Set.ID)
            self.hdr.SetDataLength(SmartANRPlatform_RunLog_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.RunLog.Set"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Getmsg_type(self, enumAsInt=0):
        """types- debugPrintf, debugWarn, debugError"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_RunLog_Set.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = SmartANRPlatform_RunLog_Set.ReverseSmartANRDebugMessageType.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(121)
    def Getmessage_string(self):
        """Debug message string"""
        count = 121
        if count > len(self.rawBuffer())-(SmartANRPlatform_RunLog_Set.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_RunLog_Set.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_RunLog_Set.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def Setmsg_type(self, value):
        """types- debugPrintf, debugWarn, debugError"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_RunLog_Set.SmartANRDebugMessageType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_RunLog_Set.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(121)
    def Setmessage_string(self, value):
        """Debug message string"""
        tmp = value.encode('utf-8')
        struct.pack_into('121s', self.rawBuffer(), SmartANRPlatform_RunLog_Set.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="msg_type",type="enumeration",units="",minVal="0",maxVal="255",description="types- debugPrintf, debugWarn, debugError",get=Getmsg_type,set=Setmsg_type,count=1, bitfieldInfo = [], enum = [SmartANRDebugMessageType, ReverseSmartANRDebugMessageType]),\
        FieldInfo(name="message_string",type="string",units="ASCII",minVal="0",maxVal="255",description="Debug message string",get=Getmessage_string,set=Setmessage_string,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.RunLog.Set", SmartANRPlatform_RunLog_Set.ID, SmartANRPlatform_RunLog_Set)
#    obj/CodeGenerator/Python/SmartANRPlatform/RunLog.py
#    Created 27/07/2023 at 10:11:15 from:
#        Messages = messages/SmartANRPlatform/RunLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_RunLog_Get :
    ID = 107057
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 35), ("Operator", 1)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (35, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Get.MSG_OFFSET + SmartANRPlatform_RunLog_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_RunLog_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_RunLog_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Get.MSG_OFFSET + SmartANRPlatform_RunLog_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_RunLog_Get.ID)
            self.hdr.SetDataLength(SmartANRPlatform_RunLog_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.RunLog.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("SmartANRPlatform.RunLog.Get", SmartANRPlatform_RunLog_Get.ID, SmartANRPlatform_RunLog_Get)
#    obj/CodeGenerator/Python/SmartANRPlatform/RunLog.py
#    Created 27/07/2023 at 10:11:15 from:
#        Messages = messages/SmartANRPlatform/RunLog.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_RunLog_Status :
    ID = 107059
    SIZE = 135
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 35), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (35, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Status.MSG_OFFSET + SmartANRPlatform_RunLog_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_RunLog_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_RunLog_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_RunLog_Status.MSG_OFFSET + SmartANRPlatform_RunLog_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_RunLog_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_RunLog_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.RunLog.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def Getrecords_written(self):
        """// total debug messages since reboot - will be duplicated in all records.  Only last 16 available"""
        value = struct.unpack_from('>H', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Getrecord_count(self):
        """Number of records available (duplicated in all records)"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('3')
    @msg.size('4')
    @msg.count(1)
    def Getruntime_secs(self):
        """uptime when snapshot of messages created - will be duplicated in all records - NOTE that updater timestamps wraparound after 53 seconds!"""
        value = struct.unpack_from('>L', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 3)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def Gettimestamp_secs(self):
        """uptime when debug record created - NOTE that updater timestamps wraparound after 53 seconds!"""
        value = struct.unpack_from('>L', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 7)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('11')
    @msg.size('2')
    @msg.count(1)
    def Getsequence_number(self):
        """Identifier of this message, starts at zero for first message after reboot"""
        value = struct.unpack_from('>H', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 11)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def Geterror_flags(self):
        """Errors in the RunLog subsystem - will be duplicated in all records"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 13)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetwriteMutexTakeFailure(self):
        """Set when an internal Cervelo error prevented a debug message from being logged"""
        value = (self.Geterror_flags() >> 0) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def GetreadMutexTakeFailure(self):
        """Set when an internal Cervelo error prevented assurance of log integrety - contents suspect but still reported"""
        value = (self.Geterror_flags() >> 1) & 0x1
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def Getunused(self):
        """unused"""
        value = (self.Geterror_flags() >> 2) & 0x3f
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(121)
    def Getdata(self):
        """Debug message string"""
        count = 121
        if count > len(self.rawBuffer())-(SmartANRPlatform_RunLog_Status.MSG_OFFSET + 14):
            count = len(self.rawBuffer())-(SmartANRPlatform_RunLog_Status.MSG_OFFSET + 14)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 14)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def Setrecords_written(self, value):
        """// total debug messages since reboot - will be duplicated in all records.  Only last 16 available"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def Setrecord_count(self, value):
        """Number of records available (duplicated in all records)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('3')
    @msg.size('4')
    @msg.count(1)
    def Setruntime_secs(self, value):
        """uptime when snapshot of messages created - will be duplicated in all records - NOTE that updater timestamps wraparound after 53 seconds!"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('7')
    @msg.size('4')
    @msg.count(1)
    def Settimestamp_secs(self, value):
        """uptime when debug record created - NOTE that updater timestamps wraparound after 53 seconds!"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 7, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('11')
    @msg.size('2')
    @msg.count(1)
    def Setsequence_number(self, value):
        """Identifier of this message, starts at zero for first message after reboot"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 11, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('13')
    @msg.size('1')
    @msg.count(1)
    def Seterror_flags(self, value):
        """Errors in the RunLog subsystem - will be duplicated in all records"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 13, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetwriteMutexTakeFailure(self, value):
        """Set when an internal Cervelo error prevented a debug message from being logged"""
        tmp = min(max(value, 0), 1)
        self.Seterror_flags((self.Geterror_flags() & ~(0x1 << 0)) | ((tmp & 0x1) << 0))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('1')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def SetreadMutexTakeFailure(self, value):
        """Set when an internal Cervelo error prevented assurance of log integrety - contents suspect but still reported"""
        tmp = min(max(value, 0), 1)
        self.Seterror_flags((self.Geterror_flags() & ~(0x1 << 1)) | ((tmp & 0x1) << 1))
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('63')
    @msg.offset('13')
    @msg.size('0')
    @msg.count(1)
    def Setunused(self, value):
        """unused"""
        tmp = min(max(value, 0), 63)
        self.Seterror_flags((self.Geterror_flags() & ~(0x3f << 2)) | ((tmp & 0x3f) << 2))
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('14')
    @msg.size('1')
    @msg.count(121)
    def Setdata(self, value):
        """Debug message string"""
        tmp = value.encode('utf-8')
        struct.pack_into('121s', self.rawBuffer(), SmartANRPlatform_RunLog_Status.MSG_OFFSET + 14, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="records_written",type="int",units="",minVal="0",maxVal="65535",description="// total debug messages since reboot - will be duplicated in all records.  Only last 16 available",get=Getrecords_written,set=Setrecords_written,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="record_count",type="int",units="",minVal="0",maxVal="255",description="Number of records available (duplicated in all records)",get=Getrecord_count,set=Setrecord_count,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="runtime_secs",type="int",units="",minVal="0",maxVal="4294967295",description="uptime when snapshot of messages created - will be duplicated in all records - NOTE that updater timestamps wraparound after 53 seconds!",get=Getruntime_secs,set=Setruntime_secs,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="timestamp_secs",type="int",units="",minVal="0",maxVal="4294967295",description="uptime when debug record created - NOTE that updater timestamps wraparound after 53 seconds!",get=Gettimestamp_secs,set=Settimestamp_secs,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="sequence_number",type="int",units="",minVal="0",maxVal="65535",description="Identifier of this message, starts at zero for first message after reboot",get=Getsequence_number,set=Setsequence_number,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="error_flags",type="int",units="",minVal="0",maxVal="255",description="Errors in the RunLog subsystem - will be duplicated in all records",get=Geterror_flags,set=Seterror_flags,count=1, bitfieldInfo = [\
            BitFieldInfo(name="writeMutexTakeFailure",type="int",units="",minVal="0",maxVal="1",description="Set when an internal Cervelo error prevented a debug message from being logged",get=GetwriteMutexTakeFailure,set=SetwriteMutexTakeFailure, enum = []),\
            BitFieldInfo(name="readMutexTakeFailure",type="int",units="",minVal="0",maxVal="1",description="Set when an internal Cervelo error prevented assurance of log integrety - contents suspect but still reported",get=GetreadMutexTakeFailure,set=SetreadMutexTakeFailure, enum = []),\
            BitFieldInfo(name="unused",type="int",units="",minVal="0",maxVal="63",description="unused",get=Getunused,set=Setunused, enum = [])], enum = []),\
        FieldInfo(name="data",type="string",units="ASCII",minVal="0",maxVal="255",description="Debug message string",get=Getdata,set=Setdata,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.RunLog.Status", SmartANRPlatform_RunLog_Status.ID, SmartANRPlatform_RunLog_Status)
