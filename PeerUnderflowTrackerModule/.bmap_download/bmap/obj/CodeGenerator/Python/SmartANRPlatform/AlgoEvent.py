#    obj/CodeGenerator/Python/SmartANRPlatform/AlgoEvent.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/AlgoEvent.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_AlgoEvent_Status :
    ID = 107171
    SIZE = 248
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 42), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (42, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + SmartANRPlatform_AlgoEvent_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_AlgoEvent_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_AlgoEvent_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + SmartANRPlatform_AlgoEvent_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_AlgoEvent_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_AlgoEvent_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.AlgoEvent.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """BSC identifier"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Algorithm name"""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(30)
    def Getevent_name(self):
        """Event name"""
        count = 30
        if count > len(self.rawBuffer())-(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 17):
            count = len(self.rawBuffer())-(SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 17)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 17)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('47')
    @msg.size('1')
    @msg.count(1)
    def Getlength(self):
        """Data length max 200"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 47)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('48')
    @msg.size('1')
    @msg.count(200)
    def Getdata(self, idx):
        """data - meaning depends on individual algorithm"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 48+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """BSC identifier"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Algorithm name"""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(30)
    def Setevent_name(self, value):
        """Event name"""
        tmp = value.encode('utf-8')
        struct.pack_into('30s', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('47')
    @msg.size('1')
    @msg.count(1)
    def Setlength(self, value):
        """Data length max 200"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 47, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('48')
    @msg.size('1')
    @msg.count(200)
    def Setdata(self, value, idx):
        """data - meaning depends on individual algorithm"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_AlgoEvent_Status.MSG_OFFSET + 48+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="BSC identifier",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Algorithm name",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="event_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Event name",get=Getevent_name,set=Setevent_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="length",type="int",units="",minVal="0",maxVal="255",description="Data length max 200",get=Getlength,set=Setlength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on individual algorithm",get=Getdata,set=Setdata,count=200, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.AlgoEvent.Status", SmartANRPlatform_AlgoEvent_Status.ID, SmartANRPlatform_AlgoEvent_Status)
