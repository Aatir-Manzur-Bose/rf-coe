#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_Get :
    ID = 106929
    SIZE = 49
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 1)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + SmartANRPlatform_Algorithm_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + SmartANRPlatform_Algorithm_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_Get.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.Get"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm to get data from."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Getparameter_name(self):
        """Name of algo parameter to access"""
        count = 32
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 17):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 17)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 17)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm to get data from."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Setparameter_name(self, value):
        """Name of algo parameter to access"""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), SmartANRPlatform_Algorithm_Get.MSG_OFFSET + 17, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm to get data from.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="parameter_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algo parameter to access",get=Getparameter_name,set=Setparameter_name,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.Get", SmartANRPlatform_Algorithm_Get.ID, SmartANRPlatform_Algorithm_Get)
#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_SetGet :
    ID = 106930
    SIZE = 250
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 2)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + SmartANRPlatform_Algorithm_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + SmartANRPlatform_Algorithm_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_SetGet.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.SetGet"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm to write data to."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Getparameter_name(self):
        """Name of algo parameter to access"""
        count = 32
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 17):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 17)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 17)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('200')
    @msg.offset('49')
    @msg.size('1')
    @msg.count(1)
    def Getbytecnt(self):
        """how many bytes to write"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 49)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('50')
    @msg.size('1')
    @msg.count(200)
    def Getdata(self, idx):
        """data - meaning depends on target parameter."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 50+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm to write data to."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Setparameter_name(self, value):
        """Name of algo parameter to access"""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('200')
    @msg.offset('49')
    @msg.size('1')
    @msg.count(1)
    def Setbytecnt(self, value):
        """how many bytes to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 49, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('50')
    @msg.size('1')
    @msg.count(200)
    def Setdata(self, value, idx):
        """data - meaning depends on target parameter."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_SetGet.MSG_OFFSET + 50+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm to write data to.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="parameter_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algo parameter to access",get=Getparameter_name,set=Setparameter_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="bytecnt",type="int",units="",minVal="0",maxVal="200",description="how many bytes to write",get=Getbytecnt,set=Setbytecnt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on target parameter.",get=Getdata,set=Setdata,count=200, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.SetGet", SmartANRPlatform_Algorithm_SetGet.ID, SmartANRPlatform_Algorithm_SetGet)
#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_Status :
    ID = 106931
    SIZE = 218
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Status.MSG_OFFSET + SmartANRPlatform_Algorithm_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Status.MSG_OFFSET + SmartANRPlatform_Algorithm_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def Getlength(self):
        """Number of bytes in response."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 17)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(200)
    def Getdata(self, idx):
        """data - meaning depends on target parameter."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 18+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def Setlength(self, value):
        """Number of bytes in response."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('18')
    @msg.size('1')
    @msg.count(200)
    def Setdata(self, value, idx):
        """data - meaning depends on target parameter."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Status.MSG_OFFSET + 18+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="length",type="int",units="",minVal="0",maxVal="255",description="Number of bytes in response.",get=Getlength,set=Setlength,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on target parameter.",get=Getdata,set=Setdata,count=200, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.Status", SmartANRPlatform_Algorithm_Status.ID, SmartANRPlatform_Algorithm_Status)
#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_Error :
    ID = 106932
    SIZE = 18
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartANRPlatformErrorResponseCodes = OrderedDict([("Length", 1), ("Checksum", 2), ("InvalidData", 3), ("RunTime", 4), ("Timeout", 5), ("InvalidState", 6), ("Verify", 7)])
    ReverseSmartANRPlatformErrorResponseCodes = OrderedDict([(1, "Length"), (2, "Checksum"), (3, "InvalidData"), (4, "RunTime"), (5, "Timeout"), (6, "InvalidState"), (7, "Verify")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 4)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (4, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Error.MSG_OFFSET + SmartANRPlatform_Algorithm_Error.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_Error.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_Error.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Error.MSG_OFFSET + SmartANRPlatform_Algorithm_Error.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_Error.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_Error.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.Error"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def GetErrorCode(self, enumAsInt=0):
        """"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 17)[0]
        if not enumAsInt:
            value = SmartANRPlatform_Algorithm_Error.ReverseSmartANRPlatformErrorResponseCodes.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(1)
    def SetErrorCode(self, value):
        """"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_Algorithm_Error.SmartANRPlatformErrorResponseCodes.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Error.MSG_OFFSET + 17, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="ErrorCode",type="enumeration",units="",minVal="0",maxVal="255",description="",get=GetErrorCode,set=SetErrorCode,count=1, bitfieldInfo = [], enum = [SmartANRPlatformErrorResponseCodes, ReverseSmartANRPlatformErrorResponseCodes])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.Error", SmartANRPlatform_Algorithm_Error.ID, SmartANRPlatform_Algorithm_Error)
#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_Start :
    ID = 106933
    SIZE = 250
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 5)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + SmartANRPlatform_Algorithm_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + SmartANRPlatform_Algorithm_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_Start.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.Start"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm to write data to."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Getactivity_name(self):
        """Name of algo parameter to access"""
        count = 32
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 17):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 17)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 17)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('200')
    @msg.offset('49')
    @msg.size('1')
    @msg.count(1)
    def Getbytecnt(self):
        """how many bytes to write"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 49)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('50')
    @msg.size('1')
    @msg.count(200)
    def Getdata(self, idx):
        """data - meaning depends on target parameter."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 50+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm to write data to."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(32)
    def Setactivity_name(self, value):
        """Name of algo parameter to access"""
        tmp = value.encode('utf-8')
        struct.pack_into('32s', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 17, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('200')
    @msg.offset('49')
    @msg.size('1')
    @msg.count(1)
    def Setbytecnt(self, value):
        """how many bytes to write"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 49, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('50')
    @msg.size('1')
    @msg.count(200)
    def Setdata(self, value, idx):
        """data - meaning depends on target parameter."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Start.MSG_OFFSET + 50+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm to write data to.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="activity_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algo parameter to access",get=Getactivity_name,set=Setactivity_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="bytecnt",type="int",units="",minVal="0",maxVal="200",description="how many bytes to write",get=Getbytecnt,set=Setbytecnt,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="data",type="int",units="",minVal="0",maxVal="255",description="data - meaning depends on target parameter.",get=Getdata,set=Setdata,count=200, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.Start", SmartANRPlatform_Algorithm_Start.ID, SmartANRPlatform_Algorithm_Start)
#    obj/CodeGenerator/Python/SmartANRPlatform/Algorithm.py
#    Created 27/07/2023 at 10:11:10 from:
#        Messages = messages/SmartANRPlatform/Algorithm.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_Algorithm_Result :
    ID = 106934
    SIZE = 33
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 27), ("Operator", 6)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (27, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + SmartANRPlatform_Algorithm_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_Algorithm_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_Algorithm_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + SmartANRPlatform_Algorithm_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_Algorithm_Result.ID)
            self.hdr.SetDataLength(SmartANRPlatform_Algorithm_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.Algorithm.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Getalgorithm_name(self):
        """Name of algorithm."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(16)
    def Getactivity_name(self):
        """Name of activity."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 17):
            count = len(self.rawBuffer())-(SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 17)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 17)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """Some algos may have duplicate managers running for each peregrine.  This is to id them individually."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(16)
    def Setalgorithm_name(self, value):
        """Name of algorithm."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 1, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('17')
    @msg.size('1')
    @msg.count(16)
    def Setactivity_name(self, value):
        """Name of activity."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_Algorithm_Result.MSG_OFFSET + 17, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="Some algos may have duplicate managers running for each peregrine.  This is to id them individually.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="algorithm_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of algorithm.",get=Getalgorithm_name,set=Setalgorithm_name,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="activity_name",type="string",units="ASCII",minVal="0",maxVal="255",description="Name of activity.",get=Getactivity_name,set=Setactivity_name,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.Algorithm.Result", SmartANRPlatform_Algorithm_Result.ID, SmartANRPlatform_Algorithm_Result)
