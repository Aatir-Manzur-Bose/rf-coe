#    obj/CodeGenerator/Python/SmartANRPlatform/FirmwareVersion.py
#    Created 27/07/2023 at 10:11:14 from:
#        Messages = messages/SmartANRPlatform/FirmwareVersion.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_FirmwareVersion_Get :
    ID = 106913
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 26), ("Operator", 1)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (26, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_FirmwareVersion_Get.MSG_OFFSET + SmartANRPlatform_FirmwareVersion_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_FirmwareVersion_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_FirmwareVersion_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_FirmwareVersion_Get.MSG_OFFSET + SmartANRPlatform_FirmwareVersion_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_FirmwareVersion_Get.ID)
            self.hdr.SetDataLength(SmartANRPlatform_FirmwareVersion_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.FirmwareVersion.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("SmartANRPlatform.FirmwareVersion.Get", SmartANRPlatform_FirmwareVersion_Get.ID, SmartANRPlatform_FirmwareVersion_Get)
#    obj/CodeGenerator/Python/SmartANRPlatform/FirmwareVersion.py
#    Created 27/07/2023 at 10:11:14 from:
#        Messages = messages/SmartANRPlatform/FirmwareVersion.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_FirmwareVersion_Status :
    ID = 106915
    SIZE = 189
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SmartANRPlatformRdpLevel = OrderedDict([("NoProtection", 0), ("MemoryReadProtect", 1), ("FullChipProtection", 2)])
    ReverseSmartANRPlatformRdpLevel = OrderedDict([(0, "NoProtection"), (1, "MemoryReadProtect"), (2, "FullChipProtection")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 26), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (26, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + SmartANRPlatform_FirmwareVersion_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_FirmwareVersion_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_FirmwareVersion_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + SmartANRPlatform_FirmwareVersion_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_FirmwareVersion_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_FirmwareVersion_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.FirmwareVersion.Status"
    # Accessors
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def GetProductName(self):
        """The name of the product (UTF-8 String). The value is fixed-width and has padding 0s."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 0):
            count = len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 0)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 0)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(120)
    def GetVersion(self):
        """Firmware Version of the main application (UTF-8 String). The value is fixed-width and has padding 0s."""
        count = 120
        if count > len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 16):
            count = len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 16)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 16)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('136')
    @msg.size('1')
    @msg.count(16)
    def GetUpdaterVersion(self):
        """Firmware version of the Updater (UTF-8 String). The value is fixed-width and has padding 0s."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 136):
            count = len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 136)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 136)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('152')
    @msg.size('1')
    @msg.count(16)
    def GetBootloaderVersion(self):
        """Firmware version of the Bootloader (UTF-8 String). The value is fixed-width and has padding 0s."""
        count = 16
        if count > len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 152):
            count = len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 152)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 152)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('168')
    @msg.size('1')
    @msg.count(20)
    def GetDspVersion(self):
        """Firmware version of the DSP (UTF-8 String). The value is fixed-width and has padding 0s."""
        count = 20
        if count > len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 168):
            count = len(self.rawBuffer())-(SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 168)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 168)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('188')
    @msg.size('1')
    @msg.count(1)
    def GetRdpLevel(self, enumAsInt=0):
        """RDP level set on Cervelo"""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 188)[0]
        if not enumAsInt:
            value = SmartANRPlatform_FirmwareVersion_Status.ReverseSmartANRPlatformRdpLevel.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def SetProductName(self, value):
        """The name of the product (UTF-8 String). The value is fixed-width and has padding 0s."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('16')
    @msg.size('1')
    @msg.count(120)
    def SetVersion(self, value):
        """Firmware Version of the main application (UTF-8 String). The value is fixed-width and has padding 0s."""
        tmp = value.encode('utf-8')
        struct.pack_into('120s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 16, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('136')
    @msg.size('1')
    @msg.count(16)
    def SetUpdaterVersion(self, value):
        """Firmware version of the Updater (UTF-8 String). The value is fixed-width and has padding 0s."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 136, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('152')
    @msg.size('1')
    @msg.count(16)
    def SetBootloaderVersion(self, value):
        """Firmware version of the Bootloader (UTF-8 String). The value is fixed-width and has padding 0s."""
        tmp = value.encode('utf-8')
        struct.pack_into('16s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 152, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('168')
    @msg.size('1')
    @msg.count(20)
    def SetDspVersion(self, value):
        """Firmware version of the DSP (UTF-8 String). The value is fixed-width and has padding 0s."""
        tmp = value.encode('utf-8')
        struct.pack_into('20s', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 168, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('188')
    @msg.size('1')
    @msg.count(1)
    def SetRdpLevel(self, value):
        """RDP level set on Cervelo"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_FirmwareVersion_Status.SmartANRPlatformRdpLevel.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_FirmwareVersion_Status.MSG_OFFSET + 188, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="ProductName",type="string",units="ASCII",minVal="0",maxVal="255",description="The name of the product (UTF-8 String). The value is fixed-width and has padding 0s.",get=GetProductName,set=SetProductName,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Version",type="string",units="ASCII",minVal="0",maxVal="255",description="Firmware Version of the main application (UTF-8 String). The value is fixed-width and has padding 0s.",get=GetVersion,set=SetVersion,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="UpdaterVersion",type="string",units="ASCII",minVal="0",maxVal="255",description="Firmware version of the Updater (UTF-8 String). The value is fixed-width and has padding 0s.",get=GetUpdaterVersion,set=SetUpdaterVersion,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BootloaderVersion",type="string",units="ASCII",minVal="0",maxVal="255",description="Firmware version of the Bootloader (UTF-8 String). The value is fixed-width and has padding 0s.",get=GetBootloaderVersion,set=SetBootloaderVersion,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DspVersion",type="string",units="ASCII",minVal="0",maxVal="255",description="Firmware version of the DSP (UTF-8 String). The value is fixed-width and has padding 0s.",get=GetDspVersion,set=SetDspVersion,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="RdpLevel",type="enumeration",units="",minVal="0",maxVal="255",description="RDP level set on Cervelo",get=GetRdpLevel,set=SetRdpLevel,count=1, bitfieldInfo = [], enum = [SmartANRPlatformRdpLevel, ReverseSmartANRPlatformRdpLevel])\
    ]

Messaging.Register("SmartANRPlatform.FirmwareVersion.Status", SmartANRPlatform_FirmwareVersion_Status.ID, SmartANRPlatform_FirmwareVersion_Status)
