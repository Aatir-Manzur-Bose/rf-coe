#    obj/CodeGenerator/Python/SmartANRPlatform/BSCCalAdjInfo.py
#    Created 27/07/2023 at 10:11:11 from:
#        Messages = messages/SmartANRPlatform/BSCCalAdjInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_BSCCalAdjInfo_Get :
    ID = 107089
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 37), ("Operator", 1)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (37, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_BSCCalAdjInfo_Get.MSG_OFFSET + SmartANRPlatform_BSCCalAdjInfo_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_BSCCalAdjInfo_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_BSCCalAdjInfo_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_BSCCalAdjInfo_Get.MSG_OFFSET + SmartANRPlatform_BSCCalAdjInfo_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_BSCCalAdjInfo_Get.ID)
            self.hdr.SetDataLength(SmartANRPlatform_BSCCalAdjInfo_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.BSCCalAdjInfo.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("SmartANRPlatform.BSCCalAdjInfo.Get", SmartANRPlatform_BSCCalAdjInfo_Get.ID, SmartANRPlatform_BSCCalAdjInfo_Get)
#    obj/CodeGenerator/Python/SmartANRPlatform/BSCCalAdjInfo.py
#    Created 27/07/2023 at 10:11:11 from:
#        Messages = messages/SmartANRPlatform/BSCCalAdjInfo.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class SmartANRPlatform_BSCCalAdjInfo_Status :
    ID = 107091
    SIZE = 54
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    BSCCalAdjType = OrderedDict([("Removed", 0), ("FDSP_ADJ", 1), ("SDSP_ADJ", 2)])
    ReverseBSCCalAdjType = OrderedDict([(0, "Removed"), (1, "FDSP_ADJ"), (2, "SDSP_ADJ")])
    IDs = OrderedDict([("FunctionBlock", 26), ("Function", 37), ("Operator", 3)])
    ReverseIDs = OrderedDict([(26, "FunctionBlock"), (37, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + SmartANRPlatform_BSCCalAdjInfo_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, SmartANRPlatform_BSCCalAdjInfo_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, SmartANRPlatform_BSCCalAdjInfo_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + SmartANRPlatform_BSCCalAdjInfo_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(SmartANRPlatform_BSCCalAdjInfo_Status.ID)
            self.hdr.SetDataLength(SmartANRPlatform_BSCCalAdjInfo_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "SmartANRPlatform.BSCCalAdjInfo.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetIndex(self):
        """Index of the Cal/Adj table."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetBSCID(self):
        """ID of BSC to access."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetCalAdjType(self, enumAsInt=0):
        """Cal/Adj Type."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 2)[0]
        if not enumAsInt:
            value = SmartANRPlatform_BSCCalAdjInfo_Status.ReverseBSCCalAdjType.get(value, value)
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(30)
    def GetSymbolicName(self):
        """Cal/Adj name."""
        count = 30
        if count > len(self.rawBuffer())-(SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 3):
            count = len(self.rawBuffer())-(SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 3)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 3)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def GetCoeffCount(self):
        """Total count of Cal/Adj coefficients."""
        value = struct.unpack_from('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 33)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('34')
    @msg.size('4')
    @msg.count(5)
    def GetCoefficientArray(self, idx):
        """Cal/Adj parameter coefficients."""
        value = struct.unpack_from('>L', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 34+idx*4)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetIndex(self, value):
        """Index of the Cal/Adj table."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetBSCID(self, value):
        """ID of BSC to access."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('Enum')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetCalAdjType(self, value):
        """Cal/Adj Type."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = SmartANRPlatform_BSCCalAdjInfo_Status.BSCCalAdjType.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(30)
    def SetSymbolicName(self, value):
        """Cal/Adj name."""
        tmp = value.encode('utf-8')
        struct.pack_into('30s', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 3, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def SetCoeffCount(self, value):
        """Total count of Cal/Adj coefficients."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 33, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('34')
    @msg.size('4')
    @msg.count(5)
    def SetCoefficientArray(self, value, idx):
        """Cal/Adj parameter coefficients."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), SmartANRPlatform_BSCCalAdjInfo_Status.MSG_OFFSET + 34+idx*4, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Index",type="int",units="",minVal="0",maxVal="255",description="Index of the Cal/Adj table.",get=GetIndex,set=SetIndex,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="BSCID",type="int",units="",minVal="0",maxVal="255",description="ID of BSC to access.",get=GetBSCID,set=SetBSCID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CalAdjType",type="enumeration",units="Enum",minVal="0",maxVal="255",description="Cal/Adj Type.",get=GetCalAdjType,set=SetCalAdjType,count=1, bitfieldInfo = [], enum = [BSCCalAdjType, ReverseBSCCalAdjType]),\
        FieldInfo(name="SymbolicName",type="string",units="ASCII",minVal="0",maxVal="255",description="Cal/Adj name.",get=GetSymbolicName,set=SetSymbolicName,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoeffCount",type="int",units="",minVal="0",maxVal="255",description="Total count of Cal/Adj coefficients.",get=GetCoeffCount,set=SetCoeffCount,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="CoefficientArray",type="int",units="",minVal="0",maxVal="4294967295",description="Cal/Adj parameter coefficients.",get=GetCoefficientArray,set=SetCoefficientArray,count=5, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("SmartANRPlatform.BSCCalAdjInfo.Status", SmartANRPlatform_BSCCalAdjInfo_Status.ID, SmartANRPlatform_BSCCalAdjInfo_Status)
