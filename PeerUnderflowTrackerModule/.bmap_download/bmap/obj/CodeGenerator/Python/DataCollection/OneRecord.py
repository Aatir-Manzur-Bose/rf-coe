#    obj/CodeGenerator/Python/DataCollection/OneRecord.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/OneRecord.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_OneRecord_Start :
    ID = 53365
    SIZE = 2
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 7), ("Operator", 5)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (7, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_OneRecord_Start.MSG_OFFSET + DataCollection_OneRecord_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_OneRecord_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_OneRecord_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_OneRecord_Start.MSG_OFFSET + DataCollection_OneRecord_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_OneRecord_Start.ID)
            self.hdr.SetDataLength(DataCollection_OneRecord_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.OneRecord.Start"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetAllRecords(self):
        """If true, the product is directed to consider all available records for sending. The mobile app would normally set AllRecords=false; test automation may find it useful to set AllRecords=true"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetAutoConfirm(self):
        """If true, the .Confirmation is implicit; the product clears the record after sending"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Start.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetAllRecords(self, value):
        """If true, the product is directed to consider all available records for sending. The mobile app would normally set AllRecords=false; test automation may find it useful to set AllRecords=true"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Start.MSG_OFFSET + 0, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetAutoConfirm(self, value):
        """If true, the .Confirmation is implicit; the product clears the record after sending"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Start.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="AllRecords",type="int",units="Boolean",minVal="0",maxVal="255",description="If true, the product is directed to consider all available records for sending. The mobile app would normally set AllRecords=false; test automation may find it useful to set AllRecords=true",get=GetAllRecords,set=SetAllRecords,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="AutoConfirm",type="int",units="Boolean",minVal="0",maxVal="255",description="If true, the .Confirmation is implicit; the product clears the record after sending",get=GetAutoConfirm,set=SetAutoConfirm,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.OneRecord.Start", DataCollection_OneRecord_Start.ID, DataCollection_OneRecord_Start)
#    obj/CodeGenerator/Python/DataCollection/OneRecord.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/OneRecord.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_OneRecord_Processing :
    ID = 53367
    SIZE = 91
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 7), ("Operator", 7)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (7, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_OneRecord_Processing.MSG_OFFSET + DataCollection_OneRecord_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_OneRecord_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_OneRecord_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_OneRecord_Processing.MSG_OFFSET + DataCollection_OneRecord_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_OneRecord_Processing.ID)
            self.hdr.SetDataLength(DataCollection_OneRecord_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.OneRecord.Processing"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def GetTotalSize(self):
        """The total number of bytes in the reassembled record"""
        value = struct.unpack_from('>L', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(16)
    def GetGUID(self, idx):
        """GUID of the component, Record is originated from."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 4+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def GetSessionID(self):
        """Session ID of data collection when the record is saved to flash, Record is originated from."""
        value = struct.unpack_from('>H', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 20)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def GetTimeStamp(self):
        """Timestamp of the record when it was saved to flash, Record is originated from."""
        value = struct.unpack_from('>L', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('26')
    @msg.size('1')
    @msg.count(1)
    def GetSizeOfSchemaID(self):
        """Size of the SchemaID field in the record"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 26)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('27')
    @msg.size('1')
    @msg.count(64)
    def GetSchemaID(self):
        """Variable length UTF-8 encoded schema identifier for deserializing the record"""
        count = 64
        if count > len(self.rawBuffer())-(DataCollection_OneRecord_Processing.MSG_OFFSET + 27):
            count = len(self.rawBuffer())-(DataCollection_OneRecord_Processing.MSG_OFFSET + 27)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 27)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('0')
    @msg.size('4')
    @msg.count(1)
    def SetTotalSize(self, value):
        """The total number of bytes in the reassembled record"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 0, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('4')
    @msg.size('1')
    @msg.count(16)
    def SetGUID(self, value, idx):
        """GUID of the component, Record is originated from."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 4+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('20')
    @msg.size('2')
    @msg.count(1)
    def SetSessionID(self, value):
        """Session ID of data collection when the record is saved to flash, Record is originated from."""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 20, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('22')
    @msg.size('4')
    @msg.count(1)
    def SetTimeStamp(self, value):
        """Timestamp of the record when it was saved to flash, Record is originated from."""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 22, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('26')
    @msg.size('1')
    @msg.count(1)
    def SetSizeOfSchemaID(self, value):
        """Size of the SchemaID field in the record"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 26, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('27')
    @msg.size('1')
    @msg.count(64)
    def SetSchemaID(self, value):
        """Variable length UTF-8 encoded schema identifier for deserializing the record"""
        tmp = value.encode('utf-8')
        struct.pack_into('64s', self.rawBuffer(), DataCollection_OneRecord_Processing.MSG_OFFSET + 27, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="TotalSize",type="int",units="",minVal="0",maxVal="4294967295",description="The total number of bytes in the reassembled record",get=GetTotalSize,set=SetTotalSize,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="GUID",type="int",units="hex",minVal="0",maxVal="255",description="GUID of the component, Record is originated from.",get=GetGUID,set=SetGUID,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SessionID",type="int",units="",minVal="0",maxVal="65535",description="Session ID of data collection when the record is saved to flash, Record is originated from.",get=GetSessionID,set=SetSessionID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeStamp",type="int",units="ms",minVal="0",maxVal="4294967295",description="Timestamp of the record when it was saved to flash, Record is originated from.",get=GetTimeStamp,set=SetTimeStamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SizeOfSchemaID",type="int",units="",minVal="0",maxVal="255",description="Size of the SchemaID field in the record",get=GetSizeOfSchemaID,set=SetSizeOfSchemaID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SchemaID",type="string",units="ASCII",minVal="0",maxVal="255",description="Variable length UTF-8 encoded schema identifier for deserializing the record",get=GetSchemaID,set=SetSchemaID,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.OneRecord.Processing", DataCollection_OneRecord_Processing.ID, DataCollection_OneRecord_Processing)
#    obj/CodeGenerator/Python/DataCollection/OneRecord.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/OneRecord.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_OneRecord_Status :
    ID = 53363
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 7), ("Operator", 3)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (7, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_OneRecord_Status.MSG_OFFSET + DataCollection_OneRecord_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_OneRecord_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_OneRecord_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_OneRecord_Status.MSG_OFFSET + DataCollection_OneRecord_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_OneRecord_Status.ID)
            self.hdr.SetDataLength(DataCollection_OneRecord_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.OneRecord.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def GetRecordSegmentNumber(self):
        """Segment ID, the number of this segment in Record, indexed from 0"""
        value = struct.unpack_from('>H', self.rawBuffer(), DataCollection_OneRecord_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(253)
    def GetData(self, idx):
        """Record segment, optionally encrypted using AES-128 with PKCS #7 padding"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Status.MSG_OFFSET + 2+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('0')
    @msg.size('2')
    @msg.count(1)
    def SetRecordSegmentNumber(self, value):
        """Segment ID, the number of this segment in Record, indexed from 0"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), DataCollection_OneRecord_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(253)
    def SetData(self, value, idx):
        """Record segment, optionally encrypted using AES-128 with PKCS #7 padding"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Status.MSG_OFFSET + 2+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="RecordSegmentNumber",type="int",units="",minVal="0",maxVal="65535",description="Segment ID, the number of this segment in Record, indexed from 0",get=GetRecordSegmentNumber,set=SetRecordSegmentNumber,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data",type="int",units="",minVal="0",maxVal="255",description="Record segment, optionally encrypted using AES-128 with PKCS #7 padding",get=GetData,set=SetData,count=253, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.OneRecord.Status", DataCollection_OneRecord_Status.ID, DataCollection_OneRecord_Status)
#    obj/CodeGenerator/Python/DataCollection/OneRecord.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/OneRecord.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_OneRecord_Result :
    ID = 53366
    SIZE = 140
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    SegmentsResultPayload = OrderedDict([("RECORDS_NOT_AVAILABLE", 0), ("MORE_RECORDS_AVAILABLE", 1), ("LAST_AVAILABLE_RECORD", 2)])
    ReverseSegmentsResultPayload = OrderedDict([(0, "RECORDS_NOT_AVAILABLE"), (1, "MORE_RECORDS_AVAILABLE"), (2, "LAST_AVAILABLE_RECORD")])
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 7), ("Operator", 6)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (7, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_OneRecord_Result.MSG_OFFSET + DataCollection_OneRecord_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_OneRecord_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_OneRecord_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_OneRecord_Result.MSG_OFFSET + DataCollection_OneRecord_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_OneRecord_Result.ID)
            self.hdr.SetDataLength(DataCollection_OneRecord_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.OneRecord.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetSegmentsResultPayload(self, enumAsInt=0):
        """Information about the just-finished OneRecord transaction."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = DataCollection_OneRecord_Result.ReverseSegmentsResultPayload.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def GetHash(self, idx):
        """The SHA-256 hash of the reassembled record (prior to any decryption)"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 1+idx*1)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def GetEncrypted(self):
        """True if the record is encrypted"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 33)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def GetSigned(self):
        """True if the record is signed"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 34)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('35')
    @msg.size('1')
    @msg.count(1)
    def GetSizeOfSignature(self):
        """Size of actual signature length, signature length generated by the device"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 35)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(104)
    def GetSignature(self, idx):
        """ECDSA signature length varies between 102 and 104 bytes."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 36+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetSegmentsResultPayload(self, value):
        """Information about the just-finished OneRecord transaction."""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = DataCollection_OneRecord_Result.SegmentsResultPayload.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(32)
    def SetHash(self, value, idx):
        """The SHA-256 hash of the reassembled record (prior to any decryption)"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 1+idx*1, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('33')
    @msg.size('1')
    @msg.count(1)
    def SetEncrypted(self, value):
        """True if the record is encrypted"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 33, tmp)
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('34')
    @msg.size('1')
    @msg.count(1)
    def SetSigned(self, value):
        """True if the record is signed"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 34, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('35')
    @msg.size('1')
    @msg.count(1)
    def SetSizeOfSignature(self, value):
        """Size of actual signature length, signature length generated by the device"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 35, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('36')
    @msg.size('1')
    @msg.count(104)
    def SetSignature(self, value, idx):
        """ECDSA signature length varies between 102 and 104 bytes."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_OneRecord_Result.MSG_OFFSET + 36+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="SegmentsResultPayload",type="enumeration",units="",minVal="0",maxVal="255",description="Information about the just-finished OneRecord transaction.",get=GetSegmentsResultPayload,set=SetSegmentsResultPayload,count=1, bitfieldInfo = [], enum = [SegmentsResultPayload, ReverseSegmentsResultPayload]),\
        FieldInfo(name="Hash",type="int",units="",minVal="0",maxVal="255",description="The SHA-256 hash of the reassembled record (prior to any decryption)",get=GetHash,set=SetHash,count=32, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Encrypted",type="int",units="Boolean",minVal="0",maxVal="255",description="True if the record is encrypted",get=GetEncrypted,set=SetEncrypted,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Signed",type="int",units="Boolean",minVal="0",maxVal="255",description="True if the record is signed",get=GetSigned,set=SetSigned,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SizeOfSignature",type="int",units="",minVal="0",maxVal="255",description="Size of actual signature length, signature length generated by the device",get=GetSizeOfSignature,set=SetSizeOfSignature,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Signature",type="int",units="hex",minVal="0",maxVal="255",description="ECDSA signature length varies between 102 and 104 bytes.",get=GetSignature,set=SetSignature,count=104, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.OneRecord.Result", DataCollection_OneRecord_Result.ID, DataCollection_OneRecord_Result)
