#    obj/CodeGenerator/Python/DataCollection/Confirmation.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Confirmation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Confirmation_Start :
    ID = 53381
    SIZE = 87
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 8), ("Operator", 5)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (8, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Confirmation_Start.MSG_OFFSET + DataCollection_Confirmation_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Confirmation_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Confirmation_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Confirmation_Start.MSG_OFFSET + DataCollection_Confirmation_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Confirmation_Start.ID)
            self.hdr.SetDataLength(DataCollection_Confirmation_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Confirmation.Start"
    # Accessors
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def GetGUID(self, idx):
        """GUID of the component, Record is originated from."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 0+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def GetSessionID(self):
        """Session ID of data collection when the record, that was sent as part of OneRecord.Processing"""
        value = struct.unpack_from('>H', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 16)[0]
        return value
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def GetTimeStamp(self):
        """Timestamp of the record when it was saved to flash, that was sent as part of OneRecord.Processing"""
        value = struct.unpack_from('>L', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 18)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def GetSizeOfSchemaID(self):
        """Size of the SchemaID field in the record"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 22)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(64)
    def GetSchemaID(self):
        """Variable length UTF-8 encoded schema identifier"""
        count = 64
        if count > len(self.rawBuffer())-(DataCollection_Confirmation_Start.MSG_OFFSET + 23):
            count = len(self.rawBuffer())-(DataCollection_Confirmation_Start.MSG_OFFSET + 23)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 23)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(16)
    def SetGUID(self, value, idx):
        """GUID of the component, Record is originated from."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 0+idx*1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('65535')
    @msg.offset('16')
    @msg.size('2')
    @msg.count(1)
    def SetSessionID(self, value):
        """Session ID of data collection when the record, that was sent as part of OneRecord.Processing"""
        tmp = min(max(value, 0), 65535)
        struct.pack_into('>H', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 16, tmp)
    
    @msg.units('ms')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('4294967295')
    @msg.offset('18')
    @msg.size('4')
    @msg.count(1)
    def SetTimeStamp(self, value):
        """Timestamp of the record when it was saved to flash, that was sent as part of OneRecord.Processing"""
        tmp = min(max(value, 0), 4294967295)
        struct.pack_into('>L', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 18, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('22')
    @msg.size('1')
    @msg.count(1)
    def SetSizeOfSchemaID(self, value):
        """Size of the SchemaID field in the record"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 22, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('23')
    @msg.size('1')
    @msg.count(64)
    def SetSchemaID(self, value):
        """Variable length UTF-8 encoded schema identifier"""
        tmp = value.encode('utf-8')
        struct.pack_into('64s', self.rawBuffer(), DataCollection_Confirmation_Start.MSG_OFFSET + 23, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="GUID",type="int",units="hex",minVal="0",maxVal="255",description="GUID of the component, Record is originated from.",get=GetGUID,set=SetGUID,count=16, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SessionID",type="int",units="",minVal="0",maxVal="65535",description="Session ID of data collection when the record, that was sent as part of OneRecord.Processing",get=GetSessionID,set=SetSessionID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="TimeStamp",type="int",units="ms",minVal="0",maxVal="4294967295",description="Timestamp of the record when it was saved to flash, that was sent as part of OneRecord.Processing",get=GetTimeStamp,set=SetTimeStamp,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SizeOfSchemaID",type="int",units="",minVal="0",maxVal="255",description="Size of the SchemaID field in the record",get=GetSizeOfSchemaID,set=SetSizeOfSchemaID,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SchemaID",type="string",units="ASCII",minVal="0",maxVal="255",description="Variable length UTF-8 encoded schema identifier",get=GetSchemaID,set=SetSchemaID,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.Confirmation.Start", DataCollection_Confirmation_Start.ID, DataCollection_Confirmation_Start)
#    obj/CodeGenerator/Python/DataCollection/Confirmation.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Confirmation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Confirmation_Processing :
    ID = 53383
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 8), ("Operator", 7)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (8, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Confirmation_Processing.MSG_OFFSET + DataCollection_Confirmation_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Confirmation_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Confirmation_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Confirmation_Processing.MSG_OFFSET + DataCollection_Confirmation_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Confirmation_Processing.ID)
            self.hdr.SetDataLength(DataCollection_Confirmation_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Confirmation.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.Confirmation.Processing", DataCollection_Confirmation_Processing.ID, DataCollection_Confirmation_Processing)
#    obj/CodeGenerator/Python/DataCollection/Confirmation.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Confirmation.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Confirmation_Result :
    ID = 53382
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 8), ("Operator", 6)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (8, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Confirmation_Result.MSG_OFFSET + DataCollection_Confirmation_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Confirmation_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Confirmation_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Confirmation_Result.MSG_OFFSET + DataCollection_Confirmation_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Confirmation_Result.ID)
            self.hdr.SetDataLength(DataCollection_Confirmation_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Confirmation.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.Confirmation.Result", DataCollection_Confirmation_Result.ID, DataCollection_Confirmation_Result)
