#    obj/CodeGenerator/Python/DataCollection/Enable.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Enable.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Enable_Set :
    ID = 53344
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 6), ("Operator", 0)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (6, "Function"), (0, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Enable_Set.MSG_OFFSET + DataCollection_Enable_Set.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Enable_Set.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Enable_Set.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Enable_Set.MSG_OFFSET + DataCollection_Enable_Set.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Enable_Set.ID)
            self.hdr.SetDataLength(DataCollection_Enable_Set.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Enable.Set"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnable(self):
        """Data collection state"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_Enable_Set.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnable(self, value):
        """Data collection state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_Enable_Set.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Enable",type="int",units="Boolean",minVal="0",maxVal="255",description="Data collection state",get=GetEnable,set=SetEnable,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.Enable.Set", DataCollection_Enable_Set.ID, DataCollection_Enable_Set)
#    obj/CodeGenerator/Python/DataCollection/Enable.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Enable.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Enable_Get :
    ID = 53345
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 6), ("Operator", 1)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (6, "Function"), (1, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Enable_Get.MSG_OFFSET + DataCollection_Enable_Get.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Enable_Get.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Enable_Get.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Enable_Get.MSG_OFFSET + DataCollection_Enable_Get.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Enable_Get.ID)
            self.hdr.SetDataLength(DataCollection_Enable_Get.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Enable.Get"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.Enable.Get", DataCollection_Enable_Get.ID, DataCollection_Enable_Get)
#    obj/CodeGenerator/Python/DataCollection/Enable.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Enable.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Enable_SetGet :
    ID = 53346
    SIZE = 65
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 6), ("Operator", 2)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (6, "Function"), (2, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Enable_SetGet.MSG_OFFSET + DataCollection_Enable_SetGet.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Enable_SetGet.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Enable_SetGet.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Enable_SetGet.MSG_OFFSET + DataCollection_Enable_SetGet.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Enable_SetGet.ID)
            self.hdr.SetDataLength(DataCollection_Enable_SetGet.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Enable.SetGet"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetEnable(self):
        """Data collection state"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_Enable_SetGet.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(64)
    def GetSchemaID(self):
        """Optional; UTF-8 encoded schema identifier; if absent, enable/disable all data collection"""
        count = 64
        if count > len(self.rawBuffer())-(DataCollection_Enable_SetGet.MSG_OFFSET + 1):
            count = len(self.rawBuffer())-(DataCollection_Enable_SetGet.MSG_OFFSET + 1)
    
        value = struct.unpack_from(str(count)+'s', self.rawBuffer(), DataCollection_Enable_SetGet.MSG_OFFSET + 1)[0]
        ascii_len = str(value).find("\\x00")
        value = str(value)[2:ascii_len]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetEnable(self, value):
        """Data collection state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_Enable_SetGet.MSG_OFFSET + 0, tmp)
    
    @msg.units('ASCII')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(64)
    def SetSchemaID(self, value):
        """Optional; UTF-8 encoded schema identifier; if absent, enable/disable all data collection"""
        tmp = value.encode('utf-8')
        struct.pack_into('64s', self.rawBuffer(), DataCollection_Enable_SetGet.MSG_OFFSET + 1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Enable",type="int",units="Boolean",minVal="0",maxVal="255",description="Data collection state",get=GetEnable,set=SetEnable,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="SchemaID",type="string",units="ASCII",minVal="0",maxVal="255",description="Optional; UTF-8 encoded schema identifier; if absent, enable/disable all data collection",get=GetSchemaID,set=SetSchemaID,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.Enable.SetGet", DataCollection_Enable_SetGet.ID, DataCollection_Enable_SetGet)
#    obj/CodeGenerator/Python/DataCollection/Enable.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/Enable.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_Enable_Status :
    ID = 53347
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 6), ("Operator", 3)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (6, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_Enable_Status.MSG_OFFSET + DataCollection_Enable_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_Enable_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_Enable_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_Enable_Status.MSG_OFFSET + DataCollection_Enable_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_Enable_Status.ID)
            self.hdr.SetDataLength(DataCollection_Enable_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.Enable.Status"
    # Accessors
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetStatus(self):
        """Data collection state"""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_Enable_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Boolean')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetStatus(self, value):
        """Data collection state"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_Enable_Status.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Status",type="int",units="Boolean",minVal="0",maxVal="255",description="Data collection state",get=GetStatus,set=SetStatus,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.Enable.Status", DataCollection_Enable_Status.ID, DataCollection_Enable_Status)
