#    obj/CodeGenerator/Python/DataCollection/AllRecords.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/AllRecords.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_AllRecords_Start :
    ID = 53285
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 2), ("Operator", 5)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (2, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_AllRecords_Start.MSG_OFFSET + DataCollection_AllRecords_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_AllRecords_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_AllRecords_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_AllRecords_Start.MSG_OFFSET + DataCollection_AllRecords_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_AllRecords_Start.ID)
            self.hdr.SetDataLength(DataCollection_AllRecords_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.AllRecords.Start"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.AllRecords.Start", DataCollection_AllRecords_Start.ID, DataCollection_AllRecords_Start)
#    obj/CodeGenerator/Python/DataCollection/AllRecords.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/AllRecords.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_AllRecords_Processing :
    ID = 53287
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 2), ("Operator", 7)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (2, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_AllRecords_Processing.MSG_OFFSET + DataCollection_AllRecords_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_AllRecords_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_AllRecords_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_AllRecords_Processing.MSG_OFFSET + DataCollection_AllRecords_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_AllRecords_Processing.ID)
            self.hdr.SetDataLength(DataCollection_AllRecords_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.AllRecords.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.AllRecords.Processing", DataCollection_AllRecords_Processing.ID, DataCollection_AllRecords_Processing)
#    obj/CodeGenerator/Python/DataCollection/AllRecords.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/AllRecords.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_AllRecords_Status :
    ID = 53283
    SIZE = 255
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 2), ("Operator", 3)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (2, "Function"), (3, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_AllRecords_Status.MSG_OFFSET + DataCollection_AllRecords_Status.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_AllRecords_Status.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_AllRecords_Status.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_AllRecords_Status.MSG_OFFSET + DataCollection_AllRecords_Status.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_AllRecords_Status.ID)
            self.hdr.SetDataLength(DataCollection_AllRecords_Status.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.AllRecords.Status"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetRecordIdentifier(self):
        """Identifier for current record stream."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def GetDataSegmentNumber(self):
        """Data segment number."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def GetFinalSegmentNumber(self):
        """Final segment number for this record."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 2)[0]
        return value
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(252)
    def GetData(self, idx):
        """N-3 bytes of data."""
        value = struct.unpack_from('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 3+idx*1)[0]
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetRecordIdentifier(self, value):
        """Identifier for current record stream."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 0, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('1')
    @msg.size('1')
    @msg.count(1)
    def SetDataSegmentNumber(self, value):
        """Data segment number."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 1, tmp)
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('2')
    @msg.size('1')
    @msg.count(1)
    def SetFinalSegmentNumber(self, value):
        """Final segment number for this record."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 2, tmp)
    
    @msg.units('hex')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('3')
    @msg.size('1')
    @msg.count(252)
    def SetData(self, value, idx):
        """N-3 bytes of data."""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), DataCollection_AllRecords_Status.MSG_OFFSET + 3+idx*1, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="RecordIdentifier",type="int",units="",minVal="0",maxVal="255",description="Identifier for current record stream.",get=GetRecordIdentifier,set=SetRecordIdentifier,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="DataSegmentNumber",type="int",units="",minVal="0",maxVal="255",description="Data segment number.",get=GetDataSegmentNumber,set=SetDataSegmentNumber,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="FinalSegmentNumber",type="int",units="",minVal="0",maxVal="255",description="Final segment number for this record.",get=GetFinalSegmentNumber,set=SetFinalSegmentNumber,count=1, bitfieldInfo = [], enum = []),\
        FieldInfo(name="Data",type="int",units="hex",minVal="0",maxVal="255",description="N-3 bytes of data.",get=GetData,set=SetData,count=252, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("DataCollection.AllRecords.Status", DataCollection_AllRecords_Status.ID, DataCollection_AllRecords_Status)
#    obj/CodeGenerator/Python/DataCollection/AllRecords.py
#    Created 27/07/2023 at 10:10:02 from:
#        Messages = messages/DataCollection/AllRecords.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class DataCollection_AllRecords_Result :
    ID = 53286
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 13), ("Function", 2), ("Operator", 6)])
    ReverseIDs = OrderedDict([(13, "FunctionBlock"), (2, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(DataCollection_AllRecords_Result.MSG_OFFSET + DataCollection_AllRecords_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, DataCollection_AllRecords_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, DataCollection_AllRecords_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(DataCollection_AllRecords_Result.MSG_OFFSET + DataCollection_AllRecords_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(DataCollection_AllRecords_Result.ID)
            self.hdr.SetDataLength(DataCollection_AllRecords_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "DataCollection.AllRecords.Result"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("DataCollection.AllRecords.Result", DataCollection_AllRecords_Result.ID, DataCollection_AllRecords_Result)
