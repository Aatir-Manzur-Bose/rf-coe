#    obj/CodeGenerator/Python/Cloud/Synchronize.py
#    Created 27/07/2023 at 10:09:59 from:
#        Messages = messages/Cloud/Synchronize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Cloud_Synchronize_Start :
    ID = 81973
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 20), ("Function", 3), ("Operator", 5)])
    ReverseIDs = OrderedDict([(20, "FunctionBlock"), (3, "Function"), (5, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Cloud_Synchronize_Start.MSG_OFFSET + Cloud_Synchronize_Start.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Cloud_Synchronize_Start.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Cloud_Synchronize_Start.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Cloud_Synchronize_Start.MSG_OFFSET + Cloud_Synchronize_Start.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Cloud_Synchronize_Start.ID)
            self.hdr.SetDataLength(Cloud_Synchronize_Start.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Cloud.Synchronize.Start"
    # Accessors
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetProperties(self):
        """Bitfield of properties being synchronized"""
        value = struct.unpack_from('B', self.rawBuffer(), Cloud_Synchronize_Start.MSG_OFFSET + 0)[0]
        return value
    
    @msg.units('Bitfield')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetProperties(self, value):
        """Bitfield of properties being synchronized"""
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Cloud_Synchronize_Start.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Properties",type="int",units="Bitfield",minVal="0",maxVal="255",description="Bitfield of properties being synchronized",get=GetProperties,set=SetProperties,count=1, bitfieldInfo = [], enum = [])\
    ]

Messaging.Register("Cloud.Synchronize.Start", Cloud_Synchronize_Start.ID, Cloud_Synchronize_Start)
#    obj/CodeGenerator/Python/Cloud/Synchronize.py
#    Created 27/07/2023 at 10:09:59 from:
#        Messages = messages/Cloud/Synchronize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Cloud_Synchronize_Processing :
    ID = 81975
    SIZE = 0
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    IDs = OrderedDict([("FunctionBlock", 20), ("Function", 3), ("Operator", 7)])
    ReverseIDs = OrderedDict([(20, "FunctionBlock"), (3, "Function"), (7, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Cloud_Synchronize_Processing.MSG_OFFSET + Cloud_Synchronize_Processing.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Cloud_Synchronize_Processing.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Cloud_Synchronize_Processing.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Cloud_Synchronize_Processing.MSG_OFFSET + Cloud_Synchronize_Processing.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Cloud_Synchronize_Processing.ID)
            self.hdr.SetDataLength(Cloud_Synchronize_Processing.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Cloud.Synchronize.Processing"
    # Accessors

    # Reflection information
    fields = [ \
    ]

Messaging.Register("Cloud.Synchronize.Processing", Cloud_Synchronize_Processing.ID, Cloud_Synchronize_Processing)
#    obj/CodeGenerator/Python/Cloud/Synchronize.py
#    Created 27/07/2023 at 10:09:59 from:
#        Messages = messages/Cloud/Synchronize.yaml
#        Template = Template.py
#        Language = python
#
#                     AUTOGENERATED FILE, DO NOT EDIT
import struct
import ctypes
from collections import OrderedDict
from msgtools.lib.messaging import *
import msgtools.lib.messaging as msg

class Cloud_Synchronize_Result :
    ID = 81974
    SIZE = 1
    MSG_OFFSET = Messaging.hdrSize
    # Enumerations
    CloudProperties = OrderedDict([("None", 0), ("All", 1)])
    ReverseCloudProperties = OrderedDict([(0, "None"), (1, "All")])
    IDs = OrderedDict([("FunctionBlock", 20), ("Function", 3), ("Operator", 6)])
    ReverseIDs = OrderedDict([(20, "FunctionBlock"), (3, "Function"), (6, "Operator")])
    
    
    #@staticmethod
    #def Create():
    #    message_buffer = ctypes.create_string_buffer(Cloud_Synchronize_Result.MSG_OFFSET + Cloud_Synchronize_Result.SIZE)
    #
    #    Messaging.hdr.SetMessageID(message_buffer, Cloud_Synchronize_Result.ID)
    #    Messaging.hdr.SetDataLength(message_buffer, Cloud_Synchronize_Result.SIZE)
    #
    #    return message_buffer

    def __init__(self, messageBuffer=None):
        doInit = 0
        if messageBuffer == None:
            doInit = 1
            messageBuffer = ctypes.create_string_buffer(Cloud_Synchronize_Result.MSG_OFFSET + Cloud_Synchronize_Result.SIZE)
        else:
            try:
                messageBuffer.raw
            except AttributeError:
                newbuf = ctypes.create_string_buffer(len(messageBuffer))
                for i in range(0, len(messageBuffer)):
                    newbuf[i] = bytes(messageBuffer)[i]
                messageBuffer = newbuf
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        self.msg_buffer_wrapper = { "msg_buffer": messageBuffer }

        self.hdr = Messaging.hdr(messageBuffer)
        if doInit:
            self.hdr.SetMessageID(Cloud_Synchronize_Result.ID)
            self.hdr.SetDataLength(Cloud_Synchronize_Result.SIZE)
            self.initialize()

    def initialize(self):
            pass

    def rawBuffer(self):
        # this is a trick to get us to store a copy of a pointer to a buffer, rather than making a copy of the buffer
        return self.msg_buffer_wrapper["msg_buffer"]

    @staticmethod
    def MsgName():
        return "Cloud.Synchronize.Result"
    # Accessors
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def GetProperties(self, enumAsInt=0):
        """Variable length bitfield of properties that were synchronized"""
        value = struct.unpack_from('B', self.rawBuffer(), Cloud_Synchronize_Result.MSG_OFFSET + 0)[0]
        if not enumAsInt:
            value = Cloud_Synchronize_Result.ReverseCloudProperties.get(value, value)
        return value
    
    @msg.units('')
    @msg.default('')
    @msg.minVal('0')
    @msg.maxVal('255')
    @msg.offset('0')
    @msg.size('1')
    @msg.count(1)
    def SetProperties(self, value):
        """Variable length bitfield of properties that were synchronized"""
        defaultValue = 0
        try:
            value = int(float(value))
        except ValueError:
            pass
        if isinstance(value, int) or value.isdigit():
            defaultValue = int(value)
        value = Cloud_Synchronize_Result.CloudProperties.get(value, defaultValue)
        tmp = min(max(value, 0), 255)
        struct.pack_into('B', self.rawBuffer(), Cloud_Synchronize_Result.MSG_OFFSET + 0, tmp)
    

    # Reflection information
    fields = [ \
        FieldInfo(name="Properties",type="enumeration",units="",minVal="0",maxVal="255",description="Variable length bitfield of properties that were synchronized",get=GetProperties,set=SetProperties,count=1, bitfieldInfo = [], enum = [CloudProperties, ReverseCloudProperties])\
    ]

Messaging.Register("Cloud.Synchronize.Result", Cloud_Synchronize_Result.ID, Cloud_Synchronize_Result)
